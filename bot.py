import os
import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import io
import re
import openpyxl
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
MAIN_MENU, RADIO_SELECTION, CAMPAIGN_DATES, TIME_SLOTS, BRANDED_SECTIONS, CAMPAIGN_CREATOR, PRODUCTION_OPTION, CONTACT_INFO, CONFIRMATION, FINAL_ACTIONS = range(10)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8281804030:AAEFEYgqigL3bdH4DL0zl1tW71fwwo_8cyU"

# –í–∞—à Telegram ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_TELEGRAM_ID = 174046571

# –¶–µ–Ω—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
BASE_PRICE_PER_SECOND = 2.0  # 2‚ÇΩ –∑–∞ —Å–µ–∫—É–Ω–¥—É
MIN_PRODUCTION_COST = 2000
MIN_BUDGET = 7000

TIME_SLOTS_DATA = [
    {"time": "06:00-07:00", "label": "–ü–æ–¥—ä–µ–º, —Å–±–æ—Ä—ã", "premium": True},
    {"time": "07:00-08:00", "label": "–£—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏", "premium": True},
    {"time": "08:00-09:00", "label": "–ü–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ üöÄ", "premium": True},
    {"time": "09:00-10:00", "label": "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã", "premium": True},
    {"time": "10:00-11:00", "label": "–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å", "premium": False},
    {"time": "11:00-12:00", "label": "–ü—Ä–µ–¥–æ–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è", "premium": False},
    {"time": "12:00-13:00", "label": "–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤", "premium": False},
    {"time": "13:00-14:00", "label": "–ü–æ—Å–ª–µ –æ–±–µ–¥–∞", "premium": False},
    {"time": "14:00-15:00", "label": "–í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–Ω—è", "premium": False},
    {"time": "15:00-16:00", "label": "–†–∞–±–æ—á–∏–π —Ñ–∏–Ω–∏—à", "premium": False},
    {"time": "16:00-17:00", "label": "–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", "premium": True},
    {"time": "17:00-18:00", "label": "–í–µ—á–µ—Ä–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏", "premium": True},
    {"time": "18:00-19:00", "label": "–ü–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ üöÄ", "premium": True},
    {"time": "19:00-20:00", "label": "–î–æ–º–∞—à–Ω–∏–π –≤–µ—á–µ—Ä", "premium": True},
    {"time": "20:00-21:00", "label": "–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç–¥—ã—Ö", "premium": True}
]

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ö–≤–∞—Ç–∞ (—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ)
STATION_COVERAGE = {
    'LOVE RADIO': 540,
    '–ê–í–¢–û–†–ê–î–ò–û': 3250,
    '–†–ê–î–ò–û –î–ê–ß–ê': 3250,
    '–†–ê–î–ò–û –®–ê–ù–°–û–ù': 2900,
    '–†–ï–¢–†–û FM': 3600,
    '–Æ–ú–û–† FM': 1260
}

BRANDED_SECTION_PRICES = {
    'auto': 1.2,
    'realty': 1.15,
    'medical': 1.25,
    'custom': 1.3
}

PRODUCTION_OPTIONS = {
    'standard': {'price': 2000, 'name': '–°–¢–ê–ù–î–ê–†–¢–ù–´–ô –†–û–õ–ò–ö', 'desc': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞, –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, 2 –ø—Ä–∞–≤–∫–∏, —Å—Ä–æ–∫: 2-3 –¥–Ω—è'},
    'premium': {'price': 4000, 'name': '–ü–†–ï–ú–ò–£–ú –†–û–õ–ò–ö', 'desc': '–û–∑–≤—É—á–∫–∞ 2-–º—è –≥–æ–ª–æ—Å–∞–º–∏, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –º—É–∑—ã–∫–∞, 5 –ø—Ä–∞–≤–∫–∏, —Å—Ä–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 1 –¥–µ–Ω—å'},
    'ready': {'price': 0, 'name': '–ì–û–¢–û–í–´–ô –†–û–õ–ò–ö', 'desc': '–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π —Ä–æ–ª–∏–∫, –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª–æ–º'}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('campaigns.db')
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS campaigns (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                campaign_number TEXT,
                radio_stations TEXT,
                start_date TEXT,
                end_date TEXT,
                campaign_days INTEGER,
                time_slots TEXT,
                branded_section TEXT,
                campaign_text TEXT,
                production_option TEXT,
                contact_name TEXT,
                company TEXT,
                phone TEXT,
                email TEXT,
                duration INTEGER,
                base_price INTEGER,
                discount INTEGER,
                final_price INTEGER,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS rate_limits (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                action_type TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

def validate_phone(phone: str) -> bool:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not phone:
        return False
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return True

def validate_date(date_text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã"""
    try:
        date = datetime.strptime(date_text, '%d.%m.%Y')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if date < datetime.now().replace(hour=0, minute=0, second=0, microsecond=0):
            return False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1 –≥–æ–¥ –≤–ø–µ—Ä–µ–¥
        if date > datetime.now() + timedelta(days=365):
            return False
        return True
    except ValueError:
        return False

def format_number(num):
    return f"{num:,}".replace(',', ' ')

def check_rate_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ 5 –∑–∞—è–≤–æ–∫ –≤ –¥–µ–Ω—å"""
    try:
        conn = sqlite3.connect('campaigns.db')
        cursor = conn.cursor()
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        cursor.execute('''
            SELECT COUNT(*) FROM campaigns 
            WHERE user_id = ? AND created_at >= datetime('now', '-1 day')
        ''', (user_id,))
        
        count = cursor.fetchone()[0]
        conn.close()
        
        return count < 5
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞: {e}")
        return True

def calculate_campaign_price_and_reach(user_data):
    try:
        base_duration = user_data.get('duration', 20)
        campaign_days = user_data.get('campaign_days', 30)
        num_stations = len(user_data.get('selected_radios', []))
        selected_time_slots = user_data.get('selected_time_slots', [])
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        if not selected_time_slots:
            return 0, 0, MIN_BUDGET, 0, 0, 0
            
        spots_per_day = len(selected_time_slots) * num_stations
        base_air_cost = base_duration * BASE_PRICE_PER_SECOND * spots_per_day * campaign_days
        
        time_multiplier = 1.0
        for slot_index in selected_time_slots:
            if 0 <= slot_index < len(TIME_SLOTS_DATA):
                slot = TIME_SLOTS_DATA[slot_index]
                if slot['premium']:
                    time_multiplier = max(time_multiplier, 1.1)
        
        branded_multiplier = 1.0
        branded_section = user_data.get('branded_section')
        if branded_section in BRANDED_SECTION_PRICES:
            branded_multiplier = BRANDED_SECTION_PRICES[branded_section]
        
        production_cost = user_data.get('production_cost', 0)
        air_cost = int(base_air_cost * time_multiplier * branded_multiplier)
        base_price = air_cost + production_cost
        
        discount = int(base_price * 0.5)
        discounted_price = base_price - discount
        final_price = max(discounted_price, MIN_BUDGET)
        
        # –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –æ—Ö–≤–∞—Ç–∞ –ø–æ —Å–ø–æ—Ç–∞–º
        coverage_per_spot = 0.15  # 15% –æ—Ö–≤–∞—Ç –∑–∞ –æ–¥–∏–Ω —Å–ø–æ—Ç
        daily_coverage = 0
        for radio in user_data.get('selected_radios', []):
            station_coverage = STATION_COVERAGE.get(radio, 0)
            daily_coverage += station_coverage * coverage_per_spot * len(selected_time_slots)
        
        total_reach = int(daily_coverage * campaign_days * 0.7 * 0.5)  # –£—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
        
        return base_price, discount, final_price, total_reach, int(daily_coverage), spots_per_day
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        return 0, 0, MIN_BUDGET, 0, 0, 0

def get_branded_section_name(section):
    names = {
        'auto': '–ê–≤—Ç–æ—Ä—É–±—Ä–∏–∫–∏ (+20%)',
        'realty': '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (+15%)',
        'medical': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä—É–±—Ä–∏–∫–∏ (+25%)',
        'custom': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä—É–±—Ä–∏–∫–∞ (+30%)'
    }
    return names.get(section, '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')

def create_excel_file_from_db(campaign_number):
    try:
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ Excel –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}")
        
        conn = sqlite3.connect('campaigns.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM campaigns WHERE campaign_number = ?', (campaign_number,))
        campaign_data = cursor.fetchone()
        conn.close()
        
        if not campaign_data:
            logger.error(f"‚ùå –ö–∞–º–ø–∞–Ω–∏—è #{campaign_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            return None
            
        logger.info(f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è #{campaign_number} –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
        
        # –°–æ–∑–¥–∞–µ–º user_data –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ë–î
        user_data = {
            'selected_radios': campaign_data[3].split(','),
            'start_date': campaign_data[4],
            'end_date': campaign_data[5],
            'campaign_days': campaign_data[6],
            'selected_time_slots': list(map(int, campaign_data[7].split(','))) if campaign_data[7] else [],
            'branded_section': campaign_data[8],
            'campaign_text': campaign_data[9],
            'production_option': campaign_data[10],
            'contact_name': campaign_data[11],
            'company': campaign_data[12],
            'phone': campaign_data[13],
            'email': campaign_data[14],
            'duration': campaign_data[15],
            'production_cost': PRODUCTION_OPTIONS.get(campaign_data[10], {}).get('price', 0)
        }
        
        logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {len(user_data.get('selected_radios', []))} —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π")
        
        base_price, discount, final_price, total_reach, daily_coverage, spots_per_day = calculate_campaign_price_and_reach(user_data)
        logger.info(f"üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏: –±–∞–∑–∞={base_price}, —Å–∫–∏–¥–∫–∞={discount}, –∏—Ç–æ–≥–æ={final_price}")
        
        wb = Workbook()
        ws = wb.active
        ws.title = f"–ú–µ–¥–∏–∞–ø–ª–∞–Ω {campaign_number}"
        
        header_font = Font(bold=True, size=14, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        title_font = Font(bold=True, size=12)
        border = Border(left=Side(style='thin'), right=Side(style='thin'), 
                       top=Side(style='thin'), bottom=Side(style='thin'))
        
        ws.merge_cells('A1:F1')
        ws['A1'] = f"–ú–ï–î–ò–ê–ü–õ–ê–ù –ö–ê–ú–ü–ê–ù–ò–ò #{campaign_number}"
        ws['A1'].font = header_font
        ws['A1'].fill = header_fill
        ws['A1'].alignment = Alignment(horizontal='center')
        
        ws.merge_cells('A2:F2')
        ws['A2'] = "–†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò"
        ws['A2'].font = Font(bold=True, size=12, color="366092")
        ws['A2'].alignment = Alignment(horizontal='center')
        
        ws.merge_cells('A4:F4')
        ws['A4'] = "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
        ws['A4'].font = Font(bold=True, size=11)
        
        ws['A6'] = "üìä –ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ú–ü–ê–ù–ò–ò:"
        ws['A6'].font = title_font
        
        params = [
            f"–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏: {', '.join(user_data.get('selected_radios', []))}",
            f"–ü–µ—Ä–∏–æ–¥: {user_data.get('start_date')} - {user_data.get('end_date')} ({user_data.get('campaign_days')} –¥–Ω–µ–π)",
            f"–í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {spots_per_day}",
            f"–í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {spots_per_day * user_data.get('campaign_days', 30)}",
            f"–•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ —Ä–æ–ª–∏–∫–∞: {user_data.get('duration', 20)} —Å–µ–∫",
            f"–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä—É–±—Ä–∏–∫–∞: {get_branded_section_name(user_data.get('branded_section'))}",
            f"–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: {PRODUCTION_OPTIONS.get(user_data.get('production_option', 'ready'), {}).get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')}"
        ]
        
        for i, param in enumerate(params, 7):
            ws[f'A{i}'] = f"‚Ä¢ {param}"
        
        ws['A15'] = "üìª –í–´–ë–†–ê–ù–ù–´–ï –†–ê–î–ò–û–°–¢–ê–ù–¶–ò–ò:"
        ws['A15'].font = title_font
        
        row = 16
        total_listeners = 0
        for radio in user_data.get('selected_radios', []):
            listeners = STATION_COVERAGE.get(radio, 0)
            total_listeners += listeners
            ws[f'A{row}'] = f"‚Ä¢ {radio}: {format_number(listeners)} —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å"
            row += 1
        
        ws[f'A{row}'] = f"‚Ä¢ –ò–¢–û–ì–û: {format_number(total_listeners)} —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å"
        ws[f'A{row}'].font = Font(bold=True)
        
        row += 2
        ws[f'A{row}'] = "üïí –í–´–ë–†–ê–ù–ù–´–ï –í–†–ï–ú–ï–ù–ù–´–ï –°–õ–û–¢–´:"
        ws[f'A{row}'].font = title_font
        
        row += 1
        for slot_index in user_data.get('selected_time_slots', []):
            if 0 <= slot_index < len(TIME_SLOTS_DATA):
                slot = TIME_SLOTS_DATA[slot_index]
                premium = "‚úÖ" if slot['premium'] else "‚ùå"
                ws[f'A{row}'] = f"‚Ä¢ {slot['time']} - {slot['label']} (–ü—Ä–µ–º–∏—É–º: {premium})"
                row += 1
        
        row += 1
        ws[f'A{row}'] = "üéØ –†–ê–°–ß–ï–¢–ù–´–ô –û–•–í–ê–¢ (–ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–ø–æ—Ç–∞–º):"
        ws[f'A{row}'].font = title_font
        
        row += 1
        coverage_per_spot = int(total_listeners * 0.15 / len(user_data.get('selected_time_slots', [1])))
        ws[f'A{row}'] = f"‚Ä¢ –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {spots_per_day}"
        row += 1
        ws[f'A{row}'] = f"‚Ä¢ –û—Ö–≤–∞—Ç –∑–∞ 1 –≤—ã—Ö–æ–¥: ~{format_number(coverage_per_spot)} —á–µ–ª. (15% –æ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏)"
        row += 1
        ws[f'A{row}'] = f"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ö–≤–∞—Ç: ~{format_number(daily_coverage)} —á–µ–ª."
        row += 1
        ws[f'A{row}'] = f"‚Ä¢ –û–±—â–∏–π –æ—Ö–≤–∞—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: ~{format_number(total_reach)} —á–µ–ª."
        
        row += 2
        ws[f'A{row}'] = "üí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:"
        ws[f'A{row}'].font = title_font
        
        financial_data = [
            ['–ü–æ–∑–∏—Ü–∏—è', '–°—É–º–º–∞ (‚ÇΩ)'],
            ['–≠—Ñ–∏—Ä–Ω–æ–µ –≤—Ä–µ–º—è', base_price - user_data.get('production_cost', 0)],
            ['–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ä–æ–ª–∏–∫–∞', user_data.get('production_cost', 0)],
            ['', ''],
            ['–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', base_price],
            ['–°–∫–∏–¥–∫–∞ 50%', -discount],
            ['', ''],
            ['–ò–¢–û–ì–û', final_price]
        ]
        
        for i, (item, value) in enumerate(financial_data, row + 1):
            ws[f'A{i}'] = item
            if isinstance(value, int):
                ws[f'B{i}'] = value
                if item == '–ò–¢–û–ì–û':
                    ws[f'B{i}'].font = Font(bold=True, color="FF0000")
                elif item == '–°–∫–∏–¥–∫–∞ 50%':
                    ws[f'B{i}'].font = Font(color="00FF00")
            else:
                ws[f'B{i}'] = value
        
        row = i + 3
        ws[f'A{row}'] = "üë§ –í–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´:"
        ws[f'A{row}'].font = title_font
        
        contacts = [
            f"–ò–º—è: {user_data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
            f"Email: {user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
            f"–ö–æ–º–ø–∞–Ω–∏—è: {user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
        ]
        
        for i, contact in enumerate(contacts, row + 1):
            ws[f'A{i}'] = f"‚Ä¢ {contact}"
        
        row = i + 2
        ws[f'A{row}'] = "üìû –ù–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´:"
        ws[f'A{row}'].font = title_font
        ws[f'A{row + 1}'] = "‚Ä¢ Email: a.khlistunov@gmail.com"
        ws[f'A{row + 2}'] = "‚Ä¢ Telegram: t.me/AlexeyKhlistunov"
        
        row = row + 4
        ws[f'A{row}'] = "üéØ –°–¢–ê–†–¢ –ö–ê–ú–ü–ê–ù–ò–ò:"
        ws[f'A{row}'].font = title_font
        ws[f'A{row + 1}'] = "–í —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        
        row = row + 3
        ws[f'A{row}'] = f"üìÖ –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        ws.column_dimensions['A'].width = 45
        ws.column_dimensions['B'].width = 15
        
        table_start = row - len(financial_data) - 1
        table_end = table_start + len(financial_data) - 1
        for row_num in range(table_start, table_end + 1):
            for col in ['A', 'B']:
                ws[f'{col}{row_num}'].border = border
        
        buffer = io.BytesIO()
        wb.save(buffer)
        buffer.seek(0)
        
        logger.info(f"‚úÖ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}, —Ä–∞–∑–º–µ—Ä: {len(buffer.getvalue())} –±–∞–π—Ç")
        return buffer
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel: {e}")
        return None

async def send_excel_file_to_admin(context, campaign_number, query):
    try:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ Excel –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number} –∞–¥–º–∏–Ω—É")
        excel_buffer = create_excel_file_from_db(campaign_number)
        
        if not excel_buffer:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}")
            return False
            
        logger.info(f"‚úÖ Excel —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª...")
        await context.bot.send_document(
            chat_id=ADMIN_TELEGRAM_ID,
            document=excel_buffer,
            filename=f"mediaplan_{campaign_number}.xlsx",
            caption=f"üìä –ú–µ–¥–∏–∞–ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}"
        )
        logger.info(f"‚úÖ Excel —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel –∞–¥–º–∏–Ω—É: {e}")
        return False

async def send_admin_notification(context, user_data, campaign_number):
    try:
        base_price, discount, final_price, total_reach, daily_coverage, spots_per_day = calculate_campaign_price_and_reach(user_data)
        
        stations_text = ""
        for radio in user_data.get('selected_radios', []):
            listeners = STATION_COVERAGE.get(radio, 0)
            stations_text += f"‚Ä¢ {radio}: {format_number(listeners)}/–¥–µ–Ω—å\n"
        
        slots_text = ""
        for slot_index in user_data.get('selected_time_slots', []):
            if 0 <= slot_index < len(TIME_SLOTS_DATA):
                slot = TIME_SLOTS_DATA[slot_index]
                premium = "‚úÖ" if slot['premium'] else "‚ùå"
                slots_text += f"‚Ä¢ {slot['time']} - {slot['label']} (–ü—Ä–µ–º–∏—É–º: {premium})\n"
        
        notification_text = f"""
üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{campaign_number}

üë§ –ö–õ–ò–ï–ù–¢:
–ò–º—è: {user_data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
Email: {user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
–ö–æ–º–ø–∞–Ω–∏—è: {user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üìä –†–ê–î–ò–û–°–¢–ê–ù–¶–ò–ò:
{stations_text}
üìÖ –ü–ï–†–ò–û–î: {user_data.get('start_date')} - {user_data.get('end_date')} ({user_data.get('campaign_days')} –¥–Ω–µ–π)
üïí –°–õ–û–¢–´ ({len(user_data.get('selected_time_slots', []))} –≤—ã–±—Ä–∞–Ω–æ):
{slots_text}
üéôÔ∏è –†–£–ë–†–ò–ö–ê: {get_branded_section_name(user_data.get('branded_section'))}
‚è±Ô∏è –†–û–õ–ò–ö: {PRODUCTION_OPTIONS.get(user_data.get('production_option', 'ready'), {}).get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')}
üìè –•–†–û–ù–û–ú–ï–¢–†–ê–ñ: {user_data.get('duration', 20)} —Å–µ–∫

üí∞ –°–¢–û–ò–ú–û–°–¢–¨:
–ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ
–°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ
–ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ

üéØ –†–ê–°–ß–ï–¢–ù–´–ô –û–•–í–ê–¢ (–ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–ø–æ—Ç–∞–º):
‚Ä¢ –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {spots_per_day}
‚Ä¢ –í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤: {spots_per_day * user_data.get('campaign_days', 30)}
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: ~{format_number(daily_coverage)} —á–µ–ª.
‚Ä¢ –ó–∞ –ø–µ—Ä–∏–æ–¥: ~{format_number(total_reach)} —á–µ–ª.
"""
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –°–§–û–†–ú–ò–†–û–í–ê–¢–¨ EXCEL", callback_data=f"generate_excel_{campaign_number}"),
            ],
            [
                InlineKeyboardButton(f"üìû {user_data.get('phone', '–¢–µ–ª–µ—Ñ–æ–Ω')}", callback_data=f"call_{user_data.get('phone', '')}"),
                InlineKeyboardButton(f"‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"email_{user_data.get('email', '')}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=ADMIN_TELEGRAM_ID,
            text=notification_text,
            reply_markup=reply_markup
        )
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –°–û–ó–î–ê–¢–¨ –ö–ê–ú–ü–ê–ù–ò–Æ", callback_data="create_campaign")],
        [InlineKeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–•–í–ê–¢–ê", callback_data="statistics")],
        [InlineKeyboardButton("üìã –ú–û–ò –ó–ê–ö–ê–ó–´", callback_data="my_orders")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ù–ê–°", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    caption = (
        "üéôÔ∏è –†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò\n"
        "üìç –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫ ‚Ä¢ –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫ ‚Ä¢ +35 –∫–º –≤–æ–∫—Ä—É–≥\n\n"
        "üìª –í–ï–©–ê–ï–ú –ù–ê 6 –°–¢–ê–ù–¶–ò–Ø–•:\n"
        "‚Ä¢ LOVE RADIO ‚Ä¢ –ê–í–¢–û–†–ê–î–ò–û ‚Ä¢ –†–ê–î–ò–û –î–ê–ß–ê\n"
        "‚Ä¢ –†–ê–î–ò–û –®–ê–ù–°–û–ù ‚Ä¢ –†–ï–¢–†–û FM ‚Ä¢ –Æ–ú–û–† FM\n\n"
        "üìä –û–•–í–ê–¢ –ê–£–î–ò–¢–û–†–ò–ò:\n"
        "‚Ä¢ 3,000+ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –¥–µ–Ω—å\n"
        "‚Ä¢ 35,000+ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –≤ –º–µ—Å—è—Ü\n"
        "‚Ä¢ 52% –¥–æ–ª—è –º–µ—Å—Ç–Ω–æ–≥–æ —Ä–∞–¥–∏–æ—Ä—ã–Ω–∫–∞\n\n"
        "üí∞ –ë–ê–ó–û–í–ê–Ø –¶–ï–ù–ê: 2‚ÇΩ/—Å–µ–∫—É–Ω–¥—É"
    )
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–º–∞–Ω–¥—ã /start
    if update.message:
        await update.message.reply_text(
            caption,
            reply_markup=reply_markup
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ callback query (–≤–æ–∑–≤—Ä–∞—Ç –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞)
        query = update.callback_query
        await query.answer()
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        await query.edit_message_text(
            caption,
            reply_markup=reply_markup
        )
    
    return MAIN_MENU

async def radio_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_radios = context.user_data.get('selected_radios', [])
    total_listeners = sum(STATION_COVERAGE.get(radio, 0) for radio in selected_radios)
    
    keyboard = []
    
    # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ - –í–´–ë–†–ê–¢–¨ –í–°–ï 6 –†–ê–î–ò–û–°–¢–ê–ù–¶–ò–ô
    all_selected = len(selected_radios) == 6
    keyboard.append([InlineKeyboardButton(
        "‚úÖ –í–´–ë–†–ê–¢–¨ –í–°–ï 6 –†–ê–î–ò–û–°–¢–ê–ù–¶–ò–ô" if all_selected else "‚ö™ –í–´–ë–†–ê–¢–¨ –í–°–ï 6 –†–ê–î–ò–û–°–¢–ê–ù–¶–ò–ô", 
        callback_data="select_all_radios"
    )])
    
    radio_stations = [
        ("LOVE RADIO", "radio_love", 540),
        ("–ê–í–¢–û–†–ê–î–ò–û", "radio_auto", 3250),
        ("–†–ê–î–ò–û –î–ê–ß–ê", "radio_dacha", 3250), 
        ("–†–ê–î–ò–û –®–ê–ù–°–û–ù", "radio_chanson", 2900),
        ("–†–ï–¢–†–û FM", "radio_retro", 3600),
        ("–Æ–ú–û–† FM", "radio_humor", 1260)
    ]
    
    for name, callback, listeners in radio_stations:
        emoji = "‚úÖ" if name in selected_radios else "‚ö™"
        button_text = f"{emoji} {name} ({format_number(listeners)} —á/–¥–µ–Ω—å)"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback)])
        keyboard.append([InlineKeyboardButton("üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{callback}")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_main")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_campaign_dates")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"–í—ã–±–æ—Ä —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π\n\n"
        f"{'‚úÖ' if 'LOVE RADIO' in selected_radios else '‚ö™'} LOVE RADIO\n"
        f"üë• 540 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë© –ú–æ–ª–æ–¥—ë–∂—å 16-35 –ª–µ—Ç\n\n"
        f"{'‚úÖ' if '–ê–í–¢–û–†–ê–î–ò–û' in selected_radios else '‚ö™'} –ê–í–¢–û–†–ê–î–ò–û\n"
        f"üë• 3,250 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë® –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç—ã 25-55 –ª–µ—Ç\n\n"
        f"{'‚úÖ' if '–†–ê–î–ò–û –î–ê–ß–ê' in selected_radios else '‚ö™'} –†–ê–î–ò–û –î–ê–ß–ê\n"
        f"üë• 3,250 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë®üë© –°–µ–º—å—è 35-60 –ª–µ—Ç\n\n"
        f"{'‚úÖ' if '–†–ê–î–ò–û –®–ê–ù–°–û–ù' in selected_radios else '‚ö™'} –†–ê–î–ò–û –®–ê–ù–°–û–ù\n"
        f"üë• 2,900 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë® –ú—É–∂—á–∏–Ω—ã 30-60+ –ª–µ—Ç\n\n"
        f"{'‚úÖ' if '–†–ï–¢–†–û FM' in selected_radios else '‚ö™'} –†–ï–¢–†–û FM\n"
        f"üë• 3,600 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë¥üëµ –í–∑—Ä–æ—Å–ª—ã–µ 35-65 –ª–µ—Ç\n\n"
        f"{'‚úÖ' if '–Æ–ú–û–† FM' in selected_radios else '‚ö™'} –Æ–ú–û–† FM\n"
        f"üë• 1,260 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë¶üëß –ú–æ–ª–æ–¥–µ–∂—å 12-19 –∏ –≤–∑—Ä–æ—Å–ª—ã–µ 25-45 –ª–µ—Ç\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_radios)} —Å—Ç–∞–Ω—Ü–∏–∏ ‚Ä¢ {format_number(total_listeners)} —Å–ª—É—à–∞—Ç–µ–ª–µ–π\n"
        f"[ –î–ê–õ–ï–ï ]"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return RADIO_SELECTION

async def handle_radio_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_main":
        return await start(update, context)
    
    elif query.data == "select_all_radios":
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ 6 —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π
        all_radios = ['LOVE RADIO', '–ê–í–¢–û–†–ê–î–ò–û', '–†–ê–î–ò–û –î–ê–ß–ê', '–†–ê–î–ò–û –®–ê–ù–°–û–ù', '–†–ï–¢–†–û FM', '–Æ–ú–û–† FM']
        context.user_data['selected_radios'] = all_radios
        return await radio_selection(update, context)
    
    elif query.data.startswith("details_"):
        station_data = {
            'details_radio_love': "LOVE RADIO - 540 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\n‚Ä¢ –ú–æ–ª–æ–¥—ë–∂—å 16-35 –ª–µ—Ç\n‚Ä¢ –û—Ö–≤–∞—Ç —Å–Ω–∏–∂–µ–Ω –Ω–∞ 40-50% –∏–∑-–∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n‚Ä¢ –ú—É–∑—ã–∫–∞: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∏—Ç—ã",
            'details_radio_auto': "–ê–í–¢–û–†–ê–î–ò–û - 3,250 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\n‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç—ã 25-55 –ª–µ—Ç\n‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —à–∏—Ä–æ–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n‚Ä¢ –î–æ—Ä–æ–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –ø—Ä–æ–±–∫–∏",
            'details_radio_dacha': "–†–ê–î–ò–û –î–ê–ß–ê - 3,250 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\n‚Ä¢ –°–µ–º—å—è 35-60 –ª–µ—Ç\n‚Ä¢ –í—ã—Å–æ–∫–∏–π –æ—Ö–≤–∞—Ç —Å—Ä–µ–¥–∏ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤\n‚Ä¢ –°–µ–º–µ–π–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏, –¥–∞—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã",
            'details_radio_chanson': "–†–ê–î–ò–û –®–ê–ù–°–û–ù - 2,900 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\n‚Ä¢ –ú—É–∂—á–∏–Ω—ã 30-60+ –ª–µ—Ç\n‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω–æ —Å—Ä–µ–¥–∏ —Å—Ç–∞—Ä—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n‚Ä¢ –ú—É–∑—ã–∫–∞: —à–∞–Ω—Å–æ–Ω, –∞–≤—Ç–æ—Ä—Å–∫–∞—è –ø–µ—Å–Ω—è",
            'details_radio_retro': "–†–ï–¢–†–û FM - 3,600 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\n‚Ä¢ –í–∑—Ä–æ—Å–ª—ã–µ 35-65 –ª–µ—Ç\n‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n‚Ä¢ –ú—É–∑—ã–∫–∞: —Ö–∏—Ç—ã 80-90-—Ö –≥–æ–¥–æ–≤",
            'details_radio_humor': "–Æ–ú–û–† FM - 1,260 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\n‚Ä¢ –ú–æ–ª–æ–¥–µ–∂—å 12-19 –∏ –≤–∑—Ä–æ—Å–ª—ã–µ 25-45 –ª–µ—Ç\n‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç\n‚Ä¢ –Æ–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
        }
        
        station_info = station_data.get(query.data, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–Ω—Ü–∏–∏")
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_radio")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(station_info, reply_markup=reply_markup)
        return RADIO_SELECTION
    
    radio_data = {
        'radio_love': 'LOVE RADIO',
        'radio_auto': '–ê–í–¢–û–†–ê–î–ò–û', 
        'radio_dacha': '–†–ê–î–ò–û –î–ê–ß–ê',
        'radio_chanson': '–†–ê–î–ò–û –®–ê–ù–°–û–ù',
        'radio_retro': '–†–ï–¢–†–û FM',
        'radio_humor': '–Æ–ú–û–† FM'
    }
    
    if query.data in radio_data:
        radio_name = radio_data[query.data]
        selected_radios = context.user_data.get('selected_radios', [])
        
        if radio_name in selected_radios:
            selected_radios.remove(radio_name)
        else:
            selected_radios.append(radio_name)
        
        context.user_data['selected_radios'] = selected_radios
        return await radio_selection(update, context)
    
    elif query.data == "to_campaign_dates":
        if not context.user_data.get('selected_radios'):
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é!", show_alert=True)
            return RADIO_SELECTION
        return await campaign_dates(update, context)
    
    elif query.data == "back_to_radio":
        return await radio_selection(update, context)
    
    return RADIO_SELECTION

async def campaign_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    start_date = context.user_data.get('start_date')
    end_date = context.user_data.get('end_date')
    campaign_days = context.user_data.get('campaign_days', 0)
    
    selected_radios = context.user_data.get('selected_radios', [])
    stations_info = "üìª –í–´–ë–†–ê–ù–´ –°–¢–ê–ù–¶–ò–ò:\n"
    for radio in selected_radios:
        listeners = STATION_COVERAGE.get(radio, 0)
        stations_info += f"‚Ä¢ {radio} ({format_number(listeners)} —á/–¥–µ–Ω—å)\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    dates_button_text = "‚úÖ –ü–ï–†–ò–û–î –í–´–ë–†–ê–ù" if start_date and end_date else "üóìÔ∏è –í–´–ë–†–ê–¢–¨ –ü–ï–†–ò–û–î"
    
    keyboard = [
        [InlineKeyboardButton(dates_button_text, callback_data="select_period")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_radio")],
        [InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_time_slots")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    dates_info = ""
    if start_date and end_date:
        dates_info = f"üóìÔ∏è –ù–∞—á–∞–ª–æ: {start_date} ‚úÖ\nüóìÔ∏è –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date} ‚úÖ\n"
    else:
        dates_info = "üóìÔ∏è –ü–µ—Ä–∏–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω\n"
    
    text = (
        f"üìÖ –í–´–ë–ï–†–ò–¢–ï –î–ê–¢–´ –ö–ê–ú–ü–ê–ù–ò–ò\n\n"
        f"{stations_info}\n"
        f"{dates_info}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"‚úÖ –ü–µ—Ä–∏–æ–¥: {campaign_days} –¥–Ω–µ–π\n"
        f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 15 –¥–Ω–µ–π\n\n"
        f"üéØ –°—Ç–∞—Ä—Ç –∫–∞–º–ø–∞–Ω–∏–∏: –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return CAMPAIGN_DATES

async def handle_campaign_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_radio":
        return await radio_selection(update, context)
    
    elif query.data == "select_period":
        keyboard = [[InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_period")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 15.12.2024\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            reply_markup=reply_markup
        )
        return "WAITING_START_DATE"
    
    elif query.data == "to_time_slots":
        if not context.user_data.get('start_date') or not context.user_data.get('end_date'):
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏!", show_alert=True)
            return CAMPAIGN_DATES
        
        campaign_days = context.user_data.get('campaign_days', 0)
        if campaign_days < 15:
            await query.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏ - 15 –¥–Ω–µ–π!", show_alert=True)
            return CAMPAIGN_DATES
            
        return await time_slots(update, context)
    
    elif query.data == "cancel_period":
        return await campaign_dates(update, context)
    
    return CAMPAIGN_DATES

async def process_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date_text = update.message.text.strip()
        
        if not validate_date(date_text):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "‚Ä¢ –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "‚Ä¢ –î–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º\n"
                "‚Ä¢ –î–∞—Ç–∞ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1 –≥–æ–¥ –≤–ø–µ—Ä–µ–¥\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_period")]])
            )
            return "WAITING_START_DATE"
        
        context.user_data['start_date'] = date_text
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
        keyboard = [[InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_period")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 30.12.2024\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            reply_markup=reply_markup
        )
        return "WAITING_END_DATE"
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 15.12.2024",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_period")]])
        )
        return "WAITING_START_DATE"

async def process_end_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date_text = update.message.text.strip()
        
        if not validate_date(date_text):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "‚Ä¢ –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "‚Ä¢ –î–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º\n"
                "‚Ä¢ –î–∞—Ç–∞ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1 –≥–æ–¥ –≤–ø–µ—Ä–µ–¥\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_period")]])
            )
            return "WAITING_END_DATE"
        
        if not context.user_data.get('start_date'):
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–Ω–æ–≤–∞:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_period")]])
            )
            return "WAITING_END_DATE"
        
        start_date = datetime.strptime(context.user_data['start_date'], '%d.%m.%Y')
        end_date = datetime.strptime(date_text, '%d.%m.%Y')
        
        if end_date <= start_date:
            await update.message.reply_text(
                "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_period")]])
            )
            return "WAITING_END_DATE"
        
        campaign_days = (end_date - start_date).days + 1
        
        if campaign_days < 15:
            await update.message.reply_text(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏ - 15 –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–Ω–æ–≤–∞:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_period")]])
            )
            return "WAITING_END_DATE"
        
        context.user_data['end_date'] = date_text
        context.user_data['campaign_days'] = campaign_days
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥–∞—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        return await campaign_dates_from_message(update, context)
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 30.12.2024",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_period")]])
        )
        return "WAITING_END_DATE"

async def campaign_dates_from_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä—Å–∏—è campaign_dates –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ message handler"""
    start_date = context.user_data.get('start_date')
    end_date = context.user_data.get('end_date')
    campaign_days = context.user_data.get('campaign_days', 0)
    
    selected_radios = context.user_data.get('selected_radios', [])
    stations_info = "üìª –í–´–ë–†–ê–ù–´ –°–¢–ê–ù–¶–ò–ò:\n"
    for radio in selected_radios:
        listeners = STATION_COVERAGE.get(radio, 0)
        stations_info += f"‚Ä¢ {radio} ({format_number(listeners)} —á/–¥–µ–Ω—å)\n"
    
    dates_button_text = "‚úÖ –ü–ï–†–ò–û–î –í–´–ë–†–ê–ù" if start_date and end_date else "üóìÔ∏è –í–´–ë–†–ê–¢–¨ –ü–ï–†–ò–û–î"
    
    keyboard = [
        [InlineKeyboardButton(dates_button_text, callback_data="select_period")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_radio")],
        [InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_time_slots")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    dates_info = ""
    if start_date and end_date:
        dates_info = f"üóìÔ∏è –ù–∞—á–∞–ª–æ: {start_date} ‚úÖ\nüóìÔ∏è –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date} ‚úÖ\n"
    else:
        dates_info = "üóìÔ∏è –ü–µ—Ä–∏–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω\n"
    
    text = (
        f"üìÖ –í–´–ë–ï–†–ò–¢–ï –î–ê–¢–´ –ö–ê–ú–ü–ê–ù–ò–ò\n\n"
        f"{stations_info}\n"
        f"{dates_info}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"‚úÖ –ü–µ—Ä–∏–æ–¥: {campaign_days} –¥–Ω–µ–π\n"
        f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 15 –¥–Ω–µ–π\n\n"
        f"üéØ –°—Ç–∞—Ä—Ç –∫–∞–º–ø–∞–Ω–∏–∏: –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )
    
    await update.message.reply_text(text, reply_markup=reply_markup)
    return CAMPAIGN_DATES

async def time_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_slots = context.user_data.get('selected_time_slots', [])
    selected_radios = context.user_data.get('selected_radios', [])
    campaign_days = context.user_data.get('campaign_days', 30)
    
    keyboard = []
    keyboard.append([InlineKeyboardButton("‚úÖ –í–´–ë–†–ê–¢–¨ –í–°–ï –°–õ–û–¢–´", callback_data="select_all_slots")])
    keyboard.append([InlineKeyboardButton("üåÖ –£–¢–†–ï–ù–ù–ò–ï –°–õ–û–¢–´ (+10%)", callback_data="header_morning")])
    
    for i in range(4):
        slot = TIME_SLOTS_DATA[i]
        emoji = "‚úÖ" if i in selected_slots else "‚ö™"
        button_text = f"{emoji} {slot['time']} ‚Ä¢ {slot['label']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"time_{i}")])
    
    keyboard.append([InlineKeyboardButton("‚òÄÔ∏è –î–ù–ï–í–ù–´–ï –°–õ–û–¢–´", callback_data="header_day")])
    for i in range(4, 10):
        slot = TIME_SLOTS_DATA[i]
        emoji = "‚úÖ" if i in selected_slots else "‚ö™"
        button_text = f"{emoji} {slot['time']} ‚Ä¢ {slot['label']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"time_{i}")])
    
    keyboard.append([InlineKeyboardButton("üåá –í–ï–ß–ï–†–ù–ò–ï –°–õ–û–¢–´ (+10%)", callback_data="header_evening")])
    for i in range(10, 15):
        slot = TIME_SLOTS_DATA[i]
        emoji = "‚úÖ" if i in selected_slots else "‚ö™"
        button_text = f"{emoji} {slot['time']} ‚Ä¢ {slot['label']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"time_{i}")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_dates")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_branded_sections")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    total_slots = len(selected_slots)
    total_outputs_per_day = total_slots * len(selected_radios)
    total_outputs_period = total_outputs_per_day * campaign_days
    
    stations_text = "üìª –í–´–ë–†–ê–ù–´ –°–¢–ê–ù–¶–ò–ò:\n" + "\n".join([f"‚Ä¢ {radio}" for radio in selected_radios])
    
    text = (
        f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã\n\n"
        f"{stations_text}\n"
        f"üìÖ –ü–ï–†–ò–û–î: {context.user_data.get('start_date')} - {context.user_data.get('end_date')} ({campaign_days} –¥–Ω–µ–π)\n\n"
        f"üïí –í–´–ë–ï–†–ò–¢–ï –í–†–ï–ú–Ø –í–´–•–û–î–ê –†–û–õ–ò–ö–û–í\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞:\n"
        f"‚Ä¢ –í—ã–±—Ä–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: {total_slots}\n"
        f"‚Ä¢ –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –≤—Å–µ—Ö —Ä–∞–¥–∏–æ: {total_outputs_per_day}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {format_number(total_outputs_period)}\n\n"
        f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã\n"
        f"[ –î–ê–õ–ï–ï ]"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return TIME_SLOTS

async def handle_time_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_dates":
        return await campaign_dates(update, context)
    
    elif query.data == "select_all_slots":
        context.user_data['selected_time_slots'] = list(range(15))
        return await time_slots(update, context)
    
    elif query.data.startswith("time_"):
        slot_index = int(query.data.split("_")[1])
        selected_slots = context.user_data.get('selected_time_slots', [])
        
        if slot_index in selected_slots:
            selected_slots.remove(slot_index)
        else:
            selected_slots.append(slot_index)
        
        context.user_data['selected_time_slots'] = selected_slots
        return await time_slots(update, context)
    
    elif query.data == "to_branded_sections":
        if not context.user_data.get('selected_time_slots'):
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç!", show_alert=True)
            return TIME_SLOTS
        return await branded_sections(update, context)
    
    return TIME_SLOTS

async def branded_sections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_branded = context.user_data.get('branded_section')
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ê–í–¢–û–†–£–ë–†–ò–ö–ò" if selected_branded == 'auto' else "‚ö™ –ê–í–¢–û–†–£–ë–†–ò–ö–ò", callback_data="branded_auto")],
        [InlineKeyboardButton("‚úÖ –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨" if selected_branded == 'realty' else "‚ö™ –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨", callback_data="branded_realty")],
        [InlineKeyboardButton("‚úÖ –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï" if selected_branded == 'medical' else "‚ö™ –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï", callback_data="branded_medical")],
        [InlineKeyboardButton("‚úÖ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø" if selected_branded == 'custom' else "‚ö™ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø", callback_data="branded_custom")],
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä", callback_data="show_example")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_time")],
        [InlineKeyboardButton("‚è© –ü–†–û–ü–£–°–¢–ò–¢–¨", callback_data="skip_branded")],
        [InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_campaign_creator")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏\n\n"
        "üéôÔ∏è –í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –†–£–ë–†–ò–ö–ò:\n\n"
        f"{'‚úÖ' if selected_branded == 'auto' else '‚ö™'} –ê–í–¢–û–†–£–ë–†–ò–ö–ò\n"
        "–ì–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤\n"
        "\"30 —Å–µ–∫—É–Ω–¥ –æ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö\"\n"
        "\"30 —Å–µ–∫—É–Ω–¥ –æ–± –ê–≤—Ç–æ–í–ê–ó–µ\"\n"
        "+20% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏\n\n"
        f"{'‚úÖ' if selected_branded == 'realty' else '‚ö™'} –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨\n"
        "–†—É–±—Ä–∏–∫–∏ –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n"
        "\"–°–æ–≤–µ—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\"\n"
        "\"–ü–æ–ª–µ–∑–Ω–æ –∑–Ω–∞—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã\"\n"
        "+15% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏\n\n"
        f"{'‚úÖ' if selected_branded == 'medical' else '‚ö™'} –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –†–£–ë–†–ò–ö–ò\n"
        "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –∫–ª–∏–Ω–∏–∫\n"
        "\"–ó–¥–æ—Ä–æ–≤–æ–µ —Å–µ—Ä–¥–µ\"\n"
        "\"–°–æ–≤–µ—Ç –≤—Ä–∞—á–∞\"\n"
        "+25% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏\n\n"
        f"{'‚úÖ' if selected_branded == 'custom' else '‚ö™'} –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø –†–£–ë–†–ò–ö–ê\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥ –≤–∞—à –±–∏–∑–Ω–µ—Å\n"
        "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å—Ü–µ–Ω–∞—Ä–∏–π\n"
        "+30% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return BRANDED_SECTIONS

async def handle_branded_sections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_time":
        return await time_slots(update, context)
    
    elif query.data == "show_example":
        example_text = (
            "–†—É–±—Ä–∏–∫–∏ ¬´30 —Å–µ–∫—É–Ω–¥ –æ–± –ê–≤—Ç–æ–í–ê–ó–µ¬ª \n"
            "–ì–æ—Ç–æ–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Ç —Ä—É–±—Ä–∏–∫ –¥–ª—è –ê–≤—Ç–æ–í–ê–ó–∞ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫‚Äì–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ). \n\n"
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
            "–í–ê–ó-2106, –∑–Ω–∞–º–µ–Ω–∏—Ç–∞—è ¬´—à–µ—Å—Ç—ë—Ä–∫–∞¬ª, —Å—Ç–∞–ª–∞ –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö –º–∞—Å—Å–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –ê–≤—Ç–æ–í–ê–ó–∞. –ó–∞ 30 –ª–µ—Ç –≤—ã–ø—É—Å–∫–∞ –±—ã–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –±–æ–ª–µ–µ 4 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π ‚Äî —Ä–µ–∫–æ—Ä–¥ –¥–ª—è –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–ø—Ä–æ–º–∞!\n\n"
            "–í—Ç–æ—Ä–Ω–∏–∫ ‚Äî –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
            "LADA Kalina, –ø–æ—è–≤–∏–≤—à–∞—è—Å—è –≤ 2004 –≥–æ–¥—É, —Å—Ç–∞–ª–∞ –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª—å—é –ê–≤—Ç–æ–í–ê–ó–∞, –æ—Å–Ω–∞—â—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π ABS –∏ –ø–æ–¥—É—à–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ò–º–µ–Ω–Ω–æ —Å –Ω–µ—ë –Ω–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π —ç—Ç–∞–ø –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n\n"
            "–°—Ä–µ–¥–∞ ‚Äî –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
            "LADA Priora –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –±—ã–ª–∞ –≤—ã–±–æ—Ä–æ–º –º–æ–ª–æ–¥—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π. –ó–∞ –≤—Ä–µ–º—è –≤—ã–ø—É—Å–∫–∞ —Å 2007 –ø–æ 2018 –≥–æ–¥ —Å –∫–æ–Ω–≤–µ–π–µ—Ä–∞ —Å–æ—à–ª–æ –±–æ–ª–µ–µ 1 –º–∏–ª–ª–∏–æ–Ω–∞ –º–∞—à–∏–Ω, –∞ –º–Ω–æ–≥–∏–µ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö.\n\n"
            "–ß–µ—Ç–≤–µ—Ä–≥ ‚Äî –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
            "–í 2018 –≥–æ–¥—É –ê–≤—Ç–æ–í–ê–ó –Ω–∞—á–∞–ª —ç–∫—Å–ø–æ—Ä—Ç LADA Vesta –∏ LADA Largus –≤ –ï–≤—Ä–æ–ø—É. –≠—Ç–∏ –º–æ–¥–µ–ª–∏ —Ö–æ—Ä–æ—à–æ –∑–∞—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ —Å–µ–±—è –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–Ω–µ.\n\n"
            "–ü—è—Ç–Ω–∏—Ü–∞ ‚Äî –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
            "–ù–∞ –∑–∞–≤–æ–¥–µ –ê–≤—Ç–æ–í–ê–ó–∞ –≤ –¢–æ–ª—å—è—Ç—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ–ª–µ–µ 30 —Ç—ã—Å—è—á —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –≠—Ç–æ –æ–¥–∏–Ω –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –°–∞–º–∞—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏, –∞ —Å–∞–º –∑–∞–≤–æ–¥ –Ω–∞–∑—ã–≤–∞—é—Ç ¬´–≥–æ—Ä–æ–¥–æ–º –≤ –≥–æ—Ä–æ–¥–µ¬ª.\n\n"
            "–°—É–±–±–æ—Ç–∞ ‚Äî –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
            "LADA Niva –Ω–µ —Ä–∞–∑ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∞ –≤ —Ä–∞–ª–ª–∏ ¬´–ü–∞—Ä–∏–∂ ‚Äî –î–∞–∫–∞—Ä¬ª. –í 1980-—Ö —ç—Ç–∞ –º–æ–¥–µ–ª—å —É–¥–∏–≤–ª—è–ª–∞ –º–∏—Ä —Å–≤–æ–µ–π –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å—é, —Å–æ—Ä–µ–≤–Ω—É—è—Å—å —Å –ª—É—á—à–∏–º–∏ –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫–∞–º–∏ –º–∏—Ä–∞.\n\n"
            "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
            "–í 2021 –≥–æ–¥—É LADA —Å—Ç–∞–ª–∞ –º–∞—Ä–∫–æ–π ‚Ññ1 –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ä—ã–Ω–∫–µ: –µ—ë –¥–æ–ª—è —Å–æ—Å—Ç–∞–≤–∏–ª–∞ –±–æ–ª–µ–µ 20% –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ —Å—Ç—Ä–∞–Ω–µ. –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ –º–∏–ª–ª–∏–æ–Ω–æ–≤ –≤–æ–¥–∏—Ç–µ–ª–µ–π."
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_branded")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(example_text, reply_markup=reply_markup)
        return BRANDED_SECTIONS
    
    elif query.data == "back_to_branded":
        return await branded_sections(update, context)
    
    branded_data = {
        'branded_auto': 'auto',
        'branded_realty': 'realty',
        'branded_medical': 'medical',
        'branded_custom': 'custom'
    }
    
    if query.data in branded_data:
        context.user_data['branded_section'] = branded_data[query.data]
        return await branded_sections(update, context)
    
    elif query.data == "skip_branded":
        context.user_data['branded_section'] = None
        return await campaign_creator(update, context)
    
    elif query.data == "to_campaign_creator":
        return await campaign_creator(update, context)
    
    return BRANDED_SECTIONS

async def campaign_creator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    base_price, discount, final_price, total_reach, daily_coverage, spots_per_day = calculate_campaign_price_and_reach(context.user_data)
    context.user_data['base_price'] = base_price
    context.user_data['discount'] = discount
    context.user_data['final_price'] = final_price
    
    provide_own = context.user_data.get('provide_own_audio', False)
    campaign_text = context.user_data.get('campaign_text', '')
    char_count = len(campaign_text) if campaign_text else 0
    
    keyboard = []
    
    if provide_own:
        keyboard.append([InlineKeyboardButton("‚è±Ô∏è –£–∫–∞–∑–∞—Ç—å —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂", callback_data="enter_duration")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫" if provide_own else "‚ö™ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫", callback_data="provide_own_audio")])
    else:
        keyboard.append([InlineKeyboardButton("üìù –í–í–ï–°–¢–ò –¢–ï–ö–°–¢ –†–û–õ–ò–ö–ê", callback_data="enter_text")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫" if provide_own else "‚ö™ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫", callback_data="provide_own_audio")])
    
    keyboard.append([InlineKeyboardButton("‚è© –ü–†–û–ü–£–°–¢–ò–¢–¨", callback_data="skip_text")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_branded")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_production_option")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞\n\n"
        "üìù –í–ê–® –¢–ï–ö–°–¢ –î–õ–Ø –†–û–õ–ò–ö–ê (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):\n\n"
        f"{campaign_text if campaign_text else '[–í–∞—à —Ç–µ–∫—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å]'}\n\n"
        f"‚óã {char_count} –∑–Ω–∞–∫–æ–≤ –∏–∑ 500\n\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏–∫–∞: {context.user_data.get('duration', 20)} —Å–µ–∫—É–Ω–¥\n"
        f"üìä –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {spots_per_day}\n\n"
        f"üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n"
        f"   –ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ\n"
        f"   –°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ\n"
        f"   –ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ\n\n"
        f"üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ö–≤–∞—Ç –∫–∞–º–ø–∞–Ω–∏–∏:\n"
        f"   ~{format_number(total_reach)} —á–µ–ª–æ–≤–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
        f"{'‚úÖ' if provide_own else '‚ö™'} –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return CAMPAIGN_CREATOR

async def enter_campaign_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_creator")],
        [InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_text")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–¥–∏–æ—Ä–æ–ª–∏–∫–∞ (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "\"–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –¢—é–º–µ–Ω–∏! –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏. –í—ã–≥–æ–¥–Ω—ã–π —Ç—Ä–µ–π–¥-–∏–Ω –∏ –∫—Ä–µ–¥–∏—Ç 0%. "
        "–¢–µ—Å—Ç-–¥—Ä–∞–π–≤ –≤ –¥–µ–Ω—å –æ–±—Ä–∞—â–µ–Ω–∏—è!\"\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        reply_markup=reply_markup
    )
    
    return "WAITING_TEXT"

async def process_campaign_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        if len(text) > 500:
            await update.message.reply_text(
                "‚ùå –¢–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç 500 –∑–Ω–∞–∫–æ–≤. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_text")]
                ])
            )
            return "WAITING_TEXT"
        
        context.user_data['campaign_text'] = text
        context.user_data['provide_own_audio'] = False
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        return await campaign_creator_from_message(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_campaign_text: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start")
        return ConversationHandler.END

async def campaign_creator_from_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä—Å–∏—è campaign_creator –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ message handler"""
    base_price, discount, final_price, total_reach, daily_coverage, spots_per_day = calculate_campaign_price_and_reach(context.user_data)
    context.user_data['base_price'] = base_price
    context.user_data['discount'] = discount
    context.user_data['final_price'] = final_price
    
    provide_own = context.user_data.get('provide_own_audio', False)
    campaign_text = context.user_data.get('campaign_text', '')
    char_count = len(campaign_text) if campaign_text else 0
    
    keyboard = []
    
    if provide_own:
        keyboard.append([InlineKeyboardButton("‚è±Ô∏è –£–∫–∞–∑–∞—Ç—å —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂", callback_data="enter_duration")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫" if provide_own else "‚ö™ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫", callback_data="provide_own_audio")])
    else:
        keyboard.append([InlineKeyboardButton("üìù –í–í–ï–°–¢–ò –¢–ï–ö–°–¢ –†–û–õ–ò–ö–ê", callback_data="enter_text")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫" if provide_own else "‚ö™ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫", callback_data="provide_own_audio")])
    
    keyboard.append([InlineKeyboardButton("‚è© –ü–†–û–ü–£–°–¢–ò–¢–¨", callback_data="skip_text")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_branded")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_production_option")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞\n\n"
        "üìù –í–ê–® –¢–ï–ö–°–¢ –î–õ–Ø –†–û–õ–ò–ö–ê (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):\n\n"
        f"{campaign_text if campaign_text else '[–í–∞—à —Ç–µ–∫—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å]'}\n\n"
        f"‚óã {char_count} –∑–Ω–∞–∫–æ–≤ –∏–∑ 500\n\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏–∫–∞: {context.user_data.get('duration', 20)} —Å–µ–∫—É–Ω–¥\n"
        f"üìä –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {spots_per_day}\n\n"
        f"üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n"
        f"   –ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ\n"
        f"   –°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ\n"
        f"   –ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ\n\n"
        f"üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ö–≤–∞—Ç –∫–∞–º–ø–∞–Ω–∏–∏:\n"
        f"   ~{format_number(total_reach)} —á–µ–ª–æ–≤–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
        f"{'‚úÖ' if provide_own else '‚ö™'} –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫"
    )
    
    await update.message.reply_text(text, reply_markup=reply_markup)
    return CAMPAIGN_CREATOR

async def enter_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_creator")],
        [InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_duration")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (10-30):\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n"
        "‚Ä¢ 15 —Å–µ–∫—É–Ω–¥ - –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ 20 —Å–µ–∫—É–Ω–¥ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–æ–ª–∏–∫\n"
        "‚Ä¢ 30 —Å–µ–∫—É–Ω–¥ - –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 30:",
        reply_markup=reply_markup
    )
    
    return "WAITING_DURATION"

async def process_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        duration_text = update.message.text.strip()
        duration = int(duration_text)
        
        if duration < 10 or duration > 30:
            await update.message.reply_text(
                "‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 30 —Å–µ–∫—É–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_duration")]
                ])
            )
            return "WAITING_DURATION"
        
        context.user_data['duration'] = duration
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂–æ–º
        return await campaign_creator_from_message(update, context)
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 30:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_duration")]
            ])
        )
        return "WAITING_DURATION"

async def production_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query if hasattr(update, 'callback_query') else None
    
    if query:
        await query.answer()
    
    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª "–ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫", –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Ä–æ–ª–∏–∫
    if context.user_data.get('provide_own_audio'):
        context.user_data['production_option'] = 'ready'
        context.user_data['production_cost'] = 0
    
    selected_production = context.user_data.get('production_option')
    campaign_text = context.user_data.get('campaign_text', '')
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂–∞ –ø–æ —Ç–µ–∫—Å—Ç—É, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if not context.user_data.get('duration'):
        char_count = len(campaign_text)
        if char_count <= 75:
            estimated_duration = 15
        elif char_count <= 100:
            estimated_duration = 20
        else:
            estimated_duration = 30
        context.user_data['duration'] = estimated_duration
    
    keyboard = []
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "—Å–≤–æ–π —Ä–æ–ª–∏–∫", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    if context.user_data.get('provide_own_audio'):
        keyboard.append([
            InlineKeyboardButton(
                f"‚úÖ {PRODUCTION_OPTIONS['ready']['name']}", 
                callback_data="production_ready"
            )
        ])
    else:
        for key, option in PRODUCTION_OPTIONS.items():
            is_selected = "‚úÖ" if selected_production == key else "‚ö™"
            keyboard.append([
                InlineKeyboardButton(
                    f"{is_selected} {option['name']} - –æ—Ç {format_number(option['price'])}‚ÇΩ", 
                    callback_data=f"production_{key}"
                )
            ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_creator")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_contact_info")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ä–æ–ª–∏–∫–∞\n\n"
        f"üìù –í–ê–® –¢–ï–ö–°–¢:\n\"{campaign_text[:100]}{'...' if len(campaign_text) > 100 else ''}\"\n\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {context.user_data.get('duration', 20)} —Å–µ–∫—É–Ω–¥\n\n"
        "üéôÔ∏è –í–´–ë–ï–†–ò–¢–ï –í–ê–†–ò–ê–ù–¢ –†–û–õ–ò–ö–ê:\n\n"
    )
    
    if context.user_data.get('provide_own_audio'):
        text += "‚úÖ –ì–û–¢–û–í–´–ô –†–û–õ–ò–ö\n‚Ä¢ –í—ã –ø—Ä–∏—à–ª–µ—Ç–µ —Å–≤–æ–π —Ä–æ–ª–∏–∫ —Ñ–∞–π–ª–æ–º\n"
    else:
        text += (
            "‚ö™ –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –†–û–õ–ò–ö - –æ—Ç 2,000‚ÇΩ\n"
            "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞\n‚Ä¢ –ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ\n‚Ä¢ 2 –ø—Ä–∞–≤–∫–∏\n‚Ä¢ –°—Ä–æ–∫: 2-3 –¥–Ω—è\n\n"
            "‚ö™ –ü–†–ï–ú–ò–£–ú –†–û–õ–ò–ö - –æ—Ç 4,000‚ÇΩ\n"
            "‚Ä¢ –û–∑–≤—É—á–∫–∞ 2-–º—è –≥–æ–ª–æ—Å–∞–º–∏\n‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –º—É–∑—ã–∫–∞\n‚Ä¢ 5 –ø—Ä–∞–≤–æ–∫\n‚Ä¢ –°—Ä–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 1 –¥–µ–Ω—å\n\n"
            "‚ö™ –ì–û–¢–û–í–´–ô –†–û–õ–ò–ö\n"
            "‚Ä¢ –£ –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π —Ä–æ–ª–∏–∫\n"
        )
    
    text += "\nüí∞ –í–ª–∏—è–Ω–∏–µ –Ω–∞ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å"
    
    if query:
        await query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    return PRODUCTION_OPTION

async def handle_production_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_creator":
        return await campaign_creator(update, context)
    
    elif query.data.startswith("production_"):
        production_key = query.data.replace("production_", "")
        if production_key in PRODUCTION_OPTIONS:
            context.user_data['production_option'] = production_key
            context.user_data['production_cost'] = PRODUCTION_OPTIONS[production_key]['price']
            return await production_option(update, context)
    
    elif query.data == "to_contact_info":
        if not context.user_data.get('production_option'):
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ä–æ–ª–∏–∫–∞!", show_alert=True)
            return PRODUCTION_OPTION
        return await contact_info(update, context)
    
    return PRODUCTION_OPTION

async def contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    base_price, discount, final_price, total_reach, daily_coverage, spots_per_day = calculate_campaign_price_and_reach(context.user_data)
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_production")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –∏–º–µ–Ω–∏
    context.user_data['current_contact_field'] = 'name'
    
    text = (
        f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏:\n"
        f"   –ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ\n"
        f"   –°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ\n"
        f"   –ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ\n\n"
        f"üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ö–≤–∞—Ç: ~{format_number(total_reach)} —á–µ–ª–æ–≤–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üìù –í–í–ï–î–ò–¢–ï –í–ê–®–ï –ò–ú–Ø\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"(–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º)"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return CONTACT_INFO

async def process_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        current_field = context.user_data.get('current_contact_field', 'name')
        
        if current_field == 'name':
            context.user_data['contact_name'] = text
            context.user_data['current_contact_field'] = 'phone'
            await update.message.reply_text(
                "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:\n\n"
                "–ü—Ä–∏–º–µ—Ä: +79123456789 –∏–ª–∏ –ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç\n\n"
                "‚ùå –û–¢–ú–ï–ù–ê - /cancel"
            )
            return CONTACT_INFO
            
        elif current_field == 'phone':
            context.user_data['phone'] = text
            context.user_data['current_contact_field'] = 'email'
            await update.message.reply_text("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:\n\n‚ùå –û–¢–ú–ï–ù–ê - /cancel")
            return CONTACT_INFO
            
        elif current_field == 'email':
            context.user_data['email'] = text
            context.user_data['current_contact_field'] = 'company'
            await update.message.reply_text("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:\n\n‚ùå –û–¢–ú–ï–ù–ê - /cancel")
            return CONTACT_INFO
            
        elif current_field == 'company':
            context.user_data['company'] = text
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
            context.user_data.pop('current_contact_field', None)
            return await show_confirmation_from_message(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_contact_info: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start"
        )
        return ConversationHandler.END

async def show_confirmation_from_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä—Å–∏—è show_confirmation –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ message handler"""
    base_price, discount, final_price, total_reach, daily_coverage, spots_per_day = calculate_campaign_price_and_reach(context.user_data)
    
    stations_text = ""
    for radio in context.user_data.get('selected_radios', []):
        listeners = STATION_COVERAGE.get(radio, 0)
        stations_text += f"‚Ä¢ {radio}: {format_number(listeners)}/–¥–µ–Ω—å\n"
    
    slots_text = ""
    for slot_index in context.user_data.get('selected_time_slots', []):
        if 0 <= slot_index < len(TIME_SLOTS_DATA):
            slot = TIME_SLOTS_DATA[slot_index]
            premium = "‚úÖ" if slot['premium'] else "‚ùå"
            slots_text += f"‚Ä¢ {slot['time']} - {slot['label']} (–ü—Ä–µ–º–∏—É–º: {premium})\n"
    
    confirmation_text = f"""
üìã –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò

üë§ –í–ê–®–ò –î–ê–ù–ù–´–ï:
–ò–º—è: {context.user_data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
Email: {context.user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
–ö–æ–º–ø–∞–Ω–∏—è: {context.user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üìä –ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ú–ü–ê–ù–ò–ò:

üìª –†–ê–î–ò–û–°–¢–ê–ù–¶–ò–ò:
{stations_text}
üìÖ –ü–ï–†–ò–û–î: {context.user_data.get('start_date')} - {context.user_data.get('end_date')} ({context.user_data.get('campaign_days')} –¥–Ω–µ–π)
üïí –í–´–ë–†–ê–ù–û –°–õ–û–¢–û–í: {len(context.user_data.get('selected_time_slots', []))}
{slots_text}
üéôÔ∏è –†–£–ë–†–ò–ö–ê: {get_branded_section_name(context.user_data.get('branded_section'))}
‚è±Ô∏è –†–û–õ–ò–ö: {PRODUCTION_OPTIONS.get(context.user_data.get('production_option', 'ready'), {}).get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')}
üìè –•–†–û–ù–û–ú–ï–¢–†–ê–ñ: {context.user_data.get('duration', 20)} —Å–µ–∫

üéØ –†–ê–°–ß–ï–¢–ù–´–ô –û–•–í–ê–¢ (–ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–ø–æ—Ç–∞–º):
‚Ä¢ –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {spots_per_day}
‚Ä¢ –í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤: {spots_per_day * context.user_data.get('campaign_days', 30)}
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: ~{format_number(daily_coverage)} —á–µ–ª.
‚Ä¢ –ó–∞ –ø–µ—Ä–∏–æ–¥: ~{format_number(total_reach)} —á–µ–ª.

üí∞ –°–¢–û–ò–ú–û–°–¢–¨:
–ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ
–°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ
–ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ
"""
    
    keyboard = [
        [InlineKeyboardButton("üì§ –û–¢–ü–†–ê–í–ò–¢–¨ –ó–ê–Ø–í–ö–£", callback_data="submit_campaign")],
        [InlineKeyboardButton("‚óÄÔ∏è –í–ï–†–ù–£–¢–¨–°–Ø –ö –í–´–ë–û–†–£ –†–ê–î–ò–û", callback_data="back_to_radio")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(confirmation_text, reply_markup=reply_markup)
    return CONFIRMATION

async def show_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    base_price, discount, final_price, total_reach, daily_coverage, spots_per_day = calculate_campaign_price_and_reach(context.user_data)
    
    stations_text = ""
    for radio in context.user_data.get('selected_radios', []):
        listeners = STATION_COVERAGE.get(radio, 0)
        stations_text += f"‚Ä¢ {radio}: {format_number(listeners)}/–¥–µ–Ω—å\n"
    
    slots_text = ""
    for slot_index in context.user_data.get('selected_time_slots', []):
        if 0 <= slot_index < len(TIME_SLOTS_DATA):
            slot = TIME_SLOTS_DATA[slot_index]
            premium = "‚úÖ" if slot['premium'] else "‚ùå"
            slots_text += f"‚Ä¢ {slot['time']} - {slot['label']} (–ü—Ä–µ–º–∏—É–º: {premium})\n"
    
    confirmation_text = f"""
üìã –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò

üë§ –í–ê–®–ò –î–ê–ù–ù–´–ï:
–ò–º—è: {context.user_data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
Email: {context.user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
–ö–æ–º–ø–∞–Ω–∏—è: {context.user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üìä –ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ú–ü–ê–ù–ò–ò:

üìª –†–ê–î–ò–û–°–¢–ê–ù–¶–ò–ò:
{stations_text}
üìÖ –ü–ï–†–ò–û–î: {context.user_data.get('start_date')} - {context.user_data.get('end_date')} ({context.user_data.get('campaign_days')} –¥–Ω–µ–π)
üïí –í–´–ë–†–ê–ù–û –°–õ–û–¢–û–í: {len(context.user_data.get('selected_time_slots', []))}
{slots_text}
üéôÔ∏è –†–£–ë–†–ò–ö–ê: {get_branded_section_name(context.user_data.get('branded_section'))}
‚è±Ô∏è –†–û–õ–ò–ö: {PRODUCTION_OPTIONS.get(context.user_data.get('production_option', 'ready'), {}).get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')}
üìè –•–†–û–ù–û–ú–ï–¢–†–ê–ñ: {context.user_data.get('duration', 20)} —Å–µ–∫

üéØ –†–ê–°–ß–ï–¢–ù–´–ô –û–•–í–ê–¢ (–ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–ø–æ—Ç–∞–º):
‚Ä¢ –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {spots_per_day}
‚Ä¢ –í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤: {spots_per_day * context.user_data.get('campaign_days', 30)}
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: ~{format_number(daily_coverage)} —á–µ–ª.
‚Ä¢ –ó–∞ –ø–µ—Ä–∏–æ–¥: ~{format_number(total_reach)} —á–µ–ª.

üí∞ –°–¢–û–ò–ú–û–°–¢–¨:
–ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ
–°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ
–ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ
"""
    
    keyboard = [
        [InlineKeyboardButton("üì§ –û–¢–ü–†–ê–í–ò–¢–¨ –ó–ê–Ø–í–ö–£", callback_data="submit_campaign")],
        [InlineKeyboardButton("‚óÄÔ∏è –í–ï–†–ù–£–¢–¨–°–Ø –ö –í–´–ë–û–†–£ –†–ê–î–ò–û", callback_data="back_to_radio")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(confirmation_text, reply_markup=reply_markup)
    return CONFIRMATION

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_radio":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É —Ä–∞–¥–∏–æ
        saved_contacts = {
            'contact_name': context.user_data.get('contact_name'),
            'phone': context.user_data.get('phone'), 
            'email': context.user_data.get('email'),
            'company': context.user_data.get('company')
        }
        # –û—á–∏—â–∞–µ–º user_data –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        context.user_data.clear()
        context.user_data.update(saved_contacts)
        return await radio_selection(update, context)
    
    elif query.data == "submit_campaign":
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫
            if not check_rate_limit(query.from_user.id):
                await query.answer(
                    "‚ùå –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –≤ 5 –∑–∞—è–≤–æ–∫ –≤ –¥–µ–Ω—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @AlexeyKhlistunov",
                    show_alert=True
                )
                return CONFIRMATION
            
            base_price, discount, final_price, total_reach, daily_coverage, spots_per_day = calculate_campaign_price_and_reach(context.user_data)
            
            campaign_number = f"R-{datetime.now().strftime('%H%M%S')}"
            conn = sqlite3.connect('campaigns.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO campaigns 
                (user_id, campaign_number, radio_stations, start_date, end_date, campaign_days,
                 time_slots, branded_section, campaign_text, production_option, contact_name,
                 company, phone, email, duration, base_price, discount, final_price)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                query.from_user.id,
                campaign_number,
                ','.join(context.user_data.get('selected_radios', [])),
                context.user_data.get('start_date'),
                context.user_data.get('end_date'),
                context.user_data.get('campaign_days'),
                ','.join(map(str, context.user_data.get('selected_time_slots', []))),
                context.user_data.get('branded_section', ''),
                context.user_data.get('campaign_text', ''),
                context.user_data.get('production_option', ''),
                context.user_data.get('contact_name', ''),
                context.user_data.get('company', ''),
                context.user_data.get('phone', ''),
                context.user_data.get('email', ''),
                context.user_data.get('duration', 20),
                base_price,
                discount,
                final_price
            ))
            
            conn.commit()
            conn.close()
            
            await send_admin_notification(context, context.user_data, campaign_number)
            
            success_text = f"""
‚úÖ –ó–ê–Ø–í–ö–ê –ü–†–ò–ù–Ø–¢–ê!

–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üòä
–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

üìã ‚Ññ –∑–∞—è–≤–∫–∏: {campaign_number}
üìÖ –°—Ç–∞—Ä—Ç: –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π
üí∞ –°—É–º–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π 50%: {format_number(final_price)}‚ÇΩ
üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ö–≤–∞—Ç: ~{format_number(total_reach)} —á–µ–ª–æ–≤–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥

–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
            
            keyboard = [
                [InlineKeyboardButton("üìä –°–§–û–†–ú–ò–†–û–í–ê–¢–¨ EXCEL –ú–ï–î–ò–ê–ü–õ–ê–ù", callback_data="generate_excel")],
                [InlineKeyboardButton("üìã –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢", callback_data="personal_cabinet")],
                [InlineKeyboardButton("üöÄ –ù–û–í–´–ô –ó–ê–ö–ê–ó", callback_data="new_order")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(success_text, reply_markup=reply_markup)
            return FINAL_ACTIONS
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start\n"
                "–ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: t.me/AlexeyKhlistunov"
            )
            return ConversationHandler.END
    
    return CONFIRMATION

async def handle_final_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data == "generate_excel":
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞–º–ø–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = query.from_user.id
            conn = sqlite3.connect('campaigns.db')
            cursor = conn.cursor()
            cursor.execute('SELECT campaign_number FROM campaigns WHERE user_id = ? ORDER BY created_at DESC LIMIT 1', (user_id,))
            campaign_data = cursor.fetchone()
            conn.close()
            
            if campaign_data:
                campaign_number = campaign_data[0]
                try:
                    excel_buffer = create_excel_file_from_db(campaign_number)
                    if excel_buffer:
                        await query.message.reply_document(
                            document=excel_buffer,
                            filename=f"mediaplan_{campaign_number}.xlsx",
                            caption=f"üìä –í–∞—à –º–µ–¥–∏–∞–ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}"
                        )
                    else:
                        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ Excel: {e}")
                    await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            else:
                await query.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–º–ø–∞–Ω–∏–∏.")
            return FINAL_ACTIONS
        
        elif query.data == "personal_cabinet":
            return await personal_cabinet(update, context)
        
        elif query.data == "new_order":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
            saved_contacts = {
                'contact_name': context.user_data.get('contact_name'),
                'phone': context.user_data.get('phone'),
                'email': context.user_data.get('email'),
                'company': context.user_data.get('company')
            }
            context.user_data.clear()
            context.user_data.update(saved_contacts)
            await query.message.reply_text("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é!")
            return await radio_selection(update, context)
        
        return FINAL_ACTIONS
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_final_actions: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        return ConversationHandler.END

async def personal_cabinet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    conn = sqlite3.connect('campaigns.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT campaign_number, status, final_price, created_at FROM campaigns WHERE user_id = ? ORDER BY created_at DESC LIMIT 5', (user_id,))
    orders = cursor.fetchall()
    conn.close()
    
    if orders:
        orders_text = "üìã –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ö–ê–ó–´:\n\n"
        for order in orders:
            orders_text += f"üìã {order[0]} | {order[1]} | {format_number(order[2])}‚ÇΩ | {order[3][:10]}\n"
    else:
        orders_text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="back_to_final")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìã –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢\n\n"
        f"{orders_text}\n\n"
        f"–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤",
        reply_markup=reply_markup
    )
    return FINAL_ACTIONS

async def statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫–∞ –∏ –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –æ—Ö–≤–∞—Ç —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π ‚Äî –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–Ω–∏–∂–µ–Ω–∏—è –¥–ª—è –º–æ–ª–æ–¥—ë–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ —Ä–æ—Å—Ç–∞ –¥–ª—è ¬´–≤–∑—Ä–æ—Å–ª—ã—Ö¬ª. \n\n"
        "1. –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã)\n"
        "‚Ä¢ –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫: –ø–æ –¥–∞–Ω–Ω—ã–º –¢—é–º–µ–Ω—å—Å—Ç–∞—Ç–∞, –∑–∞–º–µ—Ç–Ω–æ –≤—ã—à–µ –¥–æ–ª—è –∂–∏—Ç–µ–ª–µ–π 65+ –ª–µ—Ç (6‚ÄØ969 —á–µ–ª–æ–≤–µ–∫) –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫–æ–º (4‚ÄØ655 —á–µ–ª–æ–≤–µ–∫).\n"
        "‚Ä¢ –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫: —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö ¬´–º–æ–ª–æ–¥—ã—Ö¬ª –≥–æ—Ä–æ–¥–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞, –Ω–æ –≤—Å—ë –∂–µ —Å—Ç–∞—Ä—à–µ –¢—é–º–µ–Ω–∏ (–≥–¥–µ —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç ‚Äî 38,1 –≥–æ–¥–∞) .\n"
        "‚Ä¢ –û–±—â–∏–π —Ç—Ä–µ–Ω–¥: –≤ –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –¢—é–º–µ–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –≤—ã—à–µ, —á–µ–º –≤ –¢—é–º–µ–Ω–∏, –∑–∞ —Å—á—ë—Ç:\n"
        "o –æ—Ç—Ç–æ–∫–∞ –º–æ–ª–æ–¥—ë–∂–∏ –≤ –æ–±–ª–∞—Å—Ç–Ω–æ–π —Ü–µ–Ω—Ç—Ä;\n"
        "o –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π –¥–æ–ª–∏ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤;\n"
        "o –Ω–∏–∑–∫–æ–π —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏.\n\n"
        "2. –ö–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–¥–∏–æ–æ—Ö–≤–∞—Ç\n"
        "–ö–∞–∂–¥–∞—è —Å—Ç–∞–Ω—Ü–∏—è –∏–º–µ–µ—Ç —è–¥—Ä–æ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É. –í ¬´–ø–æ—Å—Ç–∞—Ä–µ–≤—à–∏—Ö¬ª –≥–æ—Ä–æ–¥–∞—Ö:\n"
        "‚Ä¢ –ø–∞–¥–∞–µ—Ç –æ—Ö–≤–∞—Ç —Å—Ç–∞–Ω—Ü–∏–π —Å –º–æ–ª–æ–¥—ë–∂–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π;\n"
        "‚Ä¢ —Ä–∞—Å—Ç—ë—Ç –æ—Ö–≤–∞—Ç —Å—Ç–∞–Ω—Ü–∏–π, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ 35+.\n\n"
        "–ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º:\n\n"
        "1. Love Radio (—è–¥—Ä–æ: 16‚Äì35 –ª–µ—Ç)\n"
        "o –í –¢—é–º–µ–Ω–∏/–∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö: –≤—ã—Å–æ–∫–∏–π –æ—Ö–≤–∞—Ç –∑–∞ —Å—á—ë—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –º–æ–ª–æ–¥—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.\n"
        "o –í –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫–µ/–ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫–µ: –æ—Ö–≤–∞—Ç —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ 40‚Äì50‚ÄØ% –∏–∑ –∑–∞ –º–µ–Ω—å—à–µ–π –¥–æ–ª–∏ –º–æ–ª–æ–¥—ë–∂–∏.\n"
        "ÔÇß –ë–∞–∑–æ–≤—ã–π –æ—Ö–≤–∞—Ç = 480‚Äì600 —á–µ–ª./–¥–µ–Ω—å.\n\n"
        "2. –Æ–º–æ—Ä FM (—è–¥—Ä–æ: 12‚Äì19 –∏ 25‚Äì45 –ª–µ—Ç)\n"
        "o –ü–æ—Ç–µ—Ä—è –º–æ–ª–æ–¥—ë–∂–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ (12‚Äì19 –ª–µ—Ç) —Å–Ω–∏–∂–∞–µ—Ç –æ—Ö–≤–∞—Ç –Ω–∞ 20‚Äì30‚ÄØ%.\n"
        "o –ë–∞–∑–æ–≤—ã–π –æ—Ö–≤–∞—Ç = 1‚ÄØ120‚Äì1‚ÄØ400 —á–µ–ª./–¥–µ–Ω—å \n\n"
        "3. –ê–≤—Ç–æ—Ä–∞–¥–∏–æ (25‚Äì55 –ª–µ—Ç)\n"
        "o –Ø–¥—Ä–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∏–±–æ–ª–µ–µ –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø–æ–π –≤ –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–∞—ã.\n"
        "o –ë–∞–∑–æ–≤—ã–π –æ—Ö–≤–∞—Ç = 2‚ÄØ900‚Äì3‚ÄØ600 —á–µ–ª./–¥–µ–Ω—å \n\n"
        "4. –†–µ—Ç—Ä–æ FM (35‚Äì65 –ª–µ—Ç)\n"
        "o –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –≤—ã—Å–æ–∫–∞—è –¥–æ–ª—è 45‚Äì65-–ª–µ—Ç–Ω–∏—Ö.\n"
        "o –ë–∞–∑–æ–≤—ã–π –æ—Ö–≤–∞—Ç = 3‚ÄØ200‚Äì4‚ÄØ000 —á–µ–ª./–¥–µ–Ω—å \n\n"
        "5. –†–∞–¥–∏–æ –î–∞—á–∞ (35‚Äì60 –ª–µ—Ç)\n"
        "o –°–∏–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç –∑–∞ —Å—á—ë—Ç —Å–µ–º–µ–π–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤.\n"
        "o –ë–∞–∑–æ–≤—ã–π –æ—Ö–≤–∞—Ç = 2‚ÄØ900‚Äì3‚ÄØ600 —á–µ–ª./–¥–µ–Ω—å\n\n"
        "6. –†–∞–¥–∏–æ –®–∞–Ω—Å–æ–Ω (30‚Äì60+ –ª–µ—Ç)\n"
        "o –í—ã—Å–æ–∫–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–∏ –º—É–∂—á–∏–Ω 45+ –∏ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤.\n"
        "o –ë–∞–∑–æ–≤—ã–π –æ—Ö–≤–∞—Ç = 2‚ÄØ600‚Äì3‚ÄØ200 —á–µ–ª./–¥–µ–Ω—å \n\n"
        "3. –ò—Ç–æ–≥–æ–≤—ã–π —Å–≤–æ–¥ —Å —É—á—ë—Ç–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞\n"
        "–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è	–û—Ö–≤–∞—Ç (—á–µ–ª./–¥–µ–Ω—å)\n"
        "Love Radio	480‚Äì600\n"
        "–Æ–º–æ—Ä FM	1‚ÄØ120‚Äì1‚ÄØ400\n"
        "–ê–≤—Ç–æ—Ä–∞–¥–∏–æ	2‚ÄØ900‚Äì3‚ÄØ600\n"
        "–†–µ—Ç—Ä–æ FM	3‚ÄØ200‚Äì4‚ÄØ000\n"
        "–†–∞–¥–∏–æ –î–∞—á–∞	2‚ÄØ900‚Äì3‚ÄØ600\n"
        "–†–∞–¥–∏–æ –®–∞–Ω—Å–æ–Ω	2‚ÄØ600‚Äì3‚ÄØ200\n\n"
        "4. –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã\n"
        "1. –°–∞–º—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫–∞/–ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫–∞:\n"
        "o –†–µ—Ç—Ä–æ FM, –†–∞–¥–∏–æ –î–∞—á–∞, –†–∞–¥–∏–æ –®–∞–Ω—Å–æ–Ω ‚Äî –∏—Ö –æ—Ö–≤–∞—Ç –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–∞ —Å—á—ë—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.\n"
        "o –ê–≤—Ç–æ—Ä–∞–¥–∏–æ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π –æ—Ö–≤–∞—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏.\n"
        "2. –°–ª–∞–±—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "o Love Radio ‚Äî –Ω–∏–∑–∫–∏–π –æ—Ö–≤–∞—Ç –∏–∑ –∑–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –º–æ–ª–æ–¥—ë–∂–∏.\n"
        "o –Æ–º–æ—Ä FM ‚Äî —Ç–µ—Ä—è–µ—Ç —á–∞—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –Ω–æ –æ—Å—Ç–∞—ë—Ç—Å—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –¥–ª—è 25‚Äì45 –ª–µ—Ç.\n"
        "3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:\n"
        "o –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥ –¥–ª—è –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤: –†–µ—Ç—Ä–æ FM, –†–∞–¥–∏–æ –î–∞—á–∞.\n"
        "o –î–ª—è –º—É–∂—Å–∫–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ 40+: –†–∞–¥–∏–æ –®–∞–Ω—Å–æ–Ω.\n"
        "o –î–ª—è —à–∏—Ä–æ–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏: –ê–≤—Ç–æ—Ä–∞–¥–∏–æ.\n"
        "o –î–ª—è –º–æ–ª–æ–¥—ë–∂–∏ 18‚Äì30 –ª–µ—Ç: Love Radio \n\n"
        "5. –í–∞–∂–Ω—ã–µ –æ–≥–æ–≤–æ—Ä–∫–∏\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω—ã–µ: —Ç–æ—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ç—Ä–µ–±—É—é—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–º–µ—Ä–æ–≤.\n"
        "‚Ä¢ –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: –ª–µ—Ç–æ–º –æ—Ö–≤–∞—Ç –º–æ–∂–µ—Ç —Ä–∞—Å—Ç–∏ –∑–∞ —Å—á—ë—Ç –ø—Ä–∏–µ–∑–∂–∏—Ö –∏ –∞–≤—Ç–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.",
        reply_markup=reply_markup
    )
    return MAIN_MENU

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìç –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫ ‚Ä¢ –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫\n\n"
        "‚ÑπÔ∏è –û –ù–ê–°\n\n"
        "‚úÖ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞ –º–µ—Å—Ç–Ω–æ–º —Ä—ã–Ω–∫–µ: 10 –ª–µ—Ç\n\n"
        "üìª –í–ï–©–ê–ï–ú –ù–ê 6 –†–ê–î–ò–û–°–¢–ê–ù–¶–ò–Ø–•:\n"
        "‚Ä¢ LOVE RADIO\n"
        "‚Ä¢ –ê–í–¢–û–†–ê–î–ò–û\n"
        "‚Ä¢ –†–ê–î–ò–û –î–ê–ß–ê\n"
        "‚Ä¢ –†–ê–î–ò–û –®–ê–ù–°–û–ù\n"
        "‚Ä¢ –†–ï–¢–†–û FM\n"
        "‚Ä¢ –Æ–ú–û–† FM\n\n"
        "–í–µ–¥—É—â–∏–π —Ä–∞–¥–∏–æ–≤–µ—â–∞—Ç–µ–ª—å –≤ —Ä–µ–≥–∏–æ–Ω–µ\n"
        "–û—Ö–≤–∞—Ç—ã–≤–∞–µ–º 52% —Ä–∞–¥–∏–æ—Ä—ã–Ω–∫–∞\n\n"
        "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å\n"
        "–•–ª—ã—Å—Ç—É–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á\n"
        "–û–ì–†–ù–ò–ü 315723200067362\n\n"
        "üìß a.khlistunov@gmail.com\n"
        "üì± Telegram: t.me/AlexeyKhlistunov",
        reply_markup=reply_markup
    )
    return MAIN_MENU

async def handle_admin_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("generate_excel_"):
        campaign_number = query.data.replace("generate_excel_", "")
        try:
            success = await send_excel_file_to_admin(context, campaign_number, query)
            if success:
                await query.answer("‚úÖ Excel –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ Excel: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel")
    
    elif query.data.startswith("call_"):
        phone = query.data.replace("call_", "")
        await query.answer(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    
    elif query.data.startswith("email_"):
        email = query.data.replace("email_", "")
        await query.answer(f"‚úâÔ∏è Email: {email}")
    
    return MAIN_MENU

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "create_campaign":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
        saved_contacts = {
            'contact_name': context.user_data.get('contact_name'),
            'phone': context.user_data.get('phone'),
            'email': context.user_data.get('email'),
            'company': context.user_data.get('company')
        }
        context.user_data.clear()
        context.user_data.update(saved_contacts)
        return await radio_selection(update, context)
    
    elif query.data == "statistics":
        return await statistics(update, context)
    
    elif query.data == "my_orders":
        return await personal_cabinet(update, context)
    
    elif query.data == "about":
        return await about(update, context)
    
    # –û–ë–†–ê–ë–û–¢–ö–ê –ê–î–ú–ò–ù–°–ö–ò–• –ö–ù–û–ü–û–ö
    elif query.data.startswith("generate_excel_") or query.data.startswith("call_") or query.data.startswith("email_"):
        return await handle_admin_buttons(update, context)
    
    # –ù–ê–í–ò–ì–ê–¶–ò–Ø
    elif query.data == "back_to_main":
        return await start(update, context)
    
    elif query.data == "back_to_radio":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É —Ä–∞–¥–∏–æ
        saved_contacts = {
            'contact_name': context.user_data.get('contact_name'),
            'phone': context.user_data.get('phone'),
            'email': context.user_data.get('email'),
            'company': context.user_data.get('company')
        }
        # –û—á–∏—â–∞–µ–º user_data –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        context.user_data.clear()
        context.user_data.update(saved_contacts)
        return await radio_selection(update, context)
    
    elif query.data == "back_to_dates":
        return await campaign_dates(update, context)
    
    elif query.data == "back_to_time":
        return await time_slots(update, context)
    
    elif query.data == "back_to_branded":
        return await branded_sections(update, context)
    
    elif query.data == "back_to_creator":
        return await campaign_creator(update, context)
    
    elif query.data == "back_to_production":
        return await production_option(update, context)
    
    elif query.data == "back_to_final":
        keyboard = [
            [InlineKeyboardButton("üìä –°–§–û–†–ú–ò–†–û–í–ê–¢–¨ EXCEL –ú–ï–î–ò–ê–ü–õ–ê–ù", callback_data="generate_excel")],
            [InlineKeyboardButton("üìã –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢", callback_data="personal_cabinet")],
            [InlineKeyboardButton("üöÄ –ù–û–í–´–ô –ó–ê–ö–ê–ó", callback_data="new_order")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return FINAL_ACTIONS
    
    elif query.data == "skip_text":
        context.user_data['campaign_text'] = ''
        return await production_option(update, context)
    
    elif query.data == "cancel_text":
        return await campaign_creator(update, context)
    
    elif query.data == "cancel_duration":
        return await campaign_creator(update, context)
    
    elif query.data == "cancel_period":
        return await campaign_dates(update, context)
    
    elif query.data == "provide_own_audio":
        current_state = context.user_data.get('provide_own_audio', False)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –æ–ø—Ü–∏–∏
        campaign_text = context.user_data.get('campaign_text', '')
        context.user_data['provide_own_audio'] = not current_state
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        context.user_data['campaign_text'] = campaign_text
        return await campaign_creator(update, context)
    
    elif query.data == "to_production_option":
        return await production_option(update, context)
    
    elif query.data == "enter_duration":
        return await enter_duration(update, context)
    
    elif query.data == "enter_text":
        return await enter_campaign_text(update, context)
    
    elif query.data == "submit_campaign":
        return await handle_confirmation(update, context)
    
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    )
    return ConversationHandler.END

def main():
    if init_db():
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")
    
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(handle_main_menu, pattern='^.*$')
            ],
            RADIO_SELECTION: [
                CallbackQueryHandler(handle_radio_selection, pattern='^.*$')
            ],
            CAMPAIGN_DATES: [
                CallbackQueryHandler(handle_campaign_dates, pattern='^.*$')
            ],
            "WAITING_START_DATE": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_start_date),
                CallbackQueryHandler(handle_main_menu, pattern='^cancel_period$')
            ],
            "WAITING_END_DATE": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_end_date),
                CallbackQueryHandler(handle_main_menu, pattern='^cancel_period$')
            ],
            TIME_SLOTS: [
                CallbackQueryHandler(handle_time_slots, pattern='^.*$')
            ],
            BRANDED_SECTIONS: [
                CallbackQueryHandler(handle_branded_sections, pattern='^.*$')
            ],
            CAMPAIGN_CREATOR: [
                CallbackQueryHandler(handle_main_menu, pattern='^(back_to_|skip_text|cancel_text|to_production_option|provide_own_audio|enter_text|enter_duration)'),
                CallbackQueryHandler(enter_campaign_text, pattern='^enter_text$'),
                CallbackQueryHandler(enter_duration, pattern='^enter_duration$')
            ],
            "WAITING_TEXT": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_campaign_text),
                CallbackQueryHandler(handle_main_menu, pattern='^back_to_creator$'),
                CallbackQueryHandler(handle_main_menu, pattern='^cancel_text$')
            ],
            "WAITING_DURATION": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_duration),
                CallbackQueryHandler(handle_main_menu, pattern='^back_to_creator$'),
                CallbackQueryHandler(handle_main_menu, pattern='^cancel_duration$')
            ],
            PRODUCTION_OPTION: [
                CallbackQueryHandler(handle_production_option, pattern='^.*$')
            ],
                        CONTACT_INFO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_contact_info),
                CallbackQueryHandler(handle_main_menu, pattern='^.*$'),
                CommandHandler('cancel', cancel)
            ],
            CONFIRMATION: [
                CallbackQueryHandler(handle_confirmation, pattern='^.*$')
            ],
            FINAL_ACTIONS: [
                CallbackQueryHandler(handle_final_actions, pattern='^.*$')
            ]
        },
        fallbacks=[CommandHandler('start', start), CommandHandler('cancel', cancel)],
        allow_reentry=True
    )
    
    application.add_handler(conv_handler)
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(
        handle_admin_buttons, 
        pattern='^(generate_excel_|call_|email_)'
    ))
    
    if 'RENDER' in os.environ:
        application.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get('PORT', 8443)),
            url_path=TOKEN,
            webhook_url=f"https://{os.environ.get('RENDER_SERVICE_NAME', 'telegram-radio-bot')}.onrender.com/{TOKEN}"
        )
    else:
        application.run_polling()

if __name__ == '__main__':
    main()

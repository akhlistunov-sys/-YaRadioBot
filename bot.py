import os
import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import io
import re

# –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø EXCEL
import openpyxl
from openpyxl.styles import Font, Border, Side, Alignment, PatternFill
from openpyxl.utils import get_column_letter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–û–ë–ù–û–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω—ã WAITING_DURATION, CONFIRM_TEXT)
MAIN_MENU, RADIO_SELECTION, CAMPAIGN_PERIOD, TIME_SLOTS, BRANDED_SECTIONS, CAMPAIGN_CREATOR, PRODUCTION_OPTION, CONTACT_INFO, FINAL_ACTIONS, WAITING_TEXT, WAITING_DURATION, CONFIRM_TEXT = range(12) 

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8281804030:AAEFEYgqigL3bdH4DL0zl1tW71fwwo_8cyU"

# –í–∞—à Telegram ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_TELEGRAM_ID = 174046571  # –¢–≤–æ–π —á–∏—Å–ª–æ–≤–æ–π ID

# –¶–µ–Ω—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–û–ë–ù–û–í–õ–ï–ù–û)
BASE_PRICE_PER_SECOND = 2
DEFAULT_DURATION = 20 # –ù–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂
MIN_PRODUCTION_COST = 2000
MIN_BUDGET = 7000

# –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –í–ò–ó–£–ê–õ–ê
E_CHECK = "‚úÖ"
E_UNCHECK = "‚ö™"
E_RADIO = "üìª"
E_PERIOD = "üìÖ"
E_TIME = "üïí"
E_COST = "üí∞"
E_REACH = "üéØ"
E_NEXT = "‚û°Ô∏è"
E_BACK = "‚¨ÖÔ∏è"
E_SKIP = "‚è©"
E_TTS = "üéß"
E_XLSX = "üíæ"
E_SEND = "üì§"
E_CANCEL = "‚ùå"
E_MIC = "üéôÔ∏è"
E_TEXT = "‚úçÔ∏è"

TIME_SLOTS_DATA = [
    {"time": "06:00-07:00", "label": "–ü–æ–¥—ä–µ–º, —Å–±–æ—Ä—ã", "premium": True},
    {"time": "07:00-08:00", "label": "–£—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏", "premium": True},
    {"time": "08:00-09:00", "label": "–ü–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ üöÄ", "premium": True},
    {"time": "09:00-10:00", "label": "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã", "premium": True},
    {"time": "10:00-11:00", "label": "–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å", "premium": False},
    {"time": "11:00-12:00", "label": "–ü—Ä–µ–¥–æ–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è", "premium": False},
    {"time": "12:00-13:00", "label": "–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤", "premium": False},
    {"time": "13:00-14:00", "label": "–ü–æ—Å–ª–µ –æ–±–µ–¥–∞", "premium": False},
    {"time": "14:00-15:00", "label": "–í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–Ω—è", "premium": False},
    {"time": "15:00-16:00", "label": "–†–∞–±–æ—á–∏–π —Ñ–∏–Ω–∏—à", "premium": False},
    {"time": "16:00-17:00", "label": "–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", "premium": True},
    {"time": "17:00-18:00", "label": "–í–µ—á–µ—Ä–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏", "premium": True},
    {"time": "18:00-19:00", "label": "–ü–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ üöÄ", "premium": True},
    {"time": "19:00-20:00", "label": "–î–æ–º–∞—à–Ω–∏–π –≤–µ—á–µ—Ä", "premium": True},
    {"time": "20:00-21:00", "label": "–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç–¥—ã—Ö", "premium": True}
]

BRANDED_SECTION_PRICES = {
    'auto': 1.2,
    'realty': 1.15,
    'medical': 1.25,
    'custom': 1.3
}

PRODUCTION_OPTIONS = {
    'standard': {'price': 2000, 'name': '–°–¢–ê–ù–î–ê–†–¢–ù–´–ô –†–û–õ–ò–ö', 'desc': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞, –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, 2 –ø—Ä–∞–≤–∫–∏, —Å—Ä–æ–∫: 2-3 –¥–Ω—è'},
    'premium': {'price': 4000, 'name': '–ü–†–ï–ú–ò–£–ú –†–û–õ–ò–ö', 'desc': '–û–∑–≤—É—á–∫–∞ 2-–º—è –≥–æ–ª–æ—Å–∞–º–∏, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –º—É–∑—ã–∫–∞, 5 –ø—Ä–∞–≤–æ–∫, —Å—Ä–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 1 –¥–µ–Ω—å'},
    'ready': {'price': 0, 'name': '–ì–û–¢–û–í–´–ô –†–û–õ–ò–ö', 'desc': '–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π —Ä–æ–ª–∏–∫, –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª–æ–º'}
}

PERIOD_OPTIONS = {
    '15_days': {'days': 15, 'name': '15 –î–ù–ï–ô (–º–∏–Ω–∏–º—É–º)'},
    '30_days': {'days': 30, 'name': '30 –î–ù–ï–ô (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º)'},
    '60_days': {'days': 60, 'name': '60 –î–ù–ï–ô'}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def init_db():
    try:
        conn = sqlite3.connect('campaigns.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS campaigns (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                campaign_number TEXT,
                radio_stations TEXT,
                campaign_period TEXT,
                time_slots TEXT,
                branded_section TEXT,
                campaign_text TEXT,
                production_option TEXT,
                contact_name TEXT,
                company TEXT,
                phone TEXT,
                email TEXT,
                base_price INTEGER,
                discount INTEGER,
                final_price INTEGER,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def validate_phone(phone: str) -> bool:
    pattern = r'^(\+7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
    return bool(re.match(pattern, phone))

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def format_number(num):
    return f"{num:,}".replace(',', ' ')

# –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è TTS (–ø–æ—Å–∫–æ–ª—å–∫—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É TTS API)
def mock_generate_tts_audio():
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (–ø—É—Å—Ç–æ–π IO buffer) –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ TTS
    audio_buffer = io.BytesIO(b'\x00\x00\x00\x00\x00\x00\x00\x00')
    audio_buffer.name = "sample_audio.mp3"
    return audio_buffer

# –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –æ—Ö–≤–∞—Ç–∞ (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–û–î)
def calculate_campaign_price_and_reach(user_data):
    try:
        # 1. –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ - –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π 20 —Å–µ–∫
        base_duration = user_data.get('custom_duration', DEFAULT_DURATION)
        spots_per_slot = 5
        
        period_days = user_data.get('campaign_period_days', 30)
        num_stations = len(user_data.get('selected_radios', []))
        num_slots = len(user_data.get('selected_time_slots', []))
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ (base_duration —Å–µ–∫ * 2—Ä/—Å–µ–∫)
        price_per_spot = base_duration * BASE_PRICE_PER_SECOND 
        
        # 2. –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ñ–∏—Ä–∞ (–±–µ–∑ –Ω–∞—Ü–µ–Ω–æ–∫)
        base_air_cost = price_per_spot * spots_per_slot * num_slots * period_days * num_stations
        
        # 3. –ù–∞–¥–±–∞–≤–∫–∏ –∑–∞ –ø—Ä–µ–º–∏—É–º-–≤—Ä–µ–º—è (–ü–†–ò–ú–ï–ù–Ø–ï–¢–°–Ø –ö BASE_AIR_COST)
        time_premium_multiplier = 1.0
        selected_time_slots = user_data.get('selected_time_slots', [])
        
        premium_slots_count = 0
        total_available_slots = len(TIME_SLOTS_DATA)
        
        for slot_index in selected_time_slots:
            if 0 <= slot_index < total_available_slots and TIME_SLOTS_DATA[slot_index]['premium']:
                premium_slots_count += 1
        
        if num_slots > 0:
            # –ù–∞—Ü–µ–Ω–∫–∞ 20% –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ —Ç–æ–π —á–∞—Å—Ç–∏ –≤—ã—Ö–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ø–∞–ª–∞ –≤ –ø—Ä–∞–π–º-—Ç–∞–π–º
            premium_ratio = premium_slots_count / num_slots
            time_premium_multiplier = 1.0 + (premium_ratio * 0.2)

        # 4. –ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ —Ä—É–±—Ä–∏–∫—É (–ü–†–ò–ú–ï–ù–Ø–ï–¢–°–Ø –ö BASE_AIR_COST)
        branded_multiplier = 1.0
        branded_section = user_data.get('branded_section')
        if branded_section in BRANDED_SECTION_PRICES:
            branded_multiplier = BRANDED_SECTION_PRICES[branded_section]
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ñ–∏—Ä–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –Ω–∞—Ü–µ–Ω–æ–∫ (Air Cost Final)
        air_cost_final = int(base_air_cost * time_premium_multiplier * branded_multiplier)
        
        # 5. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É 50% –¢–û–õ–¨–ö–û –∫ –°—Ç–æ–∏–º–æ—Å—Ç–∏ –≠–§–ò–†–ê
        discount = int(air_cost_final * 0.5)
        discounted_air_cost = air_cost_final - discount
        
        # 6. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        production_cost = user_data.get('production_cost', 0)
        
        # 7. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        final_price = discounted_air_cost + production_cost
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç
        final_price = max(final_price, MIN_BUDGET)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã—Ö–æ–¥–∞—Ö –∏ —Ü–µ–Ω–∞—Ö
        base_price_before_discount = air_cost_final + production_cost

        # –†–∞—Å—á–µ—Ç –æ—Ö–≤–∞—Ç–∞
        daily_listeners = sum({
            'LOVE RADIO': 1600,
            '–ê–í–¢–û–†–ê–î–ò–û': 1400,
            '–†–ê–î–ò–û –î–ê–ß–ê': 1800,
            '–†–ê–î–ò–û –®–ê–ù–°–û–ù': 1200,
            '–†–ï–¢–†–û FM': 1500,
            '–Æ–ú–û–† FM': 1100
        }.get(radio, 0) for radio in user_data.get('selected_radios', []))
        
        period_reach_factor = 0.7 
        unique_daily_reach = int(daily_listeners * period_reach_factor)
        total_reach = unique_daily_reach * period_days

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ (–û–ë–ù–û–í–õ–ï–ù–û)
        user_data['base_duration'] = base_duration
        user_data['spots_per_slot'] = spots_per_slot 
        user_data['total_outputs_day'] = num_slots * spots_per_slot * num_stations
        user_data['total_outputs_period'] = user_data['total_outputs_day'] * period_days
        user_data['air_cost_base'] = base_air_cost 
        user_data['air_cost_final'] = air_cost_final 
        user_data['discounted_air_cost'] = discounted_air_cost 
        user_data['unique_daily_reach'] = unique_daily_reach 
        user_data['daily_listeners'] = daily_listeners 

        return base_price_before_discount, discount, final_price, total_reach, daily_listeners
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        return 0, 0, 0, 0, 0

def get_branded_section_name(section):
    names = {
        'auto': '–ê–≤—Ç–æ—Ä—É–±—Ä–∏–∫–∏ (+20%)',
        'realty': '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (+15%)',
        'medical': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä—É–±—Ä–∏–∫–∏ (+25%)',
        'custom': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä—É–±—Ä–∏–∫–∞ (+30%)'
    }
    return names.get(section, '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')

# –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ (–û–ë–ù–û–í–õ–ï–ù–û: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ö–≤–∞—Ç–∞, –Ω–æ–≤–∞—è —Ü–µ–Ω–∞, —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂)
def create_excel_file(user_data, campaign_number):
    try:
        base_price, discount, final_price, total_reach, daily_listeners = calculate_campaign_price_and_reach(user_data)
        
        buffer = io.BytesIO()
        wb = openpyxl.Workbook()
        
        # --- –õ–ò–°–¢ 1: –°–í–û–î–ö–ê –ò –§–ò–ù–ê–ù–°–´ ---
        ws_summary = wb.active
        ws_summary.title = "–°–≤–æ–¥–∫–∞"
        
        # –°—Ç–∏–ª–∏
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="800000", end_color="800000", fill_type="solid") # Dark Red
        bold_font = Font(bold=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws_summary['A1'] = f"–ú–ï–î–ò–ê–ü–õ–ê–ù –ö–ê–ú–ü–ê–ù–ò–ò #{campaign_number}"
        ws_summary['A1'].font = Font(bold=True, size=16, color="800000")
        ws_summary.merge_cells('A1:B1')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–ø–∞–Ω–∏–∏
        row_num = 3
        ws_summary.cell(row=row_num, column=1, value="–ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ú–ü–ê–ù–ò–ò").font = bold_font
        row_num += 1
        
        ws_summary.cell(row=row_num, column=1, value="–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏:").font = bold_font
        ws_summary.cell(row=row_num, column=2, value=', '.join(user_data.get('selected_radios', [])))
        row_num += 1
        ws_summary.cell(row=row_num, column=1, value="–ü–µ—Ä–∏–æ–¥ (–¥–Ω–µ–π):").font = bold_font
        ws_summary.cell(row=row_num, column=2, value=user_data.get('campaign_period_days', 30))
        row_num += 1
        ws_summary.cell(row=row_num, column=1, value="–•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ —Ä–æ–ª–∏–∫–∞ (—Å–µ–∫):").font = bold_font
        ws_summary.cell(row=row_num, column=2, value=user_data.get('base_duration', DEFAULT_DURATION))
        row_num += 1
        ws_summary.cell(row=row_num, column=1, value="–í—ã—Ö–æ–¥–æ–≤/–¥–µ–Ω—å –Ω–∞ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏—è—Ö:").font = bold_font
        ws_summary.cell(row=row_num, column=2, value=user_data.get('total_outputs_day', 0))
        row_num += 1
        ws_summary.cell(row=row_num, column=1, value="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥:").font = bold_font
        ws_summary.cell(row=row_num, column=2, value=user_data.get('total_outputs_period', 0))
        row_num += 1
        
        # –§–∏–Ω–∞–Ω—Å—ã
        row_num += 2
        ws_summary.cell(row=row_num, column=1, value="–§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø").font = bold_font
        row_num += 1
        
        ws_summary.cell(row=row_num, column=1, value="–ü–æ–∑–∏—Ü–∏—è").fill = header_fill
        ws_summary.cell(row=row_num, column=1, value="–ü–æ–∑–∏—Ü–∏—è").font = header_font
        ws_summary.cell(row=row_num, column=2, value="–°—É–º–º–∞ (‚ÇΩ)").fill = header_fill
        ws_summary.cell(row=row_num, column=2, value="–°—É–º–º–∞ (‚ÇΩ)").font = header_font
        row_num += 1
        
        ws_summary.cell(row=row_num, column=1, value="–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ñ–∏—Ä–∞ (–¥–æ –Ω–∞—Ü–µ–Ω–æ–∫ –∏ —Å–∫–∏–¥–æ–∫)")
        ws_summary.cell(row=row_num, column=2, value=user_data.get('air_cost_base', 0)).number_format = '#,##0 ‚ÇΩ'
        row_num += 1
        ws_summary.cell(row=row_num, column=1, value="–°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ñ–∏—Ä–∞ —Å –Ω–∞—Ü–µ–Ω–∫–∞–º–∏ (–ø—Ä–∞–π–º/—Ä—É–±—Ä–∏–∫–∞)")
        ws_summary.cell(row=row_num, column=2, value=user_data.get('air_cost_final', 0)).number_format = '#,##0 ‚ÇΩ'
        row_num += 1
        ws_summary.cell(row=row_num, column=1, value="–°–∫–∏–¥–∫–∞ 50% (–æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —ç—Ñ–∏—Ä–∞)").font = bold_font
        ws_summary.cell(row=row_num, column=2, value=-discount).number_format = '#,##0 ‚ÇΩ'
        row_num += 1
        ws_summary.cell(row=row_num, column=1, value="–ò—Ç–æ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ñ–∏—Ä–∞ (—Å–æ —Å–∫–∏–¥–∫–æ–π)")
        ws_summary.cell(row=row_num, column=2, value=user_data.get('discounted_air_cost', 0)).number_format = '#,##0 ‚ÇΩ'
        row_num += 1
        ws_summary.cell(row=row_num, column=1, value="–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ä–æ–ª–∏–∫–∞")
        ws_summary.cell(row=row_num, column=2, value=user_data.get('production_cost', 0)).number_format = '#,##0 ‚ÇΩ'
        row_num += 1
        ws_summary.cell(row=row_num, column=1, value="–ò–¢–û–ì–û –ö –û–ü–õ–ê–¢–ï").font = Font(bold=True, size=11, color="800000")
        ws_summary.cell(row=row_num, column=2, value=final_price).number_format = '#,##0 ‚ÇΩ'
        row_num += 1
        
        # –û—Ö–≤–∞—Ç (–û–ë–ù–û–í–õ–ï–ù–û)
        row_num += 2
        ws_summary.cell(row=row_num, column=1, value="–û–•–í–ê–¢ –ö–ê–ú–ü–ê–ù–ò–ò").font = bold_font
        row_num += 1
        
        ws_summary.cell(row=row_num, column=1, value="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ö–≤–∞—Ç –≤ –¥–µ–Ω—å (–°—É–º–º–∞—Ä–Ω–æ)").font = bold_font
        ws_summary.cell(row=row_num, column=2, value=daily_listeners).number_format = '#,##0 —á–µ–ª–æ–≤–µ–∫'
        row_num += 1
        ws_summary.cell(row=row_num, column=1, value="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç –≤ –¥–µ–Ω—å (–†–∞—Å—á–µ—Ç–Ω–æ)").font = bold_font
        ws_summary.cell(row=row_num, column=2, value=user_data.get('unique_daily_reach', 0)).number_format = '#,##0 —á–µ–ª–æ–≤–µ–∫'
        row_num += 1
        ws_summary.cell(row=row_num, column=1, value="–û—Ö–≤–∞—Ç –≤—Å–µ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥").font = bold_font
        ws_summary.cell(row=row_num, column=2, value=total_reach).number_format = '#,##0 —á–µ–ª–æ–≤–µ–∫'
        row_num += 1
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –¥–ª—è –ª–∏—Å—Ç–∞ "–°–≤–æ–¥–∫–∞"
        for col in ws_summary.columns:
            max_length = 0
            column = col[0].column
            for cell in col:
                try:
                    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è —á–∏—Å–µ–ª, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –≤–∞–ª—é—Ç—É
                    val = str(cell.value)
                    if cell.number_format:
                        val = format_number(cell.value) if isinstance(cell.value, (int, float)) else str(cell.value)
                        
                    if len(val) > max_length:
                        max_length = len(val)
                except:
                    pass
            adjusted_width = (max_length + 2)
            ws_summary.column_dimensions[get_column_letter(column)].width = adjusted_width
            
        # --- –õ–ò–°–¢ 2: –î–ï–¢–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï ---
        ws_schedule = wb.create_sheet(title="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        period_days = user_data.get('campaign_period_days', 30)
        selected_radios = user_data.get('selected_radios', [])
        selected_slots_indices = user_data.get('selected_time_slots', [])
        spots_per_slot = user_data.get('spots_per_slot', 5)
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑—å–º–µ–º —Å–µ–≥–æ–¥–Ω—è
        start_date = datetime.now().date()
        
        # 1. –ó–∞–≥–æ–ª–æ–≤–∫–∏ (–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏)
        radio_row = 1
        col_offset = 2
        
        # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –≤—Ä–µ–º—è
        ws_schedule.cell(row=radio_row, column=1, value="–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ —Ä–æ–ª–∏–∫–∞")
        ws_schedule.column_dimensions['A'].width = 20
        
        for radio in selected_radios:
            ws_schedule.cell(row=radio_row, column=col_offset, value=radio).font = bold_font
            ws_schedule.merge_cells(start_row=radio_row, start_column=col_offset, end_row=radio_row, end_column=col_offset + period_days - 1)
            ws_schedule.cell(row=radio_row, column=col_offset).alignment = Alignment(horizontal='center')
            col_offset += period_days

        # 2. –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–∞–º–∏
        date_row = 2
        col_offset = 2
        for _ in selected_radios:
            for i in range(period_days):
                date = start_date + timedelta(days=i)
                ws_schedule.cell(row=date_row, column=col_offset + i, value=date).number_format = 'DD-MM'
                ws_schedule.cell(row=date_row, column=col_offset + i).alignment = Alignment(text_rotation=90)
                ws_schedule.column_dimensions[get_column_letter(col_offset + i)].width = 3
            col_offset += period_days

        # 3. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –∏ —Å–ª–æ—Ç—ã)
        start_data_row = 3
        
        for slot_index in selected_slots_indices:
            slot = TIME_SLOTS_DATA[slot_index]
            ws_schedule.cell(row=start_data_row, column=1, value=slot['time'])
            
            col_offset = 2 # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
            for _ in selected_radios:
                for i in range(period_days):
                    # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º 5 –≤—ã—Ö–æ–¥–æ–≤ (spots_per_slot) –≤ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–µ
                    ws_schedule.cell(row=start_data_row, column=col_offset + i, value=spots_per_slot)
                    ws_schedule.cell(row=start_data_row, column=col_offset + i).alignment = Alignment(horizontal='center')
                col_offset += period_days

            start_data_row += 1

        # 4. –ò—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        
        # –°—Ç—Ä–æ–∫–∞ "–í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤"
        total_outputs_row = start_data_row 
        ws_schedule.cell(row=total_outputs_row, column=1, value="–í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤").font = bold_font
        
        col_offset = 2
        for _ in selected_radios:
            # –°—É–º–º–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥—ã –ø–æ —Å–ª–æ—Ç–∞–º –∏ –¥–Ω—è–º
            for i in range(period_days):
                # –§–æ—Ä–º—É–ª–∞ SUM(B3:B[start_data_row - 1])
                sum_formula = f"=SUM({get_column_letter(col_offset + i)}{3}:{get_column_letter(col_offset + i)}{start_data_row - 1})"
                ws_schedule.cell(row=total_outputs_row, column=col_offset + i, value=sum_formula)
                ws_schedule.cell(row=total_outputs_row, column=col_offset + i).font = bold_font
            
            col_offset += period_days
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        wb.save(buffer)
        excel_data = buffer.getvalue()
        buffer.close()
        
        logger.info(f"Excel —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}")
        return excel_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel: {e}")
        return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ Excel (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
async def send_excel_file(update: Update, context: ContextTypes.DEFAULT_TYPE, campaign_number: str):
    try:
        excel_data = create_excel_file(context.user_data, campaign_number)
        
        if not excel_data:
            return False
            
        file_io = io.BytesIO(excel_data)
        file_io.name = f"mediaplan_{campaign_number}.xlsx"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        if update.callback_query:
            message_obj = update.callback_query.message
        elif update.message:
            message_obj = update.message
        else:
            return False

        await message_obj.reply_document(
            document=file_io,
            filename=f"mediaplan_{campaign_number}.xlsx",
            caption=f"üíæ –í–∞—à –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–¥–∏–∞–ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number} –≤ Excel"
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel: {e}")
        return False

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É (–û–ë–ù–û–í–õ–ï–ù–û: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ö–≤–∞—Ç–∞, —É–¥–∞–ª–µ–Ω–∏–µ PDF)
async def send_admin_notification(context, user_data, campaign_number):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        base_price, discount, final_price, total_reach, daily_listeners = calculate_campaign_price_and_reach(user_data)
        
        notification_text = f"""
üîî **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê** `{campaign_number}`
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
**üë§ –ö–õ–ò–ï–ù–¢:**
–ò–º—è: {user_data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–¢–µ–ª–µ—Ñ–æ–Ω: `{user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}`
Email: `{user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}`
–ö–æ–º–ø–∞–Ω–∏—è: {user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
Telegram ID: `{context._user_id}`

**üí∞ –°–¢–û–ò–ú–û–°–¢–¨:**
–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ñ–∏—Ä–∞ (—Å –Ω–∞—Ü–µ–Ω–∫–∞–º–∏): {format_number(user_data.get('air_cost_final', 0))}‚ÇΩ
–°–∫–∏–¥–∫–∞ 50% (–æ—Ç —ç—Ñ–∏—Ä–∞): -{format_number(discount)}‚ÇΩ
–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {format_number(user_data.get('production_cost', 0))}‚ÇΩ
**–ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ**

**üéØ –ü–ê–†–ê–ú–ï–¢–†–´:**
‚Ä¢ –†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏: {', '.join(user_data.get('selected_radios', []))}
‚Ä¢ –ü–µ—Ä–∏–æ–¥: {user_data.get('campaign_period_days', 30)} –¥–Ω–µ–π
‚Ä¢ –•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂: {user_data.get('base_duration', DEFAULT_DURATION)} —Å–µ–∫
‚Ä¢ –í—ã—Ö–æ–¥–æ–≤/–¥–µ–Ω—å: {user_data.get('total_outputs_day', 0)}
‚Ä¢ –†—É–±—Ä–∏–∫–∞: {get_branded_section_name(user_data.get('branded_section'))}
‚Ä¢ –†–æ–ª–∏–∫: {PRODUCTION_OPTIONS.get(user_data.get('production_option', 'ready'), {}).get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')}

**üìä –û–•–í–ê–¢:**
‚Ä¢ **–û—Ö–≤–∞—Ç –≤ –¥–µ–Ω—å** (–°—É–º–º–∞—Ä–Ω–æ): ~{format_number(daily_listeners)} —á–µ–ª.
‚Ä¢ **–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç –≤ –¥–µ–Ω—å**: ~{format_number(user_data.get('unique_daily_reach', 0))} —á–µ–ª.
‚Ä¢ **–û—Ö–≤–∞—Ç –≤—Å–µ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥**: ~{format_number(total_reach)} —á–µ–ª.
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π (–¢–æ–ª—å–∫–æ Excel)
        keyboard = [
            [
                InlineKeyboardButton(f"{E_XLSX} EXCEL –û–¢–ß–ï–¢", callback_data=f"generate_excel_admin_{campaign_number}"),
            ],
            [
                InlineKeyboardButton(f"üìû {user_data.get('phone', '–¢–µ–ª–µ—Ñ–æ–Ω')}", callback_data=f"call_{user_data.get('phone', '')}"),
                InlineKeyboardButton(f"‚úâÔ∏è Email", callback_data=f"email_{user_data.get('email', '')}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=ADMIN_TELEGRAM_ID,
            text=notification_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        return False


# --- –í–°–ï –§–£–ù–ö–¶–ò–ò –ö–û–ù–í–ï–†–°–ê–¶–ò–ò ---

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è –æ—Ö–≤–∞—Ç–∞)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(f"üöÄ –°–û–ó–î–ê–¢–¨ –ö–ê–ú–ü–ê–ù–ò–Æ", callback_data="create_campaign")],
        [InlineKeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–•–í–ê–¢–ê", callback_data="statistics")],
        [InlineKeyboardButton("üìã –ú–û–ò –ó–ê–ö–ê–ó–´", callback_data="my_orders")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ù–ê–°", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ö–≤–∞—Ç–∞ –∏ —Ü–µ–Ω—ã
    text = (
        f"üéôÔ∏è **–†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò**\n"
        f"üìç *–Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫ ‚Ä¢ –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫*\n"
        "üìç –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è +35 –∫–º –≤–æ–∫—Ä—É–≥ –≥–æ—Ä–æ–¥–æ–≤\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{E_REACH} –û—Ö–≤–∞—Ç **–≤ –¥–µ–Ω—å** (–°—É–º–º–∞—Ä–Ω–æ): **9,200+**\n"
        f"üë• –û—Ö–≤–∞—Ç **–≤—Å–µ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥** (30 –¥–Ω–µ–π): **68,000+**\n"
        f"üéØ **52%** –¥–æ–ª—è –º–µ—Å—Ç–Ω–æ–≥–æ —Ä–∞–¥–∏–æ—Ä—ã–Ω–∫–∞\n"
        f"{E_COST} **2‚ÇΩ/—Å–µ–∫** –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞"
    )
    
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    return MAIN_MENU

# –®–∞–≥ 1: –í—ã–±–æ—Ä —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è –æ—Ö–≤–∞—Ç–∞)
async def radio_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_radios = context.user_data.get('selected_radios', [])
    total_listeners = sum({
        'LOVE RADIO': 1600,
        '–ê–í–¢–û–†–ê–î–ò–û': 1400,
        '–†–ê–î–ò–û –î–ê–ß–ê': 1800,
        '–†–ê–î–ò–û –®–ê–ù–°–û–ù': 1200,
        '–†–ï–¢–†–û FM': 1500,
        '–Æ–ú–û–† FM': 1100
    }.get(radio, 0) for radio in selected_radios)
    
    keyboard = []
    radio_stations = [
        ("LOVE RADIO", "radio_love", 1600, 'üë© –ú–æ–ª–æ–¥—ë–∂—å 18-35 –ª–µ—Ç'),
        ("–ê–í–¢–û–†–ê–î–ò–û", "radio_auto", 1400, 'üë® –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç—ã 25-50 –ª–µ—Ç'),
        ("–†–ê–î–ò–û –î–ê–ß–ê", "radio_dacha", 1800, 'üë®üë© –°–µ–º—å—è 35-65 –ª–µ—Ç'), 
        ("–†–ê–î–ò–û –®–ê–ù–°–û–ù", "radio_chanson", 1200, 'üë® –ú—É–∂—á–∏–Ω—ã 30-60 –ª–µ—Ç'),
        ("–†–ï–¢–†–û FM", "radio_retro", 1500, 'üë¥üëµ –¶–µ–Ω–∏—Ç–µ–ª–∏ —Ö–∏—Ç–æ–≤ 30-55 –ª–µ—Ç'),
        ("–Æ–ú–û–† FM", "radio_humor", 1100, 'üë¶üëß –°–ª—É—à–∞—Ç–µ–ª–∏ 25-45 –ª–µ—Ç')
    ]
    
    for name, callback, listeners, _ in radio_stations:
        emoji = E_CHECK if name in selected_radios else E_UNCHECK
        button_text = f"{emoji} {name} ({format_number(listeners)} —á/–¥–µ–Ω—å)"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback)])
    
    keyboard.append([InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_main")])
    keyboard.append([InlineKeyboardButton(f"{E_NEXT} –î–ê–õ–ï–ï", callback_data="to_campaign_period")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"**–®–ê–ì 1/7: –í–´–ë–û–† –†–ê–î–ò–û–°–¢–ê–ù–¶–ò–ô {E_RADIO}**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{E_CHECK if 'LOVE RADIO' in selected_radios else E_UNCHECK} **LOVE RADIO** | *1,600* | –ú–æ–ª–æ–¥—ë–∂—å 18-35\n"
        f"{E_CHECK if '–ê–í–¢–û–†–ê–î–ò–û' in selected_radios else E_UNCHECK} **–ê–í–¢–û–†–ê–î–ò–û** | *1,400* | –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç—ã 25-50\n"
        f"{E_CHECK if '–†–ê–î–ò–û –î–ê–ß–ê' in selected_radios else E_UNCHECK} **–†–ê–î–ò–û –î–ê–ß–ê** | *1,800* | –°–µ–º—å—è 35-65\n"
        f"{E_CHECK if '–†–ê–î–ò–û –®–ê–ù–°–û–ù' in selected_radios else E_UNCHECK} **–†–ê–î–ò–û –®–ê–ù–°–û–ù** | *1,200* | –ú—É–∂—á–∏–Ω—ã 30-60\n"
        f"{E_CHECK if '–†–ï–¢–†–û FM' in selected_radios else E_UNCHECK} **–†–ï–¢–†–û FM** | *1,500* | –¶–µ–Ω–∏—Ç–µ–ª–∏ —Ö–∏—Ç–æ–≤ 30-55\n"
        f"{E_CHECK if '–Æ–ú–û–† FM' in selected_radios else E_UNCHECK} **–Æ–ú–û–† FM** | *1,100* | –°–ª—É—à–∞—Ç–µ–ª–∏ 25-45\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"**–í–´–ë–†–ê–ù–û:** {len(selected_radios)} —Å—Ç–∞–Ω—Ü–∏–∏ | {E_REACH} –û—Ö–≤–∞—Ç **–≤ –¥–µ–Ω—å**: {format_number(total_listeners)} —Å–ª—É—à–∞—Ç–µ–ª–µ–π\n"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return RADIO_SELECTION

async def handle_radio_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_main":
        return await start(update, context)
    
    radio_data = {
        'radio_love': 'LOVE RADIO',
        'radio_auto': '–ê–í–¢–û–†–ê–î–ò–û', 
        'radio_dacha': '–†–ê–î–ò–û –î–ê–ß–ê',
        'radio_chanson': '–†–ê–î–ò–û –®–ê–ù–°–û–ù',
        'radio_retro': '–†–ï–¢–†–û FM',
        'radio_humor': '–Æ–ú–û–† FM'
    }
    
    if query.data in radio_data:
        radio_name = radio_data[query.data]
        selected_radios = context.user_data.get('selected_radios', [])
        
        if radio_name in selected_radios:
            selected_radios.remove(radio_name)
        else:
            selected_radios.append(radio_name)
        
        context.user_data['selected_radios'] = selected_radios
        return await radio_selection(update, context)
    
    elif query.data == "to_campaign_period":
        if not context.user_data.get('selected_radios'):
            await query.answer(f"{E_CANCEL} –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é!", show_alert=True)
            return RADIO_SELECTION
        return await campaign_period(update, context)
    
    return RADIO_SELECTION

# –®–∞–≥ 2: –ü–µ—Ä–∏–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã)
async def campaign_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_period = context.user_data.get('campaign_period')
    selected_radios = context.user_data.get('selected_radios', [])
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏—è—Ö
    stations_info = "üìª **–í–´–ë–†–ê–ù–´ –°–¢–ê–ù–¶–ò–ò:**\n"
    station_listeners = {
        'LOVE RADIO': 1600, '–ê–í–¢–û–†–ê–î–ò–û': 1400, '–†–ê–î–ò–û –î–ê–ß–ê': 1800,
        '–†–ê–î–ò–û –®–ê–ù–°–û–ù': 1200, '–†–ï–¢–†–û FM': 1500, '–Æ–ú–û–† FM': 1100
    }
    
    for radio in selected_radios:
        listeners = station_listeners.get(radio, 0)
        stations_info += f"‚Ä¢ *{radio}* ({format_number(listeners)} —á/–¥–µ–Ω—å)\n"
    
    keyboard = []
    # –û–±–Ω–æ–≤–ª–µ–Ω —Ä–∞—Å—á–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ü–µ–Ω—ã (20 —Å–µ–∫ * 2—Ä/—Å–µ–∫)
    base_duration_calc = context.user_data.get('custom_duration', DEFAULT_DURATION)
    price_per_spot_calc = base_duration_calc * BASE_PRICE_PER_SECOND 
    
    for key, option in PERIOD_OPTIONS.items():
        is_selected = E_CHECK if selected_period == key else E_UNCHECK
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ —ç—Ñ–∏—Ä–∞ –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏)
        # 5 –≤—ã—Ö–æ–¥–æ–≤/—Å–ª–æ—Ç * 10 —Å–ª–æ—Ç–æ–≤ (–¥–ª—è –æ—Ü–µ–Ω–∫–∏) * —Ü–µ–Ω–∞_–≤—ã—Ö–æ–¥–∞ * –¥–Ω–µ–π / 2 (—Å–∫–∏–¥–∫–∞)
        base_cost_estimate = 5 * 10 * price_per_spot_calc * option['days'] * len(selected_radios)
        discounted_cost = base_cost_estimate * 0.5
        
        keyboard.append([
            InlineKeyboardButton(
                f"{is_selected} {option['name']} - {format_number(int(discounted_cost))}‚ÇΩ", 
                callback_data=f"period_{key}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_radio")])
    keyboard.append([InlineKeyboardButton(f"{E_NEXT} –î–ê–õ–ï–ï", callback_data="to_time_slots")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"**–®–ê–ì 2/7: –ü–ï–†–ò–û–î –ö–ê–ú–ü–ê–ù–ò–ò {E_PERIOD}**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{stations_info}\n"
        f"üìÖ **–í–´–ë–ï–†–ò–¢–ï –ü–ï–†–ò–û–î –ö–ê–ú–ü–ê–ù–ò–ò**:\n\n"
        f"üéØ –°—Ç–∞—Ä—Ç –∫–∞–º–ø–∞–Ω–∏–∏: –≤ —Ç–µ—á–µ–Ω–∏–µ *3 –¥–Ω–µ–π* –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        f"‚è±Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: **15 –¥–Ω–µ–π**\n\n"
        f"–¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π 50% –∏ –¥–ª—è 20 —Å–µ–∫ —Ä–æ–ª–∏–∫–∞"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return CAMPAIGN_PERIOD

async def handle_campaign_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_radio":
        return await radio_selection(update, context)
    
    elif query.data.startswith("period_"):
        period_key = query.data.replace("period_", "")
        if period_key in PERIOD_OPTIONS:
            context.user_data['campaign_period'] = period_key
            context.user_data['campaign_period_days'] = PERIOD_OPTIONS[period_key]['days']
            return await campaign_period(update, context)
    
    elif query.data == "to_time_slots":
        if not context.user_data.get('campaign_period'):
            await query.answer(f"{E_CANCEL} –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏!", show_alert=True)
            return CAMPAIGN_PERIOD
        return await time_slots(update, context)
    
    return CAMPAIGN_PERIOD

# –®–∞–≥ 3: –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è –æ—Ö–≤–∞—Ç–∞)
async def time_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_slots = context.user_data.get('selected_time_slots', [])
    selected_radios = context.user_data.get('selected_radios', [])
    period_days = context.user_data.get('campaign_period_days', 30)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    keyboard.append([InlineKeyboardButton(f"{E_CHECK} –í–´–ë–†–ê–¢–¨ –í–°–ï –°–õ–û–¢–´", callback_data="select_all_slots")])
    
    # –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ—Ç—ã
    keyboard.append([InlineKeyboardButton("üåÖ –£–¢–†–ï–ù–ù–ò–ï –°–õ–û–¢–´ (–ü–†–ï–ú–ò–£–ú)", callback_data="header_morning")])
    for i in range(4):
        slot = TIME_SLOTS_DATA[i]
        emoji = E_CHECK if i in selected_slots else E_UNCHECK
        button_text = f"{emoji} {slot['time']} ‚Ä¢ {slot['label']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"time_{i}")])
    
    # –î–Ω–µ–≤–Ω—ã–µ —Å–ª–æ—Ç—ã
    keyboard.append([InlineKeyboardButton("‚òÄÔ∏è –î–ù–ï–í–ù–´–ï –°–õ–û–¢–´", callback_data="header_day")])
    for i in range(4, 10):
        slot = TIME_SLOTS_DATA[i]
        emoji = E_CHECK if i in selected_slots else E_UNCHECK
        button_text = f"{emoji} {slot['time']} ‚Ä¢ {slot['label']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"time_{i}")])
    
    # –í–µ—á–µ—Ä–Ω–∏–µ —Å–ª–æ—Ç—ã
    keyboard.append([InlineKeyboardButton("üåá –í–ï–ß–ï–†–ù–ò–ï –°–õ–û–¢–´ (–ü–†–ï–ú–ò–£–ú)", callback_data="header_evening")])
    for i in range(10, 15):
        slot = TIME_SLOTS_DATA[i]
        emoji = E_CHECK if i in selected_slots else E_UNCHECK
        button_text = f"{emoji} {slot['time']} ‚Ä¢ {slot['label']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"time_{i}")])
    
    keyboard.append([InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_period")])
    keyboard.append([InlineKeyboardButton(f"{E_NEXT} –î–ê–õ–ï–ï", callback_data="to_branded_sections")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    total_slots = len(selected_slots)
    total_outputs_per_day = total_slots * 5 * len(selected_radios)
    total_outputs_period = total_outputs_per_day * period_days
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    stations_text = "üìª **–°–¢–ê–ù–¶–ò–ò:** " + ", ".join([f"*{radio}*" for radio in selected_radios])
    
    text = (
        f"**–®–ê–ì 3/7: –í–†–ï–ú–ï–ù–ù–´–ï –°–õ–û–¢–´ {E_TIME}**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{stations_text}\n"
        f"{E_PERIOD} **–ü–ï–†–ò–û–î:** {period_days} –¥–Ω–µ–π\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üïí **–í–´–ë–ï–†–ò–¢–ï –í–†–ï–ú–Ø –í–´–•–û–î–ê –†–û–õ–ò–ö–û–í**\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞:**\n"
        f"‚Ä¢ –í—ã–±—Ä–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: **{total_slots}**\n"
        f"‚Ä¢ –í—ã—Ö–æ–¥–æ–≤ **–≤ –¥–µ–Ω—å** –Ω–∞ –≤—Å–µ—Ö —Ä–∞–¥–∏–æ: **{total_outputs_per_day}**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤ **–∑–∞ –ø–µ—Ä–∏–æ–¥**: **{format_number(total_outputs_period)}**\n\n"
        f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return TIME_SLOTS

async def handle_time_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_period":
        return await campaign_period(update, context)
    
    elif query.data == "select_all_slots":
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ 15 —Å–ª–æ—Ç–æ–≤
        context.user_data['selected_time_slots'] = list(range(15))
        return await time_slots(update, context)
    
    elif query.data.startswith("time_"):
        slot_index = int(query.data.split("_")[1])
        selected_slots = context.user_data.get('selected_time_slots', [])
        
        if slot_index in selected_slots:
            selected_slots.remove(slot_index)
        else:
            selected_slots.append(slot_index)
        
        context.user_data['selected_time_slots'] = selected_slots
        return await time_slots(update, context)
    
    elif query.data == "to_branded_sections":
        if not context.user_data.get('selected_time_slots'):
            await query.answer(f"{E_CANCEL} –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç!", show_alert=True)
            return TIME_SLOTS
        return await branded_sections(update, context)
    
    return TIME_SLOTS

# –®–∞–≥ 4: –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
async def branded_sections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_branded = context.user_data.get('branded_section')
    
    keyboard = [
        [InlineKeyboardButton(f"{E_CHECK} –ê–í–¢–û–†–£–ë–†–ò–ö–ò (+20%)" if selected_branded == 'auto' else f"{E_UNCHECK} –ê–í–¢–û–†–£–ë–†–ò–ö–ò (+20%)", callback_data="branded_auto")],
        [InlineKeyboardButton(f"{E_CHECK} –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨ (+15%)" if selected_branded == 'realty' else f"{E_UNCHECK} –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨ (+15%)", callback_data="branded_realty")],
        [InlineKeyboardButton(f"{E_CHECK} –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –†–£–ë–†–ò–ö–ò (+25%)" if selected_branded == 'medical' else f"{E_UNCHECK} –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –†–£–ë–†–ò–ö–ò (+25%)", callback_data="branded_medical")],
        [InlineKeyboardButton(f"{E_CHECK} –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø –†–£–ë–†–ò–ö–ê (+30%)" if selected_branded == 'custom' else f"{E_UNCHECK} –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø –†–£–ë–†–ò–ö–ê (+30%)", callback_data="branded_custom")],
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä", callback_data="show_example")],
        [InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_time_slots")],
        [InlineKeyboardButton(f"{E_NEXT} –î–ê–õ–ï–ï", callback_data="to_campaign_creator")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"**–®–ê–ì 4/7: –ë–†–ï–ù–î–ò–†–û–í–ê–ù–ù–´–ï –†–£–ë–†–ò–ö–ò üè∑Ô∏è**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "–í—ã–±–æ—Ä —Ä—É–±—Ä–∏–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ—Ö–≤–∞—Ç –∏ —Ç–∞—Ä–≥–µ—Ç–∏—Ä—É–µ—Ç –≤–∞—à—É –∞—É–¥–∏—Ç–æ—Ä–∏—é, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞—Ü–µ–Ω–∫—É –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —ç—Ñ–∏—Ä–∞.\n\n"
        "**üéØ –í–´–ë–ï–†–ò–¢–ï –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–£–Æ –†–£–ë–†–ò–ö–£** (–æ–¥–∏–Ω –≤—ã–±–æ—Ä)"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return BRANDED_SECTIONS

async def handle_branded_sections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_time_slots":
        return await time_slots(update, context)
    
    elif query.data.startswith("branded_"):
        section = query.data.replace("branded_", "")
        context.user_data['branded_section'] = section
        return await branded_sections(update, context)
    
    elif query.data == "to_campaign_creator":
        return await campaign_creator(update, context)
    
    return BRANDED_SECTIONS

# –®–∞–≥ 5: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞ (–û–ë–ù–û–í–õ–ï–ù–û: –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏, –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
async def campaign_creator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (Query –∏–ª–∏ Message)
    if update.callback_query:
        query = update.callback_query
        await query.answer()
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º production_option –∏ custom_duration, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if 'production_option' not in context.user_data:
        context.user_data['production_option'] = 'ready' # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ì–æ—Ç–æ–≤—ã–π —Ä–æ–ª–∏–∫"
    if 'custom_duration' not in context.user_data:
        context.user_data['custom_duration'] = DEFAULT_DURATION
        
    production_option = context.user_data['production_option']
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    keyboard_options = []
    for key, option in PRODUCTION_OPTIONS.items():
        emoji = E_CHECK if production_option == key else E_UNCHECK
        keyboard_options.append([
            InlineKeyboardButton(f"{emoji} {option['name']} ({format_number(option['price'])}‚ÇΩ)", callback_data=f"prod_option_{key}")
        ])
    
    # –ë–ª–æ–∫ –≤–≤–æ–¥–∞/–≤—ã–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂–∞ (–ù–û–í–´–ô –§–õ–û–£)
    keyboard_actions = [
        # –ö–Ω–æ–ø–∫–∞ "–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Ä–æ–ª–∏–∫–∞" - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        [InlineKeyboardButton(f"{E_TEXT} –í–í–ï–°–¢–ò –¢–ï–ö–°–¢ –†–û–õ–ò–ö–ê {E_TEXT}", callback_data="action_input_text")], 
        [
            # –ö–Ω–æ–ø–∫–∞ "–£–∫–∞–∑–∞—Ç—å —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂" - –ù–û–í–û–ï
            InlineKeyboardButton(f"‚è±Ô∏è –£–ö–ê–ó–ê–¢–¨ –•–†–û–ù–û–ú–ï–¢–†–ê–ñ", callback_data="action_input_duration"),
        ],
        [
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_branded"),
            InlineKeyboardButton(f"{E_NEXT} –î–ê–õ–ï–ï", callback_data="to_production_option")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard_options + keyboard_actions)
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    duration = context.user_data.get('custom_duration', DEFAULT_DURATION)
    production_cost = PRODUCTION_OPTIONS[production_option]['price']
    
    text = (
        f"**–®–ê–ì 5/7: –ö–û–ù–°–¢–†–£–ö–¢–û–† –†–û–õ–ò–ö–ê {E_MIC}**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"–¢–µ–∫—É—â–∏–π —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂: **{duration} —Å–µ–∫**\n"
        f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è: **{PRODUCTION_OPTIONS[production_option]['name']}** ({format_number(production_cost)}‚ÇΩ)\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: *{PRODUCTION_OPTIONS[production_option]['desc']}*\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"**1. –í–´–ë–ï–†–ò–¢–ï –í–ê–†–ò–ê–ù–¢ –ü–†–û–ò–ó–í–û–î–°–¢–í–ê:**\n"
        f"**2. –û–ü–†–ï–î–ï–õ–ò–¢–ï –•–†–û–ù–û–ú–ï–¢–†–ê–ñ –ò –¢–ï–ö–°–¢:**"
    )
    
    if update.callback_query:
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
         await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
         
    return CAMPAIGN_CREATOR

async def handle_campaign_creator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "back_to_branded":
        return await branded_sections(update, context)

    elif data.startswith("prod_option_"):
        option = data.replace("prod_option_", "")
        context.user_data['production_option'] = option
        context.user_data['production_cost'] = PRODUCTION_OPTIONS[option]['price']
        return await campaign_creator(update, context)

    elif data == "action_input_text":
        await query.edit_message_text(
            f"{E_TEXT} **–í–í–û–î –¢–ï–ö–°–¢–ê –†–û–õ–ò–ö–ê**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–∑–≤—É—á–∏—Ç—å –≤ —Ä–æ–ª–∏–∫–µ.\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∑–≤—É—á–∞–Ω–∏—è (Mock TTS) –∏ –æ—Ü–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_creator")]
            ]),
            parse_mode='Markdown'
        )
        return WAITING_TEXT

    elif data == "action_input_duration":
        await query.edit_message_text(
            f"‚è±Ô∏è **–£–ö–ê–ó–ê–ù–ò–ï –•–†–û–ù–û–ú–ï–¢–†–ê–ñ–ê**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ —Ä–æ–ª–∏–∫–∞ –≤ **—Å–µ–∫—É–Ω–¥–∞—Ö** (–Ω–∞–ø—Ä–∏–º–µ—Ä: `15`, `25`, `40`).\n"
            "–≠—Ç–æ —á–∏—Å–ª–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —ç—Ñ–∏—Ä–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_creator")]
            ]),
            parse_mode='Markdown'
        )
        return WAITING_DURATION
        
    elif data == "to_production_option":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ä–æ–ª–∏–∫ –≥–æ—Ç–æ–≤—ã–π, —Ç–æ –∏–¥–µ–º –¥–∞–ª—å—à–µ
        if context.user_data.get('production_option') == 'ready' or context.user_data.get('campaign_text'):
            return await contact_info(update, context)
        
        # –ï—Å–ª–∏ —Ä–æ–ª–∏–∫ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
        elif context.user_data.get('production_option') != 'ready' and not context.user_data.get('campaign_text'):
            await query.answer(f"{E_CANCEL} –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ä–æ–ª–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!", show_alert=True)
            return CAMPAIGN_CREATOR

    return CAMPAIGN_CREATOR

# –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï: –û–∂–∏–¥–∞–Ω–∏–µ —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂–∞
async def process_custom_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        duration = int(text.strip())
        if 5 <= duration <= 60:
            context.user_data['custom_duration'] = duration
            await update.message.reply_text(
                f"‚úÖ –•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ **{duration} —Å–µ–∫** —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —ç—Ñ–∏—Ä–∞.",
                parse_mode='Markdown'
            )
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞
            return await campaign_creator(update, context) 
        else:
            await update.message.reply_text("‚è±Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 60 (—Å–µ–∫—É–Ω–¥).")
            return WAITING_DURATION
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º.")
        return WAITING_DURATION

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–æ–ª–∏–∫–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π mock TTS
async def process_campaign_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    campaign_text = update.message.text
    context.user_data['campaign_text'] = campaign_text
    
    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ
    await update.message.reply_text(
        f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n\n---\n*{campaign_text}*\n---",
        parse_mode='Markdown'
    )

    # 2. –ò–º–∏—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é TTS –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    audio_file = mock_generate_tts_audio()
    
    # 3. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Å–ª—É—à–∞—Ç—å (–∏–º–∏—Ç–∞—Ü–∏—è) –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    keyboard = [
        [InlineKeyboardButton(f"{E_TTS} –ü–†–û–°–õ–£–®–ê–¢–¨ –ü–†–ò–ú–ï–† (Mock)", callback_data="action_listen_tts")],
        [InlineKeyboardButton(f"‚úÖ –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –¢–ï–ö–°–¢", callback_data="action_confirm_text")],
        [InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î/–ò–ó–ú–ï–ù–ò–¢–¨", callback_data="back_to_creator")]
    ]
    
    await update.message.reply_document(
        document=InputFile(audio_file, filename='sample.mp3'),
        caption="üéß –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–≤—É—á–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (Mock TTS) –∏ –æ—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CONFIRM_TEXT

# –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ TTS
async def handle_confirm_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "action_listen_tts":
        # –ü–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ mock, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
        await query.answer("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–æ. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–µ–Ω–∞ –≤ 20 —Å–µ–∫.")
        return CONFIRM_TEXT
        
    elif data == "action_confirm_text":
        # –¢–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: 10 —Å–∏–º–≤–æ–ª–æ–≤ = 1 —Å–µ–∫—É–Ω–¥–∞, –º–∏–Ω 10 —Å–µ–∫, –º–∞–∫—Å 60 —Å–µ–∫
        text_len = len(context.user_data.get('campaign_text', ''))
        estimated_duration = max(10, min(60, round(text_len / 10))) 
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é
        if 'custom_duration' not in context.user_data:
             context.user_data['custom_duration'] = estimated_duration
             
        await query.edit_message_text(
            f"‚úÖ –¢–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n"
            f"–†–∞—Å—á–µ—Ç–Ω—ã–π —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂: **{context.user_data.get('custom_duration')} —Å–µ–∫**.\n\n"
            f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.",
            parse_mode='Markdown'
        )
        return await contact_info(update, context) # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º

    elif data == "back_to_creator":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞/–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        return await campaign_creator(update, context)
        
    return CONFIRM_TEXT

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "back_to_creator":
        return await campaign_creator(update, context)
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫—Ä–æ–º–µ —É–¥–∞–ª–µ–Ω–∏—è PDF)
    if data.startswith("generate_excel_admin_"):
        campaign_number = data.replace("generate_excel_admin_", "")
        await send_excel_file(update, context, campaign_number)
        return
        
    elif data.startswith("call_"):
        phone = data.replace("call_", "")
        await query.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}", show_alert=True)
        return
        
    elif data.startswith("email_"):
        email = data.replace("email_", "")
        await query.answer(f"Email: {email}", show_alert=True)
        return
        
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return await start(update, context)

# –®–∞–≥ 6: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂, –æ—Ö–≤–∞—Ç)
async def contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (Query –∏–ª–∏ Message)
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message_obj = query.message
    else:
        message_obj = update.message

    keyboard = [
        [InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_creator")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –†–∞—Å—á–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    base_price, discount, final_price, total_reach, daily_listeners = calculate_campaign_price_and_reach(context.user_data)
    
    text = (
        f"**–®–ê–ì 6/7: –ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø üìû**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"**–í–ê–® –ó–ê–ö–ê–ó:**\n"
        f"‚Ä¢ –•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂: **{context.user_data.get('base_duration', DEFAULT_DURATION)} —Å–µ–∫**\n"
        f"‚Ä¢ –†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π: **{len(context.user_data.get('selected_radios', []))}**\n"
        f"‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: **{format_number(final_price)}‚ÇΩ**\n"
        f"‚Ä¢ –û—Ö–≤–∞—Ç **–≤—Å–µ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥**: **{format_number(total_reach)}** —á–µ–ª.\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "**–ò–º—è, –ö–æ–º–ø–∞–Ω–∏—è, –¢–µ–ª–µ—Ñ–æ–Ω, Email**\n\n"
        "*–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, –û–û–û –†–∞–¥–∏–æ–ü—Ä–æ–µ–∫—Ç, +79001234567, ivan@example.com*"
    )
    
    await message_obj.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return CONTACT_INFO

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def process_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    parts = [part.strip() for part in text.split(',')]
    
    if len(parts) < 4:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –≤—Å–µ 4 –ø–æ–ª—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: **–ò–º—è, –ö–æ–º–ø–∞–Ω–∏—è, –¢–µ–ª–µ—Ñ–æ–Ω, Email**.")
        return CONTACT_INFO
        
    contact_name, company, phone, email = parts[:4]
    
    if not validate_phone(phone):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `+79001234567` –∏–ª–∏ `89001234567`.")
        return CONTACT_INFO
        
    context.user_data.update({
        'contact_name': contact_name,
        'company': company,
        'phone': phone,
        'email': email
    })
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞–º–ø–∞–Ω–∏–∏
    campaign_number = datetime.now().strftime("%Y%m%d%H%M")
    context.user_data['campaign_number'] = campaign_number
    
    base_price, discount, final_price, total_reach, daily_listeners = calculate_campaign_price_and_reach(context.user_data)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    try:
        conn = sqlite3.connect('campaigns.db')
        cursor = conn.cursor()
        
        cursor.execute(f"""
            INSERT INTO campaigns (user_id, campaign_number, radio_stations, campaign_period, time_slots, branded_section, campaign_text, production_option, contact_name, company, phone, email, base_price, discount, final_price, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            update.effective_user.id,
            campaign_number,
            ', '.join(context.user_data.get('selected_radios', [])),
            context.user_data.get('campaign_period'),
            ', '.join(map(str, context.user_data.get('selected_time_slots', []))),
            context.user_data.get('branded_section'),
            context.user_data.get('campaign_text'),
            context.user_data.get('production_option'),
            contact_name, company, phone, email,
            base_price, discount, final_price, 'pending'
        ))
        
        conn.commit()
        conn.close()
        logger.info(f"–ö–∞–º–ø–∞–Ω–∏—è #{campaign_number} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")

    await send_admin_notification(context, context.user_data, campaign_number)

    return await final_actions(update, context)

# –®–∞–≥ 7: –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ Excel)
async def final_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (Query –∏–ª–∏ Message)
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message_obj = query.message
    else:
        message_obj = update.message
        
    campaign_number = context.user_data.get('campaign_number')
    final_price = calculate_campaign_price_and_reach(context.user_data)[2]
    
    text = (
        f"**üéâ –ó–ê–Ø–í–ö–ê –ü–†–ò–ù–Ø–¢–ê!**\n\n"
        f"–í–∞—à–∞ –∫–∞–º–ø–∞–Ω–∏—è **#{campaign_number}** —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: **{format_number(final_price)}‚ÇΩ**\n\n"
        f"–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –¥–µ—Ç–∞–ª–µ–π.\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É —Å–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–¥–∏–∞–ø–ª–∞–Ω –≤ Excel."
    )
    
    keyboard = [
        [InlineKeyboardButton(f"{E_XLSX} –°–ö–ê–ß–ê–¢–¨ EXCEL", callback_data=f"generate_excel_user_{campaign_number}")],
        [InlineKeyboardButton(f"üìã –ú–û–ò –ó–ê–ö–ê–ó–´", callback_data="my_orders")]
    ]
    
    await message_obj.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    return FINAL_ACTIONS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ Excel)
async def handle_final_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith("generate_excel_user_"):
        campaign_number = data.replace("generate_excel_user_", "")
        success = await send_excel_file(update, context, campaign_number)
        if success:
            await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"‚úÖ EXCEL –°–ö–ê–ß–ê–ù", callback_data="dummy_excel_downloaded")],
                [InlineKeyboardButton(f"üìã –ú–û–ò –ó–ê–ö–ê–ó–´", callback_data="my_orders")]
            ]))
        return FINAL_ACTIONS
    
    elif data == "my_orders":
        # –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –º–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
        await query.answer("–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
        return FINAL_ACTIONS
        
    return FINAL_ACTIONS

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: ConversationHandler)
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    if not init_db():
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        return

    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(radio_selection, pattern='^create_campaign$'),
                CallbackQueryHandler(start, pattern='^(statistics|my_orders|about)$') # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
            ],
            RADIO_SELECTION: [
                CallbackQueryHandler(handle_radio_selection, pattern='^.*$')
            ],
            CAMPAIGN_PERIOD: [
                CallbackQueryHandler(handle_campaign_period, pattern='^.*$')
            ],
            TIME_SLOTS: [
                CallbackQueryHandler(handle_time_slots, pattern='^.*$')
            ],
            BRANDED_SECTIONS: [
                CallbackQueryHandler(handle_branded_sections, pattern='^.*$')
            ],
            CAMPAIGN_CREATOR: [
                CallbackQueryHandler(handle_campaign_creator, pattern='^.*$')
            ],
            WAITING_DURATION: [ # –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_custom_duration),
                CallbackQueryHandler(handle_main_menu, pattern='^back_to_creator$') 
            ],
            WAITING_TEXT: [ # –ò–°–ü–†–ê–í–õ–ï–ù–û
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_campaign_text),
                CallbackQueryHandler(handle_main_menu, pattern='^back_to_creator$')
            ],
            CONFIRM_TEXT: [ # –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
                CallbackQueryHandler(handle_confirm_text, pattern='^.*$')
            ],
            CONTACT_INFO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_contact_info),
                CallbackQueryHandler(handle_main_menu, pattern='^back_to_creator$') # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —à–∞–≥ 5
            ],
            FINAL_ACTIONS: [
                CallbackQueryHandler(handle_final_actions, pattern='^.*$')
            ]
        },
        fallbacks=[CommandHandler('start', start)],
        allow_reentry=True
    )
    
    application.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    # –£–¥–∞–ª–µ–Ω–∞ 'generate_pdf_' –∏ 'get_pdf_'
    application.add_handler(CallbackQueryHandler(
        handle_main_menu, 
        pattern='^(generate_excel_admin_|call_|email_)'
    ))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    if 'RENDER' in os.environ:
        application.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get('PORT', 8443)),
            url_path=TOKEN,
            webhook_url=f"https://{os.environ.get('RENDER_SERVICE_NAME', 'telegram-radio-bot')}.onrender.com/{TOKEN}"
        )
    else:
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

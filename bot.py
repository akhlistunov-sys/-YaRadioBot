import os
import logging
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
MAIN_MENU, RADIO_SELECTION, TIME_SLOTS, BRANDED_SECTIONS, CAMPAIGN_CREATOR, CONTACT_INFO = range(6)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8281804030:AAEFEYgqigL3bdH4DL0zl1tW71fwwo_8cyU"

# –¶–µ–Ω—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
BASE_PRICE_PER_SECOND = 4
TIME_SLOT_PRICES = {
    'morning': 1.25,  # +25%
    'day': 1.0,       # –±–∞–∑–æ–≤–∞—è
    'evening': 1.2    # +20%
}

BRANDED_SECTION_PRICES = {
    'auto': 1.2,      # +20%
    'realty': 1.15,   # +15%
    'medical': 1.25,  # +25%
    'custom': 1.3     # +30%
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('campaigns.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS campaigns (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            campaign_number TEXT,
            radio_stations TEXT,
            time_slots TEXT,
            branded_section TEXT,
            campaign_text TEXT,
            contact_name TEXT,
            company TEXT,
            phone TEXT,
            email TEXT,
            position TEXT,
            total_price INTEGER,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()

# –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏
def calculate_campaign_price(context):
    user_data = context.user_data
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    base_duration = 30  # —Å–µ–∫—É–Ω–¥
    spots_per_day = 5
    campaign_days = 30
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    base_cost = base_duration * BASE_PRICE_PER_SECOND * spots_per_day * campaign_days
    
    # –ù–∞–¥–±–∞–≤–∫–∏ –∑–∞ –≤—Ä–µ–º—è
    time_multiplier = 1.0
    selected_time_slots = user_data.get('selected_time_slots', [])
    for slot in selected_time_slots:
        if slot in TIME_SLOT_PRICES:
            time_multiplier = max(time_multiplier, TIME_SLOT_PRICES[slot])
    
    # –ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ —Ä—É–±—Ä–∏–∫—É
    branded_multiplier = 1.0
    branded_section = user_data.get('branded_section')
    if branded_section in BRANDED_SECTION_PRICES:
        branded_multiplier = BRANDED_SECTION_PRICES[branded_section]
    
    total_price = int(base_cost * time_multiplier * branded_multiplier)
    return total_price

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –°–û–ó–î–ê–¢–¨ –ö–ê–ú–ü–ê–ù–ò–Æ", callback_data="create_campaign")],
        [InlineKeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–•–í–ê–¢–ê", callback_data="statistics")],
        [InlineKeyboardButton("üìã –ú–û–ò –ó–ê–ö–ê–ó–´", callback_data="my_orders")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ù–ê–°", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üî¥ –†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò\n"
        "üìç –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫ ‚Ä¢ –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫\n\n"
        "üìä 18,500+ –≤ –¥–µ–Ω—å\nüë• 156,000+ –≤ –º–µ—Å—è—Ü\n\n"
        "üéØ 52% –¥–æ–ª—è —Ä—ã–Ω–∫–∞\nüí∞ 4‚ÇΩ/—Å–µ–∫ –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞"
    )
    
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    return MAIN_MENU

# –®–∞–≥ 1: –í—ã–±–æ—Ä —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π
async def radio_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_radios = context.user_data.get('selected_radios', [])
    total_listeners = sum({
        'LOVE RADIO': 3200,
        '–ê–í–¢–û–†–ê–î–ò–û': 2800,
        '–†–ê–î–ò–û –î–ê–ß–ê': 3500,
        '–†–ê–î–ò–û –®–ê–ù–°–û–ù': 2600,
        '–†–ï–¢–†–û FM': 2900,
        '–Æ–ú–û–† FM': 2100
    }.get(radio, 0) for radio in selected_radios)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏
    keyboard = []
    radio_stations = [
        ("LOVE RADIO", "radio_love"),
        ("–ê–í–¢–û–†–ê–î–ò–û", "radio_auto"),
        ("–†–ê–î–ò–û –î–ê–ß–ê", "radio_dacha"), 
        ("–†–ê–î–ò–û –®–ê–ù–°–û–ù", "radio_chanson"),
        ("–†–ï–¢–†–û FM", "radio_retro"),
        ("–Æ–ú–û–† FM", "radio_humor")
    ]
    
    for name, callback in radio_stations:
        emoji = "üîò" if name in selected_radios else "‚ö™"
        button_text = f"{emoji} {name}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback)])
    
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_time_slots")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"‚óÄÔ∏è –ù–∞–∑–∞–¥     –í—ã–±–æ—Ä —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π\n\n"
        f"{'üîò' if 'LOVE RADIO' in selected_radios else '‚ö™'} LOVE RADIO [üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ]\n"
        f"üë• 3,200 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë© –ú–æ–ª–æ–¥—ë–∂—å 18-35 –ª–µ—Ç\n\n"
        f"{'üîò' if '–ê–í–¢–û–†–ê–î–ò–û' in selected_radios else '‚ö™'} –ê–í–¢–û–†–ê–î–ò–û [üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ]\n"
        f"üë• 2,800 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë® –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç—ã 25-50 –ª–µ—Ç\n\n"
        f"{'üîò' if '–†–ê–î–ò–û –î–ê–ß–ê' in selected_radios else '‚ö™'} –†–ê–î–ò–û –î–ê–ß–ê [üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ]\n"
        f"üë• 3,500 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë®üë© –°–µ–º—å—è 35-65 –ª–µ—Ç\n\n"
        f"{'üîò' if '–†–ê–î–ò–û –®–ê–ù–°–û–ù' in selected_radios else '‚ö™'} –†–ê–î–ò–û –®–ê–ù–°–û–ù [üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ]\n"
        f"üë• 2,600 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë® –ú—É–∂—á–∏–Ω—ã 30-60 –ª–µ—Ç\n\n"
        f"{'üîò' if '–†–ï–¢–†–û FM' in selected_radios else '‚ö™'} –†–ï–¢–†–û FM [üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ]\n"
        f"üë• 2,900 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë¥üëµ –¶–µ–Ω–∏—Ç–µ–ª–∏ —Ö–∏—Ç–æ–≤ 30-55 –ª–µ—Ç\n\n"
        f"{'üîò' if '–Æ–ú–û–† FM' in selected_radios else '‚ö™'} –Æ–ú–û–† FM [üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ]\n"
        f"üë• 2,100 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë¶üëß –°–ª—É—à–∞—Ç–µ–ª–∏ 25-45 –ª–µ—Ç\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_radios)} —Å—Ç–∞–Ω—Ü–∏–∏ ‚Ä¢ {total_listeners} —Å–ª—É—à–∞—Ç–µ–ª–µ–π\n"
        f"[ –î–ê–õ–ï–ï ]"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return RADIO_SELECTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π
async def handle_radio_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    radio_data = {
        'radio_love': 'LOVE RADIO',
        'radio_auto': '–ê–í–¢–û–†–ê–î–ò–û', 
        'radio_dacha': '–†–ê–î–ò–û –î–ê–ß–ê',
        'radio_chanson': '–†–ê–î–ò–û –®–ê–ù–°–û–ù',
        'radio_retro': '–†–ï–¢–†–û FM',
        'radio_humor': '–Æ–ú–û–† FM'
    }
    
    if query.data in radio_data:
        radio_name = radio_data[query.data]
        selected_radios = context.user_data.get('selected_radios', [])
        
        if radio_name in selected_radios:
            selected_radios.remove(radio_name)
        else:
            selected_radios.append(radio_name)
        
        context.user_data['selected_radios'] = selected_radios
        return await radio_selection(update, context)
    
    elif query.data == "to_time_slots":
        if not context.user_data.get('selected_radios'):
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é!", show_alert=True)
            return RADIO_SELECTION
        return await time_slots(update, context)
    
    return RADIO_SELECTION

# –®–∞–≥ 2: –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã (–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä)
async def time_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_slots = context.user_data.get('selected_time_slots', [])
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –£–¢–†–ï–ù–ù–ò–ï" if 'morning' in selected_slots else "üåÖ –£–¢–†–ï–ù–ù–ò–ï", callback_data="slot_morning"),
            InlineKeyboardButton("‚úÖ –î–ù–ï–í–ù–´–ï" if 'day' in selected_slots else "‚òÄÔ∏è –î–ù–ï–í–ù–´–ï", callback_data="slot_day")
        ],
        [
            InlineKeyboardButton("‚úÖ –í–ï–ß–ï–†–ù–ò–ï" if 'evening' in selected_slots else "üåá –í–ï–ß–ï–†–ù–ò–ï", callback_data="slot_evening")
        ],
        [InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_branded_sections")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    morning_count = len([s for s in selected_slots if 'morning' in s])
    day_count = len([s for s in selected_slots if 'day' in s])
    evening_count = len([s for s in selected_slots if 'evening' in s])
    total_slots = morning_count + day_count + evening_count
    
    text = (
        "‚óÄÔ∏è –ù–∞–∑–∞–¥     –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã\n\n"
        "üïí –í–´–ë–ï–†–ò–¢–ï –í–†–ï–ú–Ø –í–´–•–û–î–ê –†–û–õ–ò–ö–û–í\n\n"
        "üåÖ –£–¢–†–ï–ù–ù–ò–ï –°–õ–û–¢–´ (+25%)\n"
        f"{'‚úÖ' if 'morning' in selected_slots else '[‚ñ¢]'} 06:00-10:00 ‚Ä¢ –ü–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –ü–æ–¥—ä–µ–º, —Å–±–æ—Ä—ã, —É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏\n"
        "‚Ä¢ –ü–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ üöÄ\n\n"
        "‚òÄÔ∏è –î–ù–ï–í–ù–´–ï –°–õ–û–¢–´\n"
        f"{'‚úÖ' if 'day' in selected_slots else '[‚ñ¢]'} 10:00-16:00 ‚Ä¢ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å, –æ–±–µ–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã\n\n"
        "üåá –í–ï–ß–ï–†–ù–ò–ï –°–õ–û–¢–´ (+20%)\n"
        f"{'‚úÖ' if 'evening' in selected_slots else '[‚ñ¢]'} 16:00-21:00 ‚Ä¢ –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è, –ø–æ–µ–∑–¥–∫–∏ –¥–æ–º–æ–π\n"
        "‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç–¥—ã—Ö\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞:\n"
        f"‚Ä¢ –í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(selected_slots)}\n"
        f"‚Ä¢ –†–æ–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å: {total_slots * 5}\n"
        f"‚Ä¢ –î–æ–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–µ–º–∏—É–º-–≤—Ä–µ–º—è: {sum([25 if s == 'morning' else 20 if s == 'evening' else 0 for s in selected_slots])}%\n\n"
        "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞\n"
        "[ –î–ê–õ–ï–ï ]"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return TIME_SLOTS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
async def handle_time_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    slot_data = {
        'slot_morning': 'morning',
        'slot_day': 'day',
        'slot_evening': 'evening'
    }
    
    if query.data in slot_data:
        slot_name = slot_data[query.data]
        selected_slots = context.user_data.get('selected_time_slots', [])
        
        if slot_name in selected_slots:
            selected_slots.remove(slot_name)
        else:
            selected_slots.append(slot_name)
        
        context.user_data['selected_time_slots'] = selected_slots
        return await time_slots(update, context)
    
    elif query.data == "to_branded_sections":
        if not context.user_data.get('selected_time_slots'):
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é!", show_alert=True)
            return TIME_SLOTS
        return await branded_sections(update, context)
    
    return TIME_SLOTS

# –®–∞–≥ 3: –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏ (–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä)
async def branded_sections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_branded = context.user_data.get('branded_section')
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ê–í–¢–û–†–£–ë–†–ò–ö–ò" if selected_branded == 'auto' else "‚ö™ –ê–í–¢–û–†–£–ë–†–ò–ö–ò", callback_data="branded_auto")],
        [InlineKeyboardButton("‚úÖ –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨" if selected_branded == 'realty' else "‚ö™ –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨", callback_data="branded_realty")],
        [InlineKeyboardButton("‚úÖ –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï" if selected_branded == 'medical' else "‚ö™ –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï", callback_data="branded_medical")],
        [InlineKeyboardButton("‚úÖ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø" if selected_branded == 'custom' else "‚ö™ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø", callback_data="branded_custom")],
        [InlineKeyboardButton("‚è© –ü–†–û–ü–£–°–¢–ò–¢–¨", callback_data="skip_branded")],
        [InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_campaign_creator")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "‚óÄÔ∏è –ù–∞–∑–∞–¥     –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏\n\n"
        "üéôÔ∏è –í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –†–£–ë–†–ò–ö–ò:\n\n"
        f"{'‚úÖ' if selected_branded == 'auto' else '[‚ö™]'} –ê–í–¢–û–†–£–ë–†–ò–ö–ò\n"
        "–ì–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤\n"
        "\"30 —Å–µ–∫—É–Ω–¥ –æ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö\"\n"
        "\"30 —Å–µ–∫—É–Ω–¥ –æ–± –ê–≤—Ç–æ–í–ê–ó–µ\"\n"
        "+20% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏\n\n"
        f"{'‚úÖ' if selected_branded == 'realty' else '[‚ö™]'} –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨\n"
        "–†—É–±—Ä–∏–∫–∏ –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n"
        "\"–°–æ–≤–µ—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\"\n"
        "\"–ü–æ–ª–µ–∑–Ω–æ –∑–Ω–∞—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã\"\n"
        "+15% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏\n\n"
        f"{'‚úÖ' if selected_branded == 'medical' else '[‚ö™]'} –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –†–£–ë–†–ò–ö–ò\n"
        "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –∫–ª–∏–Ω–∏–∫\n"
        "\"–ó–¥–æ—Ä–æ–≤–æ–µ —Å–µ—Ä–¥—Ü–µ\"\n"
        "\"–°–æ–≤–µ—Ç –≤—Ä–∞—á–∞\"\n"
        "+25% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏\n\n"
        f"{'‚úÖ' if selected_branded == 'custom' else '[‚ö™]'} –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø –†–£–ë–†–ò–ö–ê\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥ –≤–∞—à –±–∏–∑–Ω–µ—Å\n"
        "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å—Ü–µ–Ω–∞—Ä–∏–π\n"
        "+30% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏\n\n"
        "[ –ü–†–û–°–õ–£–®–ê–¢–¨ –ü–†–ò–ú–ï–† ] [ –î–ê–õ–ï–ï ]"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return BRANDED_SECTIONS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä—É–±—Ä–∏–∫
async def handle_branded_sections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    branded_data = {
        'branded_auto': 'auto',
        'branded_realty': 'realty',
        'branded_medical': 'medical',
        'branded_custom': 'custom'
    }
    
    if query.data in branded_data:
        context.user_data['branded_section'] = branded_data[query.data]
        return await branded_sections(update, context)
    
    elif query.data == "skip_branded":
        context.user_data['branded_section'] = None
        return await campaign_creator(update, context)
    
    elif query.data == "to_campaign_creator":
        return await campaign_creator(update, context)
    
    return BRANDED_SECTIONS

# –®–∞–≥ 4: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞
async def campaign_creator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    total_price = calculate_campaign_price(context)
    context.user_data['total_price'] = total_price
    
    keyboard = [
        [InlineKeyboardButton("üìù –í–í–ï–°–¢–ò –¢–ï–ö–°–¢ –†–û–õ–ò–ö–ê", callback_data="enter_text")],
        [InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_contact_info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "‚óÄÔ∏è –ù–∞–∑–∞–¥     –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞\n\n"
        "üìé –ü–†–ò–ö–†–ï–ü–ò–¢–ï –ì–û–¢–û–í–´–ô –†–û–õ–ò–ö:\n"
        "[ üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª ]\n"
        "MP3, WAV –¥–æ 10 –ú–ë\n\n"
        "–ò–õ–ò\n\n"
        "üìù –í–ê–® –¢–ï–ö–°–¢ –î–õ–Ø –†–û–õ–ò–ö–ê (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):\n"
        "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        "‚îÇ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –¢—é–º–µ–Ω–∏!               ‚îÇ\n"
        "‚îÇ –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏. –í—ã–≥–æ–¥–Ω—ã–π   ‚îÇ\n"
        "‚îÇ —Ç—Ä–µ–π–¥-–∏–Ω –∏ –∫—Ä–µ–¥–∏—Ç 0%. –¢–µ—Å—Ç-–¥—Ä–∞–π–≤   ‚îÇ\n"
        "‚îÇ –≤ –¥–µ–Ω—å –æ–±—Ä–∞—â–µ–Ω–∏—è!                  ‚îÇ\n"
        "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
        "‚óã 98 –∑–Ω–∞–∫–æ–≤ –∏–∑ 500\n\n"
        "‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 18 —Å–µ–∫—É–Ω–¥\n\n"
        f"üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price}‚ÇΩ\n\n"
        "[ –ü–†–û–°–õ–£–®–ê–¢–¨ –ü–†–ï–í–¨–Æ ] [ –î–ê–õ–ï–ï ]"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return CAMPAIGN_CREATOR

# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Ä–æ–ª–∏–∫–∞
async def enter_campaign_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–¥–∏–æ—Ä–æ–ª–∏–∫–∞ (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –¢—é–º–µ–Ω–∏! –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏. –í—ã–≥–æ–¥–Ω—ã–π —Ç—Ä–µ–π–¥-–∏–Ω –∏ –∫—Ä–µ–¥–∏—Ç 0%. "
        "–¢–µ—Å—Ç-–¥—Ä–∞–π–≤ –≤ –¥–µ–Ω—å –æ–±—Ä–∞—â–µ–Ω–∏—è!"
    )
    
    return "WAITING_TEXT"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–æ–ª–∏–∫–∞
async def process_campaign_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if len(text) > 500:
        await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç 500 –∑–Ω–∞–∫–æ–≤. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return "WAITING_TEXT"
    
    context.user_data['campaign_text'] = text
    char_count = len(text)
    
    total_price = calculate_campaign_price(context)
    
    keyboard = [[InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_contact_info")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text_display = (
        f"‚óÄÔ∏è –ù–∞–∑–∞–¥     –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞\n\n"
        f"üìù –í–ê–® –¢–ï–ö–°–¢ –î–õ–Ø –†–û–õ–ò–ö–ê (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):\n"
        f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        f"‚îÇ {text:<37} ‚îÇ\n"
        f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
        f"‚óã {char_count} –∑–Ω–∞–∫–æ–≤ –∏–∑ 500\n\n"
        f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {max(15, char_count // 7)} —Å–µ–∫—É–Ω–¥\n\n"
        f"üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price}‚ÇΩ\n\n"
        f"[ –ü–†–û–°–õ–£–®–ê–¢–¨ –ü–†–ï–í–¨–Æ ] [ –î–ê–õ–ï–ï ]"
    )
    
    await update.message.reply_text(text_display, reply_markup=reply_markup)
    return CAMPAIGN_CREATOR

# –®–∞–≥ 5: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
async def contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    total_price = calculate_campaign_price(context)
    
    await query.edit_message_text(
        f"‚óÄÔ∏è –ù–∞–∑–∞–¥     –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        f"üë§ –ö–û–ù–¢–ê–ö–¢–´ –î–õ–Ø –°–í–Ø–ó–ò\n\n"
        f"üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price}‚ÇΩ\n\n"
        f"üìû –í–ê–® –¢–ï–õ–ï–§–û–ù:\n"
        f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        f"‚îÇ +7 ___ ___ __ __                    ‚îÇ\n"
        f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        f"üìß EMAIL:\n"
        f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        f"‚îÇ _____@____.___                      ‚îÇ\n"
        f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        f"üè¢ –ù–ê–ó–í–ê–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ò:\n"
        f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        f"‚îÇ ________________________________     ‚îÇ\n"
        f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        f"üë®‚Äçüíº –ö–û–ù–¢–ê–ö–¢–ù–û–ï –õ–ò–¶–û:\n"
        f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        f"‚îÇ ________________________________     ‚îÇ\n"
        f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        f"üíº –î–û–õ–ñ–ù–û–°–¢–¨:\n"
        f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        f"‚îÇ ________________________________     ‚îÇ\n"
        f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        f"üìë –ü–†–ò–ö–†–ï–ü–ò–¢–ï –†–ï–ö–í–ò–ó–ò–¢–´:\n"
        f"[üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏]\n"
        f"PDF, JPG, PNG –¥–æ 5 –ú–ë\n"
        f"–∏–ª–∏\n"
        f"[üìù –í–≤–µ—Å—Ç–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤—Ä—É—á–Ω—É—é]\n\n"
        f"[ –ù–ê–ó–ê–î ] [ –û–¢–ü–†–ê–í–ò–¢–¨ –ó–ê–Ø–í–ö–£ ]\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    
    return CONTACT_INFO

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def process_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if 'contact_name' not in context.user_data:
        context.user_data['contact_name'] = text
        await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return CONTACT_INFO
    
    elif 'phone' not in context.user_data:
        context.user_data['phone'] = text
        await update.message.reply_text("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
        return CONTACT_INFO
    
    elif 'email' not in context.user_data:
        context.user_data['email'] = text
        await update.message.reply_text("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
        return CONTACT_INFO
    
    elif 'company' not in context.user_data:
        context.user_data['company'] = text
        await update.message.reply_text("üíº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
        return CONTACT_INFO
    
    elif 'position' not in context.user_data:
        context.user_data['position'] = text
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        total_price = calculate_campaign_price(context)
        context.user_data['total_price'] = total_price
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
        campaign_number = f"R-{datetime.now().strftime('%H%M%S')}"
        conn = sqlite3.connect('campaigns.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO campaigns 
            (user_id, campaign_number, radio_stations, time_slots, branded_section, campaign_text, contact_name, company, phone, email, position, total_price)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            update.message.from_user.id,
            campaign_number,
            ','.join(context.user_data.get('selected_radios', [])),
            ','.join(context.user_data.get('selected_time_slots', [])),
            context.user_data.get('branded_section', ''),
            context.user_data.get('campaign_text', ''),
            context.user_data.get('contact_name', ''),
            context.user_data.get('company', ''),
            context.user_data.get('phone', ''),
            context.user_data.get('email', ''),
            context.user_data.get('position', ''),
            total_price
        ))
        
        conn.commit()
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞–ø–ª–∞–Ω –¥–ª—è PDF
        media_plan = generate_media_plan(context.user_data, campaign_number)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è PDF
        keyboard = [
            [InlineKeyboardButton("üìÑ –°–§–û–†–ú–ò–†–û–í–ê–¢–¨ PDF", callback_data=f"generate_pdf_{campaign_number}")],
            [InlineKeyboardButton("üìã –í –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢", callback_data="personal_cabinet")],
            [InlineKeyboardButton("üöÄ –ù–û–í–´–ô –ó–ê–ö–ê–ó", callback_data="new_order")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –ó–ê–Ø–í–ö–ê –ü–†–ò–ù–Ø–¢–ê!\n\n"
            f"üìã ‚Ññ –∑–∞—è–≤–∫–∏: {campaign_number}\n"
            f"üìÖ –°—Ç–∞—Ä—Ç: 01.01.2025\n"
            f"üí∞ –°—É–º–º–∞: {total_price}‚ÇΩ\n\n"
            f"üìß PDF-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞:\n"
            f"{context.user_data['email']}\n\n"
            f"üë§ –í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ù–∞–¥–µ–∂–¥–∞ —Å–≤—è–∂–µ—Ç—Å—è\n"
            f"–≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n\n"
            f"üìû +7 (34535) 5-01-51\n"
            f"‚úâÔ∏è aa@ya-radio.ru\n\n"
            f"üöÄ –ß–¢–û –î–ê–õ–¨–®–ï:\n"
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π\n"
            f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–æ–ª–∏–∫–æ–≤\n"
            f"‚Ä¢ 01.01.2025: –∑–∞–ø—É—Å–∫ —Ä–µ–∫–ª–∞–º—ã\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ '–°–§–û–†–ú–ò–†–û–í–ê–¢–¨ PDF' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–¥–∏–∞–ø–ª–∞–Ω–∞",
            reply_markup=reply_markup
        )
        
        return ConversationHandler.END

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞–ø–ª–∞–Ω–∞
def generate_media_plan(user_data, campaign_number):
    selected_radios = user_data.get('selected_radios', [])
    selected_times = user_data.get('selected_time_slots', [])
    branded_section = user_data.get('branded_section')
    campaign_text = user_data.get('campaign_text', '–¢–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')
    total_price = user_data.get('total_price', 0)
    
    media_plan = f"""
–ú–ï–î–ò–ê–ü–õ–ê–ù –ö–ê–ú–ü–ê–ù–ò–ò #{campaign_number}
–†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò

üìä –ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ú–ü–ê–ù–ò–ò:
‚Ä¢ –†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏: {', '.join(selected_radios)}
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã: {', '.join(selected_times)}
‚Ä¢ –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä—É–±—Ä–∏–∫–∞: {get_branded_section_name(branded_section)}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏–∫–∞: 30 —Å–µ–∫—É–Ω–¥
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: 5
‚Ä¢ –ü–µ—Ä–∏–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏: 30 –¥–Ω–µ–π

üí∞ –°–¢–û–ò–ú–û–°–¢–¨:
‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: 4‚ÇΩ/—Å–µ–∫
‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price}‚ÇΩ

üìù –¢–ï–ö–°–¢ –†–û–õ–ò–ö–ê:
{campaign_text}

üë§ –ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {user_data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: {user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ Email: {user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üìû –ö–û–ù–¢–ê–ö–¢–´ –†–ê–î–ò–û–°–¢–ê–ù–¶–ò–ò:
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä: –ù–∞–¥–µ–∂–¥–∞
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (34535) 5-01-51
‚Ä¢ Email: aa@ya-radio.ru

–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
    """
    
    return media_plan

def get_branded_section_name(section):
    names = {
        'auto': '–ê–≤—Ç–æ—Ä—É–±—Ä–∏–∫–∏ (+20%)',
        'realty': '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (+15%)',
        'medical': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä—É–±—Ä–∏–∫–∏ (+25%)',
        'custom': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä—É–±—Ä–∏–∫–∞ (+30%)'
    }
    return names.get(section, '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
async def generate_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    campaign_number = query.data.replace('generate_pdf_', '')
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF —Ñ–∞–π–ª–∞
    # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –º–µ–¥–∏–∞–ø–ª–∞–Ω
    
    media_plan = generate_media_plan(context.user_data, campaign_number)
    
    await query.message.reply_text(
        f"üìÑ –ú–ï–î–ò–ê–ü–õ–ê–ù –î–õ–Ø –î–ò–†–ï–ö–¢–û–†–ê\n\n"
        f"{media_plan}\n\n"
        f"‚úÖ –ú–µ–¥–∏–∞–ø–ª–∞–Ω —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email\n"
        f"üìß {context.user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "statistics":
        await query.edit_message_text(
            "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–•–í–ê–¢–ê\n\n"
            "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ö–≤–∞—Ç: 18,500+\n"
            "‚Ä¢ –ú–µ—Å—è—á–Ω—ã–π –æ—Ö–≤–∞—Ç: 156,000+\n"
            "‚Ä¢ –î–æ–ª—è —Ä—ã–Ω–∫–∞: 52%\n"
            "‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: 4‚ÇΩ/—Å–µ–∫"
        )
    elif query.data == "my_orders":
        await query.edit_message_text(
            "üìã –ú–û–ò –ó–ê–ö–ê–ó–´\n\n"
            "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã"
        )
    elif query.data == "about":
        await query.edit_message_text(
            "‚ÑπÔ∏è –û –ù–ê–°\n\n"
            "–†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò\n"
            "üìç –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫ ‚Ä¢ –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫\n\n"
            "–í–µ–¥—É—â–∏–π —Ä–∞–¥–∏–æ–≤–µ—â–∞—Ç–µ–ª—å –≤ —Ä–µ–≥–∏–æ–Ω–µ"
        )
    elif query.data == "new_order":
        context.user_data.clear()
        return await radio_selection(update, context)
    elif query.data == "personal_cabinet":
        await query.edit_message_text(
            "üìã –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢\n\n"
            "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö"
        )
    elif query.data.startswith("generate_pdf_"):
        return await generate_pdf(update, context)
    
    return MAIN_MENU

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(radio_selection, pattern='^create_campaign$'),
                CallbackQueryHandler(handle_main_menu, pattern='^statistics$|^my_orders$|^about$|^new_order$|^personal_cabinet$|^generate_pdf_')
            ],
            RADIO_SELECTION: [
                CallbackQueryHandler(handle_radio_selection, pattern='^radio_'),
                CallbackQueryHandler(time_slots, pattern='^to_time_slots$')
            ],
            TIME_SLOTS: [
                CallbackQueryHandler(handle_time_slots, pattern='^slot_'),
                CallbackQueryHandler(branded_sections, pattern='^to_branded_sections$')
            ],
            BRANDED_SECTIONS: [
                CallbackQueryHandler(handle_branded_sections, pattern='^branded_|^skip_branded$'),
                CallbackQueryHandler(campaign_creator, pattern='^to_campaign_creator$')
            ],
            CAMPAIGN_CREATOR: [
                CallbackQueryHandler(enter_campaign_text, pattern='^enter_text$'),
                CallbackQueryHandler(contact_info, pattern='^to_contact_info$')
            ],
            "WAITING_TEXT": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_campaign_text)
            ],
            CONTACT_INFO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_contact_info)
            ]
        },
        fallbacks=[CommandHandler('start', start)]
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    if 'RENDER' in os.environ:
        application.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get('PORT', 8443)),
            url_path=TOKEN,
            webhook_url=f"https://{os.environ.get('RENDER_SERVICE_NAME', 'telegram-radio-bot')}.onrender.com/{TOKEN}"
        )
    else:
        application.run_polling()

if __name__ == '__main__':
    main()

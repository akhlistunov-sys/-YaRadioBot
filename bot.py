# bot.py
import os
import logging
import datetime
import random
from io import BytesIO

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, InputFile
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)
# –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ PDF
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
BOT_TOKEN = os.environ.get("BOT_TOKEN")   # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ Render
MANAGER_CHAT_ID = os.environ.get("MANAGER_CHAT_ID")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏ (chat id)
# –ï—Å–ª–∏ MANAGER_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω, –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å PDF —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---------- –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) ----------
stations = [
    {"id": 1, "name": "Love Radio", "listeners": 3200, "price": 280, "emoji": "‚ù§Ô∏è"},
    {"id": 2, "name": "–ê–≤—Ç–æ—Ä–∞–¥–∏–æ", "listeners": 2800, "price": 260, "emoji": "üöó"},
    {"id": 3, "name": "–†–∞–¥–∏–æ –î–∞—á–∞", "listeners": 3500, "price": 240, "emoji": "üè°"},
    {"id": 4, "name": "–†–∞–¥–∏–æ –®–∞–Ω—Å–æ–Ω", "listeners": 2600, "price": 250, "emoji": "üéµ"},
    {"id": 5, "name": "–†–µ—Ç—Ä–æ FM", "listeners": 2900, "price": 230, "emoji": "üìª"},
    {"id": 6, "name": "–Æ–º–æ—Ä FM", "listeners": 2100, "price": 270, "emoji": "üòä"}
]

time_slots = [
    "06:00-07:00 üåÖ", "07:00-08:00 üöÄ", "08:00-09:00 üìà",
    "09:00-10:00 ‚òï", "10:00-11:00 üìä", "11:00-12:00 ‚è∞",
    "12:00-13:00 üçΩÔ∏è", "13:00-14:00 üìã", "14:00-15:00 üîÑ",
    "15:00-16:00 üìù", "16:00-17:00 üèÉ", "17:00-18:00 üöÄ",
    "18:00-19:00 üìà", "19:00-20:00 üè†", "20:00-21:00 üåô"
]

rubrics = [
    {"key": "auto", "title": "–ê–í–¢–û–†–£–ë–†–ò–ö–ò", "delta": 0.20},
    {"key": "realty", "title": "–ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨", "delta": 0.15},
    {"key": "medical", "title": "–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –†–£–ë–†–ò–ö–ò", "delta": 0.25},
    {"key": "custom", "title": "–ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø –†–£–ë–†–ò–ö–ê", "delta": 0.30},
]

BASE_PRICE_PER_SEC = 4.0  # —Ä—É–±–ª–µ–π –∑–∞ —Å–µ–∫—É–Ω–¥—É (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è)

# ---------- –•—Ä–∞–Ω–∏–ª–∏—â–µ (–≤ –ø–∞–º—è—Ç–∏) ----------
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: user_sessions[user_id] = {...}
user_sessions = {}
# –î–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ—Å—Å–∏–∏ (–º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)
orders_store = {}

# ---------- –ü–æ–º–æ—â–Ω–∏–∫–∏ ----------
def format_station_line(s):
    return f"{s['emoji']} {s['name']} ‚Äî {s['listeners']} —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å ‚Äî {s['price']}‚ÇΩ/—Ä–æ–ª–∏–∫"

def calc_total_cost(session):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (float)
    selected_ids = session.get('selected_stations', [])
    if not selected_ids:
        return 0.0
    selected_stations = [s for s in stations if s['id'] in selected_ids]

    spots_per_day = session.get('spots_per_day', 5)
    campaign_days = session.get('campaign_days', 30)
    total = 0.0
    spots_per_station = spots_per_day / max(1, len(selected_stations))

    for st in selected_stations:
        station_cost = st['price'] * spots_per_station * campaign_days
        # premium slots multiplier
        premium_slots = 0
        for slot in session.get('selected_slots', []):
            if 'üåÖ' in slot or 'üöÄ' in slot or 'üåá' in slot:
                premium_slots += 1
        station_cost *= (1 + premium_slots * 0.05)
        total += station_cost

    # —Å–∫–∏–¥–∫–∏ –∑–∞ –æ–±—ä–µ–º
    total_spots = spots_per_day * campaign_days
    discount = 0.0
    if total_spots >= 300:
        discount = 0.6
    elif total_spots >= 200:
        discount = 0.5
    elif total_spots >= 100:
        discount = 0.4
    elif total_spots >= 50:
        discount = 0.2

    # –±–æ–Ω—É—Å –∑–∞ multiple —Å—Ç–∞–Ω—Ü–∏–π
    station_bonus = 0.1 if len(selected_stations) > 1 else 0.0

    # —Ä—É–±—Ä–∏–∫–∏ –Ω–∞–¥–±–∞–≤–∫–∞
    rubric_key = session.get('selected_rubric')
    rubric_delta = 0.0
    for r in rubrics:
        if r['key'] == rubric_key:
            rubric_delta = r['delta']
            break

    final = total * (1 - discount - station_bonus)
    final *= (1 + rubric_delta)
    return final

def generate_order_pdf(order_info: dict) -> BytesIO:
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–π pdf-—Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç BytesIO."""
    bio = BytesIO()
    p = canvas.Canvas(bio, pagesize=A4)
    width, height = A4
    x = 50
    y = height - 50

    p.setFont("Helvetica-Bold", 16)
    p.drawString(x, y, "YA-RADIO ‚Äî –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    y -= 30

    p.setFont("Helvetica", 11)
    for key, value in [
        ("–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", order_info.get("order_id")),
        ("–ö–ª–∏–µ–Ω—Ç", order_info.get("client_name") or "-"),
        ("–¢–µ–ª–µ—Ñ–æ–Ω", order_info.get("phone") or "-"),
        ("Email", order_info.get("email") or "-"),
        ("–ö–æ–º–ø–∞–Ω–∏—è", order_info.get("company") or "-"),
        ("–°—Ç–∞–Ω—Ü–∏–∏", ", ".join(order_info.get("stations", []))),
        ("–°–ª–æ—Ç—ã", ", ".join(order_info.get("slots", []))),
        ("–†—É–±—Ä–∏–∫–∞", order_info.get("rubric") or "-"),
        ("–ü–µ—Ä–∏–æ–¥ (–¥–Ω–∏)", str(order_info.get("days"))),
        ("–†–æ–ª–∏–∫–æ–≤/–¥–µ–Ω—å", str(order_info.get("spots_per_day"))),
        ("–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)", f"{order_info.get('total_cost'):.0f}")
    ]:
        p.drawString(x, y, f"{key}: {value}")
        y -= 18
        if y < 80:
            p.showPage()
            y = height - 50

    p.showPage()
    p.save()
    bio.seek(0)
    return bio

def gen_order_id():
    return f"R-{random.randint(10000, 99999)}"

# ---------- Handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    user_sessions[user_id] = {
        'selected_stations': [],
        'selected_slots': [],
        'selected_rubric': None,
        'audio_file_id': None,
        'audio_info': None,
        'text_for_spot': None,
        'campaign_days': 30,
        'spots_per_day': 5,
        'step': 'main',
        'awaiting': None  # for sequential inputs (e.g., contact fields)
    }

    keyboard = [
        ['üöÄ –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ö–≤–∞—Ç–∞'],
        ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', '‚ÑπÔ∏è –û –Ω–∞—Å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    message = (
        "üéß *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YA-RADIO!*\n\n"
        "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –≤–µ—â–∞—Ç–µ–ª—å –≤ –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫–µ –∏ –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫–µ.\n\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏ –∑–∞–∫–∞–∑–∞—Ç—å —Ä–∞–¥–∏–æ–∫–∞–º–ø–∞–Ω–∏—é ‚Äî –æ—Ç –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–π –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏."
    )
    await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    session = user_sessions.setdefault(user_id, {
        'selected_stations': [], 'selected_slots': [], 'selected_rubric': None,
        'audio_file_id': None, 'audio_info': None, 'text_for_spot': None,
        'campaign_days': 30, 'spots_per_day': 5, 'step': 'main', 'awaiting': None
    })

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –≤–≤–æ–¥ (–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Ä–æ–ª–∏–∫–∞)
    if session.get('awaiting'):
        await handle_sequential_input(update, context, session)
        return

    if text == 'üöÄ –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é':
        await show_stations_selection(update, context)
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ö–≤–∞—Ç–∞':
        await show_statistics(update, context)
    elif text == 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã':
        await show_my_orders(update, context)
    elif text == '‚ÑπÔ∏è –û –Ω–∞—Å':
        await show_about(update, context)
    elif text == 'üîô –ù–∞–∑–∞–¥' or text == '–ù–∞–∑–∞–¥':
        await start(update, context)
    else:
        # default help
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n"
            "üöÄ –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ö–≤–∞—Ç–∞\nüìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n‚ÑπÔ∏è –û –Ω–∞—Å"
        )

# ========== –°–¢–ï–ù–´ (–≠–ö–†–ê–ù–´) ==========

# 2. –í—ã–±–æ—Ä —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π
async def show_stations_selection(update_or_ctx, context):
    """–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ª–∏–±–æ update, –ª–∏–±–æ callback context; —É–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º."""
    if isinstance(update_or_ctx, Update):
        update = update_or_ctx
        callback_query = None
    else:
        # callback context passed (when called from other handlers)
        update = None
        callback_query = update_or_ctx

    # –ø–æ–ª—É—á–∞–µ–º user_id –∏ session
    if update:
        user_id = update.effective_user.id
    else:
        user_id = callback_query.from_user.id

    session = user_sessions.setdefault(user_id, {
        'selected_stations': [], 'selected_slots': [], 'selected_rubric': None,
        'audio_file_id': None, 'audio_info': None, 'text_for_spot': None,
        'campaign_days': 30, 'spots_per_day': 5, 'step': 'main', 'awaiting': None
    })
    session['step'] = 'selecting_stations'

    keyboard = []
    for s in stations:
        selected = '‚úÖ ' if s['id'] in session['selected_stations'] else ''
        keyboard.append([InlineKeyboardButton(f"{selected}{s['emoji']} {s['name']}", callback_data=f"station_{s['id']}")])
    keyboard.append([InlineKeyboardButton("üöÄ –î–∞–ª–µ–µ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", callback_data="next_to_slots"),
                     InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="reset_stations")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    stations_text = "\n".join([format_station_line(s) for s in stations])
    message = f"*YA-RADIO ‚Äî –í—ã–±–æ—Ä —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π*\n\n{stations_text}\n\n*–í—ã–±—Ä–∞–Ω–æ:* {len(session['selected_stations'])}"
    if update:
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await callback_query.message.edit_text(message, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_station_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    session = user_sessions.setdefault(user_id, {})
    data = query.data
    if data == "reset_stations":
        session['selected_stations'] = []
        await show_stations_selection(query, context)
        return
    if data.startswith("station_"):
        st_id = int(data.split("_", 1)[1])
        if st_id in session.get('selected_stations', []):
            session['selected_stations'].remove(st_id)
        else:
            session['selected_stations'].append(st_id)
        await show_stations_selection(query, context)
    elif data == "next_to_slots":
        await show_time_slots(query, context)

# 3. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
async def show_time_slots(update_or_ctx, context):
    if isinstance(update_or_ctx, Update):
        update = update_or_ctx
        callback_query = None
    else:
        update = None
        callback_query = update_or_ctx

    if update:
        user_id = update.effective_user.id
    else:
        user_id = callback_query.from_user.id

    session = user_sessions.get(user_id, {})
    if not session.get('selected_stations'):
        if update:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é!")
        else:
            await callback_query.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é!")
        return

    session['step'] = 'selecting_slots'
    keyboard = []
    for i in range(0, len(time_slots), 2):
        row = []
        for j in range(2):
            if i + j < len(time_slots):
                slot = time_slots[i + j]
                sel = '‚úÖ ' if slot in session.get('selected_slots', []) else ''
                row.append(InlineKeyboardButton(f"{sel}{slot}", callback_data=f"slot_{i+j}"))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("üóÇ –í—ã–±—Ä–∞—Ç—å —Ä—É–±—Ä–∏–∫—É", callback_data="to_rubrics"),
                     InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="reset_slots")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    msg = (
        "*YA-RADIO ‚Äî –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤*\n\n"
        "üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ—Ç—ã (+25%): 06:00-10:00\n"
        "‚òÄÔ∏è –î–Ω–µ–≤–Ω—ã–µ —Å–ª–æ—Ç—ã: 10:00-16:00\n"
        "üåá –í–µ—á–µ—Ä–Ω–∏–µ —Å–ª–æ—Ç—ã (+20%): 16:00-21:00\n\n"
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(session.get('selected_slots', []))}"
    )
    if update:
        await update.message.reply_text(msg, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await callback_query.message.edit_text(msg, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_slot_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    session = user_sessions.setdefault(user_id, {})
    data = query.data
    if data == "reset_slots":
        session['selected_slots'] = []
        await show_time_slots(query, context)
        return
    if data == "to_rubrics":
        await show_rubrics(query, context)
        return
    if data.startswith("slot_"):
        idx = int(data.split("_", 1)[1])
        slot = time_slots[idx]
        if slot in session.get('selected_slots', []):
            session['selected_slots'].remove(slot)
        else:
            session['selected_slots'].append(slot)
        await show_time_slots(query, context)

# 4. –†—É–±—Ä–∏–∫–∏
async def show_rubrics(update_or_ctx, context):
    if isinstance(update_or_ctx, Update):
        update = update_or_ctx
        callback_query = None
    else:
        update = None
        callback_query = update_or_ctx

    if update:
        user_id = update.effective_user.id
    else:
        user_id = callback_query.from_user.id

    session = user_sessions.setdefault(user_id, {})
    session['step'] = 'selecting_rubric'

    keyboard = []
    for r in rubrics:
        sel = '‚úÖ ' if session.get('selected_rubric') == r['key'] else ''
        keyboard.append([InlineKeyboardButton(f"{sel}{r['title']} (+{int(r['delta']*100)}%)", callback_data=f"rubric_{r['key']}")])
    keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –î–∞–ª–µ–µ ‚Äî –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞", callback_data="to_constructor")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "*YA-RADIO ‚Äî –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä—É–±—Ä–∏–∫–∏ (–Ω–∞–¥–±–∞–≤–∫–∏ —É–∫–∞–∑–∞–Ω—ã):"
    if update:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await callback_query.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_rubric_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    session = user_sessions.setdefault(user_id, {})
    data = query.data
    if data.startswith("rubric_"):
        key = data.split("_", 1)[1]
        session['selected_rubric'] = key
        await show_rubrics(query, context)
    elif data == "to_constructor":
        await show_constructor(query, context)

# 5. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞ (upload audio –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç)
async def show_constructor(update_or_ctx, context):
    if isinstance(update_or_ctx, Update):
        update = update_or_ctx
        callback_query = None
    else:
        update = None
        callback_query = update_or_ctx

    if update:
        user_id = update.effective_user.id
    else:
        user_id = callback_query.from_user.id
    session = user_sessions.setdefault(user_id, {})
    session['step'] = 'constructor'
    session['awaiting'] = None

    text = (
        "üìé *–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ä–æ–ª–∏–∫ (MP3/WAV, –¥–æ 10 –ú–ë)*\n\n"
        "–ò–õ–ò\n\n"
        "üìù *–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–ª–∏–∫–∞ (–¥–æ 500 –∑–Ω–∞–∫–æ–≤)*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç. –ú–æ–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç, –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª–æ–º."
    )
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é", callback_data="enter_text")],
        [InlineKeyboardButton("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É", callback_data="to_preview")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await callback_query.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_constructor_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    session = user_sessions.setdefault(user_id, {})
    data = query.data
    if data == "enter_text":
        session['awaiting'] = 'text_for_spot'
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–æ–ª–∏–∫–∞ (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):")
    elif data == "to_preview":
        await show_preview(query, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ/—Ñ–∞–π–ª–æ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–≥–¥–∞ –º—ã –≤ constructor —à–∞–≥–µ
async def handle_incoming_file_or_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = user_sessions.setdefault(user_id, {})
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ
    if session.get('awaiting'):
        await handle_sequential_input(update, context, session)
        return

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞—É–¥–∏–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
    if update.message.audio:
        f = await update.message.audio.get_file()
        session['audio_file_id'] = f.file_id
        session['audio_info'] = {'file_size': update.message.audio.file_size, 'duration': update.message.audio.duration}
        await update.message.reply_text("–ê—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω ‚úÖ. –ú–æ–∂–Ω–æ –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –≤ Telegram –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return
    if update.message.document:
        # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º mp3/wav
        doc = update.message.document
        mime = doc.mime_type or ''
        if 'audio' in mime or doc.file_name.lower().endswith(('.mp3', '.wav')):
            f = await doc.get_file()
            session['audio_file_id'] = f.file_id
            session['audio_info'] = {'file_name': doc.file_name, 'file_size': doc.file_size}
            await update.message.reply_text("–§–∞–π–ª-—Ä–æ–ª–∏–∫ –ø–æ–ª—É—á–µ–Ω ‚úÖ.")
            return
        else:
            await update.message.reply_text("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º (MP3/WAV).")
            return
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏ –º—ã –Ω–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –ü—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç —Ä–æ–ª–∏–∫–∞ (–µ—Å–ª–∏ –¥–ª–∏–Ω–∞ < 500)
    text = update.message.text or ''
    if len(text) <= 500 and len(text) > 0:
        session['text_for_spot'] = text
        await update.message.reply_text(f"–¢–µ–∫—Å—Ç –¥–ª—è —Ä–æ–ª–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–¥–ª–∏–Ω–∞ {len(text)} –∑–Ω–∞–∫–æ–≤).")
        return
    # –ò–Ω–∞—á–µ –æ–±—â–∞—è —Ä–µ–∞–∫—Ü–∏—è
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3/WAV) –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–æ 500 –∑–Ω–∞–∫–æ–≤.")

# 6. –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä / –∏—Ç–æ–≥ –∑–∞–∫–∞–∑–∞
async def show_preview(update_or_ctx, context):
    if isinstance(update_or_ctx, Update):
        update = update_or_ctx
        callback_query = None
    else:
        update = None
        callback_query = update_or_ctx

    if update:
        user_id = update.effective_user.id
    else:
        user_id = callback_query.from_user.id
    session = user_sessions.setdefault(user_id, {})
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not session.get('selected_stations') or not session.get('selected_slots'):
        if update:
            await update.message.reply_text("‚ùå –î–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∏ —Å–ª–æ—Ç—ã.")
        else:
            await callback_query.message.reply_text("‚ùå –î–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∏ —Å–ª–æ—Ç—ã.")
        return

    stations_names = [s['name'] for s in stations if s['id'] in session['selected_stations']]
    slots_text = ", ".join(session.get('selected_slots', []))
    rubric = next((r['title'] for r in rubrics if r['key'] == session.get('selected_rubric')), "‚Äî")
    text_preview = session.get('text_for_spot') or "–ê—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω" if session.get('audio_file_id') else "‚Äî"

    total_cost = calc_total_cost(session)
    msg = (
        "üéØ *–í–ê–® –ó–ê–ö–ê–ó (–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä)*\n\n"
        f"üìª –°—Ç–∞–Ω—Ü–∏–∏: {', '.join(stations_names)}\n"
        f"üïí –°–ª–æ—Ç—ã: {slots_text}\n"
        f"üéô –†—É–±—Ä–∏–∫–∞: {rubric}\n"
        f"‚è± –¢–µ–∫—Å—Ç/–ê—É–¥–∏–æ: {text_preview[:180]}\n\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {session.get('campaign_days')} –¥–Ω–µ–π\n"
        f"üìä –†–æ–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å: {session.get('spots_per_day')}\n"
        f"üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(total_cost):,}‚ÇΩ"
    )
    keyboard = [
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")],
        [InlineKeyboardButton("üìá –í–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="to_contacts")],
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç", callback_data="new_calculation")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update:
        await update.message.reply_text(msg, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await callback_query.message.edit_text(msg, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_preview_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    session = user_sessions.setdefault(user_id, {})
    if data == "contact_manager":
        manager_contact = "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        await query.message.reply_text(manager_contact)
    elif data == "to_contacts":
        await show_contact_form(query, context)
    elif data == "new_calculation":
        # —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
        user_sessions[user_id] = {
            'selected_stations': [], 'selected_slots': [], 'selected_rubric': None,
            'audio_file_id': None, 'audio_info': None, 'text_for_spot': None,
            'campaign_days': 30, 'spots_per_day': 5, 'step': 'main', 'awaiting': None
        }
        await show_stations_selection(query, context)

# 7. –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞
async def show_contact_form(update_or_ctx, context):
    if isinstance(update_or_ctx, Update):
        update = update_or_ctx
        callback_query = None
    else:
        update = None
        callback_query = update_or_ctx

    if update:
        user_id = update.effective_user.id
    else:
        user_id = callback_query.from_user.id

    session = user_sessions.setdefault(user_id, {})
    session['step'] = 'contact_form'
    session['awaiting'] = 'phone'

    text = (
        "üë§ *–ö–û–ù–¢–ê–ö–¢–´ –î–õ–Ø –°–í–Ø–ó–ò*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7..."
    )
    keyboard = [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_contact_form")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await callback_query.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_sequential_input(update: Update, context: ContextTypes.DEFAULT_TYPE, session=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª–µ–π: phone, email, company, contact_name, position, requisites"""
    user_id = update.effective_user.id
    if session is None:
        session = user_sessions.setdefault(user_id, {})
    awaiting = session.get('awaiting')
    text = (update.message.text or "").strip()
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤: —Ñ–∞–π–ª—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã
    if awaiting == 'phone':
        session['phone'] = text
        session['awaiting'] = 'email'
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ Email:")
    elif awaiting == 'email':
        session['email'] = text
        session['awaiting'] = 'company'
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    elif awaiting == 'company':
        session['company'] = text
        session['awaiting'] = 'contact_name'
        await update.message.reply_text("–ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞:")
    elif awaiting == 'contact_name':
        session['contact_name'] = text
        session['awaiting'] = 'position'
        await update.message.reply_text("–î–æ–ª–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞:")
    elif awaiting == 'position':
        session['position'] = text
        session['awaiting'] = 'requisites'
        await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ (PDF/JPG/PNG –¥–æ 5 –ú–ë) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç':")
    elif awaiting == 'requisites':
        # –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ '–Ω–µ—Ç' ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if text.lower() == '–Ω–µ—Ç':
            session['requisites_file_id'] = None
            session['awaiting'] = None
            await finalize_and_submit_order(update, context, session)
            return
        # –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
        if update.message.document:
            doc = update.message.document
            session['requisites_file_id'] = (doc.file_id, doc.file_name)
            session['awaiting'] = None
            await update.message.reply_text("–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞—è–≤–∫—É...")
            await finalize_and_submit_order(update, context, session)
            return
        else:
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å.")
    elif awaiting == 'text_for_spot':
        if len(text) > 500:
            await update.message.reply_text("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 500 –∑–Ω–∞–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        session['text_for_spot'] = text
        session['awaiting'] = None
        await update.message.reply_text("–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ' –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
    else:
        # –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥
        await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–≤–æ–¥...")

# 8. –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏
async def finalize_and_submit_order(update: Update, context: ContextTypes.DEFAULT_TYPE, session=None):
    user_id = update.effective_user.id
    if session is None:
        session = user_sessions.get(user_id, {})
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
    order_id = gen_order_id()
    order_info = {
        "order_id": order_id,
        "client_name": session.get('contact_name'),
        "phone": session.get('phone'),
        "email": session.get('email'),
        "company": session.get('company'),
        "stations": [s['name'] for s in stations if s['id'] in session.get('selected_stations', [])],
        "slots": session.get('selected_slots', []),
        "rubric": next((r['title'] for r in rubrics if r['key'] == session.get('selected_rubric')), None),
        "days": session.get('campaign_days'),
        "spots_per_day": session.get('spots_per_day'),
        "total_cost": calc_total_cost(session)
    }
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    orders_store.setdefault(user_id, []).append(order_info)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    pdf_bio = generate_order_pdf(order_info)
    pdf_name = f"{order_id}_proposal.pdf"
    input_file = InputFile(pdf_bio, filename=pdf_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_document(input_file, caption=f"üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî {order_id}")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–π —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–¥–∞ —Ç–æ–∂–µ
    if MANAGER_CHAT_ID:
        try:
            await context.bot.send_document(int(MANAGER_CHAT_ID), input_file, caption=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {order_id} –æ—Ç {order_info.get('client_name')}")
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –º–µ–Ω–µ–¥–∂–µ—Ä—É: %s", e)

    # –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞"
    start_date = (datetime.date.today() + datetime.timedelta(days=1)).strftime("%d.%m.%Y")
    msg = (
        "‚úÖ –ó–ê–Ø–í–ö–ê –ü–†–ò–ù–Ø–¢–ê!\n\n"
        f"üìã ‚Ññ –∑–∞—è–≤–∫–∏: {order_id}\n"
        f"üìÖ –°—Ç–∞—Ä—Ç: {start_date}\n"
        f"üí∞ –°—É–º–º–∞: {round(order_info['total_cost']):,}‚ÇΩ\n\n"
        f"üìß PDF-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º –≤ Telegram\n\n"
        f"üë§ –í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n\n"
        "üìû +7 (34535) 5-01-51\n"
        "‚úâÔ∏è aa@ya-radio.ru\n\n"
        "üöÄ –ß–¢–û –î–ê–õ–¨–®–ï:\n"
        "‚Ä¢ –°–µ–≥–æ–¥–Ω—è: —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π\n"
        "‚Ä¢ –ó–∞–≤—Ç—Ä–∞: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–æ–ª–∏–∫–æ–≤\n"
        f"‚Ä¢ {start_date}: –∑–∞–ø—É—Å–∫ —Ä–µ–∫–ª–∞–º—ã"
    )
    keyboard = [
        [KeyboardButton("–í –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢"), KeyboardButton("–ù–û–í–´–ô –ó–ê–ö–ê–ó")]
    ]
    await update.message.reply_text(msg, reply_markup=ReplyKeyboardMarkup([['–í –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢', '–ù–û–í–´–ô –ó–ê–ö–ê–ó']], resize_keyboard=True))

# –ú–æ–∏ –∑–∞–∫–∞–∑—ã
async def show_my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    arr = orders_store.get(user_id, [])
    if not arr:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    text = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
    for o in arr:
        text += f"‚Ä¢ {o['order_id']} ‚Äî {round(o['total_cost']):,}‚ÇΩ ‚Äî —Å—Ç–∞—Ä—Ç { (datetime.date.today()+datetime.timedelta(days=1)).strftime('%d.%m.%Y') }\n"
    await update.message.reply_text(text)

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìä *YA-RADIO ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ö–≤–∞—Ç–∞*\n\n"
        "üèôÔ∏è –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫ –∏ —Ä–∞–π–æ–Ω ‚Äî –Ω–∞—Å–µ–ª–µ–Ω–∏–µ ~52 000, –æ—Ö–≤–∞—Ç ~11 700/–¥–µ–Ω—å\n"
        "üèòÔ∏è –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫ –∏ —Ä–∞–π–æ–Ω ‚Äî –Ω–∞—Å–µ–ª–µ–Ω–∏–µ ~46 500, –æ—Ö–≤–∞—Ç ~6 800/–¥–µ–Ω—å\n\n"
        "üìà –°—É—Ç–æ—á–Ω—ã–π –æ—Ö–≤–∞—Ç: 18 500+ —á–µ–ª.\n"
        "üë• –ú–µ—Å—è—á–Ω—ã–π –æ—Ö–≤–∞—Ç: 156 000+ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n"
        "üéØ –î–æ–ª—è —Ä—ã–Ω–∫–∞: 52%\n"
    )
    await update.message.reply_text(text, parse_mode='Markdown')

async def show_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ÑπÔ∏è *YA-RADIO ‚Äî –û –Ω–∞—Å*\n\n"
        "–†–∞–¥–∏–æ –¢—é–º–µ–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ ‚Äî –≤–µ–¥—É—â–∏–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ—â–∞—Ç–µ–ª—å.\n"
        "–ú—ã –ø–æ–º–æ–≥–∞–µ–º –¥–µ–ª–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Å —É—á—ë—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏."
    )
    await update.message.reply_text(text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã/–ø—Ä–æ—á–µ–µ
async def cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await start(update, context)

# ========== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ==========
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    # –¢–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    # Files & text when in constructor/contact flow
    app.add_handler(MessageHandler(filters.Document.ALL | filters.AUDIO | filters.VOICE | filters.TEXT & ~filters.COMMAND, handle_incoming_file_or_text))
    # CallbackQuery
    app.add_handler(CallbackQueryHandler(handle_station_callback, pattern=r"^station_"))
    app.add_handler(CallbackQueryHandler(handle_station_callback, pattern=r"^reset_stations$"))
    app.add_handler(CallbackQueryHandler(handle_station_callback, pattern=r"^next_to_slots$"))

    app.add_handler(CallbackQueryHandler(handle_slot_callback, pattern=r"^slot_"))
    app.add_handler(CallbackQueryHandler(handle_slot_callback, pattern=r"^reset_slots$"))
    app.add_handler(CallbackQueryHandler(handle_slot_callback, pattern=r"^to_rubrics$"))

    app.add_handler(CallbackQueryHandler(handle_rubric_callback, pattern=r"^rubric_"))
    app.add_handler(CallbackQueryHandler(handle_rubric_callback, pattern=r"^to_constructor$"))

    app.add_handler(CallbackQueryHandler(handle_constructor_callbacks, pattern=r"^enter_text$"))
    app.add_handler(CallbackQueryHandler(handle_constructor_callbacks, pattern=r"^to_preview$"))

    app.add_handler(CallbackQueryHandler(handle_preview_callbacks, pattern=r"^(contact_manager|to_contacts|new_calculation)$"))

    app.add_handler(CallbackQueryHandler(cancel_callback, pattern=r"^cancel_contact_form$"))

    # –ü—Ä–æ—á–∏–µ
    app.add_handler(CommandHandler("myorders", show_my_orders))

    logger.info("ü§ñ YA-RADIO bot starting...")
    app.run_polling()

if __name__ == "__main__":
    main()

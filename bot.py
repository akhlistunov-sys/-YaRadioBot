import os
import logging
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import io
import re
import openpyxl
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
MAIN_MENU, RADIO_SELECTION, CAMPAIGN_PERIOD, TIME_SLOTS, BRANDED_SECTIONS, CAMPAIGN_CREATOR, PRODUCTION_OPTION, CONTACT_INFO, CONFIRMATION, FINAL_ACTIONS = range(10)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8281804030:AAEFEYgqigL3bdH4DL0zl1tW71fwwo_8cyU"

# –í–∞—à Telegram ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_TELEGRAM_ID = 174046571  # –¢–≤–æ–π —á–∏—Å–ª–æ–≤–æ–π ID

# –¶–µ–Ω—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
BASE_PRICE_PER_SECOND = 2
MIN_PRODUCTION_COST = 2000
MIN_BUDGET = 7000

TIME_SLOTS_DATA = [
    {"time": "06:00-07:00", "label": "–ü–æ–¥—ä–µ–º, —Å–±–æ—Ä—ã", "premium": True},
    {"time": "07:00-08:00", "label": "–£—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏", "premium": True},
    {"time": "08:00-09:00", "label": "–ü–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ üöÄ", "premium": True},
    {"time": "09:00-10:00", "label": "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã", "premium": True},
    {"time": "10:00-11:00", "label": "–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å", "premium": False},
    {"time": "11:00-12:00", "label": "–ü—Ä–µ–¥–æ–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è", "premium": False},
    {"time": "12:00-13:00", "label": "–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤", "premium": False},
    {"time": "13:00-14:00", "label": "–ü–æ—Å–ª–µ –æ–±–µ–¥–∞", "premium": False},
    {"time": "14:00-15:00", "label": "–í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–Ω—è", "premium": False},
    {"time": "15:00-16:00", "label": "–†–∞–±–æ—á–∏–π —Ñ–∏–Ω–∏—à", "premium": False},
    {"time": "16:00-17:00", "label": "–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", "premium": True},
    {"time": "17:00-18:00", "label": "–í–µ—á–µ—Ä–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏", "premium": True},
    {"time": "18:00-19:00", "label": "–ü–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ üöÄ", "premium": True},
    {"time": "19:00-20:00", "label": "–î–æ–º–∞—à–Ω–∏–π –≤–µ—á–µ—Ä", "premium": True},
    {"time": "20:00-21:00", "label": "–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç–¥—ã—Ö", "premium": True}
]

BRANDED_SECTION_PRICES = {
    'auto': 1.2,      # +20%
    'realty': 1.15,   # +15%
    'medical': 1.25,  # +25%
    'custom': 1.3     # +30%
}

PRODUCTION_OPTIONS = {
    'standard': {'price': 2000, 'name': '–°–¢–ê–ù–î–ê–†–¢–ù–´–ô –†–û–õ–ò–ö', 'desc': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞, –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, 2 –ø—Ä–∞–≤–∫–∏, —Å—Ä–æ–∫: 2-3 –¥–Ω—è'},
    'premium': {'price': 4000, 'name': '–ü–†–ï–ú–ò–£–ú –†–û–õ–ò–ö', 'desc': '–û–∑–≤—É—á–∫–∞ 2-–º—è –≥–æ–ª–æ—Å–∞–º–∏, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –º—É–∑—ã–∫–∞, 5 –ø—Ä–∞–≤–∫–∏, —Å—Ä–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 1 –¥–µ–Ω—å'},
    'ready': {'price': 0, 'name': '–ì–û–¢–û–í–´–ô –†–û–õ–ò–ö', 'desc': '–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π —Ä–æ–ª–∏–∫, –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª–æ–º'}
}

PERIOD_OPTIONS = {
    '15_days': {'days': 15, 'name': '15 –î–ù–ï–ô (–º–∏–Ω–∏–º—É–º)'},
    '30_days': {'days': 30, 'name': '30 –î–ù–ï–ô (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º)'},
    '60_days': {'days': 60, 'name': '60 –î–ù–ï–ô'}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('campaigns.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS campaigns (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                campaign_number TEXT,
                radio_stations TEXT,
                campaign_period TEXT,
                time_slots TEXT,
                branded_section TEXT,
                campaign_text TEXT,
                production_option TEXT,
                contact_name TEXT,
                company TEXT,
                phone TEXT,
                email TEXT,
                base_price INTEGER,
                discount INTEGER,
                final_price INTEGER,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def validate_phone(phone: str) -> bool:
    pattern = r'^(\+7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
    return bool(re.match(pattern, phone))

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
def format_number(num):
    return f"{num:,}".replace(',', ' ')

# –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –æ—Ö–≤–∞—Ç–∞
def calculate_campaign_price_and_reach(user_data):
    try:
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        base_duration = user_data.get('duration', 20)  # —Å–µ–∫—É–Ω–¥
        period_days = user_data.get('campaign_period_days', 30)
        num_stations = len(user_data.get('selected_radios', []))
        selected_time_slots = user_data.get('selected_time_slots', [])
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å
        spots_per_day = len(selected_time_slots) * num_stations
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ñ–∏—Ä–∞
        base_air_cost = base_duration * BASE_PRICE_PER_SECOND * spots_per_day * period_days
        
        # –ù–∞–¥–±–∞–≤–∫–∏ –∑–∞ –ø—Ä–µ–º–∏—É–º-–≤—Ä–µ–º—è (10% –∑–∞ —É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ)
        time_multiplier = 1.0
        for slot_index in selected_time_slots:
            if 0 <= slot_index < len(TIME_SLOTS_DATA):
                slot = TIME_SLOTS_DATA[slot_index]
                if slot['premium']:
                    time_multiplier = max(time_multiplier, 1.1)  # 10% –Ω–∞—Ü–µ–Ω–∫–∞
        
        # –ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ —Ä—É–±—Ä–∏–∫—É
        branded_multiplier = 1.0
        branded_section = user_data.get('branded_section')
        if branded_section in BRANDED_SECTION_PRICES:
            branded_multiplier = BRANDED_SECTION_PRICES[branded_section]
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        production_cost = user_data.get('production_cost', 0)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—ç—Ñ–∏—Ä + –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)
        air_cost = int(base_air_cost * time_multiplier * branded_multiplier)
        base_price = air_cost + production_cost
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É 50%
        discount = int(base_price * 0.5)
        discounted_price = base_price - discount
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç
        final_price = max(discounted_price, MIN_BUDGET)
        
        # –†–∞—Å—á–µ—Ç –æ—Ö–≤–∞—Ç–∞
        daily_listeners = sum({
            'LOVE RADIO': 1600,
            '–ê–í–¢–û–†–ê–î–ò–û': 1400,
            '–†–ê–î–ò–û –î–ê–ß–ê': 1800,
            '–†–ê–î–ò–û –®–ê–ù–°–û–ù': 1200,
            '–†–ï–¢–†–û FM': 1500,
            '–Æ–ú–û–† FM': 1100
        }.get(radio, 0) for radio in user_data.get('selected_radios', []))
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 30% —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)
        unique_daily_reach = int(daily_listeners * 0.7)
        total_reach = unique_daily_reach * period_days
        
        return base_price, discount, final_price, total_reach, daily_listeners, spots_per_day
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        return 0, 0, 0, 0, 0, 0

def get_branded_section_name(section):
    names = {
        'auto': '–ê–≤—Ç–æ—Ä—É–±—Ä–∏–∫–∏ (+20%)',
        'realty': '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (+15%)',
        'medical': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä—É–±—Ä–∏–∫–∏ (+25%)',
        'custom': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä—É–±—Ä–∏–∫–∞ (+30%)'
    }
    return names.get(section, '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')

# –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
def create_excel_file(user_data, campaign_number):
    try:
        base_price, discount, final_price, total_reach, daily_listeners, spots_per_day = calculate_campaign_price_and_reach(user_data)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
        wb = Workbook()
        ws = wb.active
        ws.title = f"–ú–µ–¥–∏–∞–ø–ª–∞–Ω {campaign_number}"
        
        # –°—Ç–∏–ª–∏
        header_font = Font(bold=True, size=14, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        title_font = Font(bold=True, size=12)
        border = Border(left=Side(style='thin'), right=Side(style='thin'), 
                       top=Side(style='thin'), bottom=Side(style='thin'))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws.merge_cells('A1:F1')
        ws['A1'] = f"–ú–ï–î–ò–ê–ü–õ–ê–ù –ö–ê–ú–ü–ê–ù–ò–ò #{campaign_number}"
        ws['A1'].font = header_font
        ws['A1'].fill = header_fill
        ws['A1'].alignment = Alignment(horizontal='center')
        
        ws.merge_cells('A2:F2')
        ws['A2'] = "–†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò"
        ws['A2'].font = Font(bold=True, size=12, color="366092")
        ws['A2'].alignment = Alignment(horizontal='center')
        
        # –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        ws.merge_cells('A4:F4')
        ws['A4'] = "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
        ws['A4'].font = Font(bold=True, size=11)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–ø–∞–Ω–∏–∏
        ws['A6'] = "üìä –ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ú–ü–ê–ù–ò–ò:"
        ws['A6'].font = title_font
        
        params = [
            f"–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏: {', '.join(user_data.get('selected_radios', []))}",
            f"–ü–µ—Ä–∏–æ–¥: {user_data.get('campaign_period_days', 30)} –¥–Ω–µ–π",
            f"–í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {spots_per_day}",
            f"–í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {spots_per_day * user_data.get('campaign_period_days', 30)}",
            f"–•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ —Ä–æ–ª–∏–∫–∞: {user_data.get('duration', 20)} —Å–µ–∫",
            f"–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä—É–±—Ä–∏–∫–∞: {get_branded_section_name(user_data.get('branded_section'))}",
            f"–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: {PRODUCTION_OPTIONS.get(user_data.get('production_option', 'ready'), {}).get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')}"
        ]
        
        for i, param in enumerate(params, 7):
            ws[f'A{i}'] = f"‚Ä¢ {param}"
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è–º
        ws['A15'] = "üìª –í–´–ë–†–ê–ù–ù–´–ï –†–ê–î–ò–û–°–¢–ê–ù–¶–ò–ò:"
        ws['A15'].font = title_font
        
        station_listeners = {
            'LOVE RADIO': 1600,
            '–ê–í–¢–û–†–ê–î–ò–û': 1400,
            '–†–ê–î–ò–û –î–ê–ß–ê': 1800,
            '–†–ê–î–ò–û –®–ê–ù–°–û–ù': 1200,
            '–†–ï–¢–†–û FM': 1500,
            '–Æ–ú–û–† FM': 1100
        }
        
        row = 16
        total_listeners = 0
        for radio in user_data.get('selected_radios', []):
            listeners = station_listeners.get(radio, 0)
            total_listeners += listeners
            ws[f'A{row}'] = f"‚Ä¢ {radio}: {format_number(listeners)} —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å"
            row += 1
        
        ws[f'A{row}'] = f"‚Ä¢ –ò–¢–û–ì–û: {format_number(total_listeners)} —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å"
        ws[f'A{row}'].font = Font(bold=True)
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º
        row += 2
        ws[f'A{row}'] = "üïí –í–´–ë–†–ê–ù–ù–´–ï –í–†–ï–ú–ï–ù–ù–´–ï –°–õ–û–¢–´:"
        ws[f'A{row}'].font = title_font
        
        row += 1
        for slot_index in user_data.get('selected_time_slots', []):
            if 0 <= slot_index < len(TIME_SLOTS_DATA):
                slot = TIME_SLOTS_DATA[slot_index]
                premium = "‚úÖ" if slot['premium'] else "‚ùå"
                ws[f'A{row}'] = f"‚Ä¢ {slot['time']} - {slot['label']} (–ü—Ä–µ–º–∏—É–º: {premium})"
                row += 1
        
        # –û—Ö–≤–∞—Ç –∫–∞–º–ø–∞–Ω–∏–∏
        row += 1
        ws[f'A{row}'] = "üéØ –†–ê–°–ß–ï–¢–ù–´–ô –û–•–í–ê–¢:"
        ws[f'A{row}'].font = title_font
        
        row += 1
        ws[f'A{row}'] = f"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ö–≤–∞—Ç: ~{format_number(daily_listeners)} —á–µ–ª–æ–≤–µ–∫"
        row += 1
        ws[f'A{row}'] = f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç –≤ –¥–µ–Ω—å: ~{format_number(int(daily_listeners * 0.7))} —á–µ–ª–æ–≤–µ–∫"
        row += 1
        ws[f'A{row}'] = f"‚Ä¢ –û–±—â–∏–π –æ—Ö–≤–∞—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: ~{format_number(total_reach)} —á–µ–ª–æ–≤–µ–∫"
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        row += 2
        ws[f'A{row}'] = "üí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:"
        ws[f'A{row}'].font = title_font
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        financial_data = [
            ['–ü–æ–∑–∏—Ü–∏—è', '–°—É–º–º–∞ (‚ÇΩ)'],
            ['–≠—Ñ–∏—Ä–Ω–æ–µ –≤—Ä–µ–º—è', base_price - user_data.get('production_cost', 0)],
            ['–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ä–æ–ª–∏–∫–∞', user_data.get('production_cost', 0)],
            ['', ''],
            ['–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', base_price],
            ['–°–∫–∏–¥–∫–∞ 50%', -discount],
            ['', ''],
            ['–ò–¢–û–ì–û', final_price]
        ]
        
        for i, (item, value) in enumerate(financial_data, row + 1):
            ws[f'A{i}'] = item
            if isinstance(value, int):
                ws[f'B{i}'] = value
                if item == '–ò–¢–û–ì–û':
                    ws[f'B{i}'].font = Font(bold=True, color="FF0000")
                elif item == '–°–∫–∏–¥–∫–∞ 50%':
                    ws[f'B{i}'].font = Font(color="00FF00")
            else:
                ws[f'B{i}'] = value
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        row = i + 3
        ws[f'A{row}'] = "üë§ –í–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´:"
        ws[f'A{row}'].font = title_font
        
        contacts = [
            f"–ò–º—è: {user_data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
            f"Email: {user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
            f"–ö–æ–º–ø–∞–Ω–∏—è: {user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
        ]
        
        for i, contact in enumerate(contacts, row + 1):
            ws[f'A{i}'] = f"‚Ä¢ {contact}"
        
        # –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏
        row = i + 2
        ws[f'A{row}'] = "üìû –ù–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´:"
        ws[f'A{row}'].font = title_font
        ws[f'A{row + 1}'] = "‚Ä¢ Email: a.khlistunov@gmail.com"
        ws[f'A{row + 2}'] = "‚Ä¢ Telegram: t.me/AlexeyKhlistunov"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        row = row + 4
        ws[f'A{row}'] = "üéØ –°–¢–ê–†–¢ –ö–ê–ú–ü–ê–ù–ò–ò:"
        ws[f'A{row}'].font = title_font
        ws[f'A{row + 1}'] = "–í —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        
        # –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        row = row + 3
        ws[f'A{row}'] = f"üìÖ –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 45
        ws.column_dimensions['B'].width = 15
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫ —Ç–∞–±–ª–∏—Ü–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        table_start = financial_start = row - len(financial_data) - 1
        table_end = table_start + len(financial_data) - 1
        for row_num in range(table_start, table_end + 1):
            for col in ['A', 'B']:
                ws[f'{col}{row_num}'].border = border
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buffer = io.BytesIO()
        wb.save(buffer)
        buffer.seek(0)
        
        logger.info(f"Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}")
        return buffer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel: {e}")
        return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ Excel —Ñ–∞–π–ª–∞
async def send_excel_file(update: Update, context: ContextTypes.DEFAULT_TYPE, campaign_number: str):
    try:
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        excel_buffer = create_excel_file(context.user_data, campaign_number)
        
        if not excel_buffer:
            return False
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
        if hasattr(update, 'message') and update.message:
            await update.message.reply_document(
                document=excel_buffer,
                filename=f"mediaplan_{campaign_number}.xlsx",
                caption=f"üìä –í–∞—à –º–µ–¥–∏–∞–ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}"
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ callback query
            await update.callback_query.message.reply_document(
                document=excel_buffer,
                filename=f"mediaplan_{campaign_number}.xlsx",
                caption=f"üìä –í–∞—à –º–µ–¥–∏–∞–ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}"
            )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel: {e}")
        return False

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
async def send_admin_notification(context, user_data, campaign_number):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        base_price, discount, final_price, total_reach, daily_listeners, spots_per_day = calculate_campaign_price_and_reach(user_data)
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è–º
        stations_text = ""
        station_listeners = {
            'LOVE RADIO': 1600,
            '–ê–í–¢–û–†–ê–î–ò–û': 1400,
            '–†–ê–î–ò–û –î–ê–ß–ê': 1800,
            '–†–ê–î–ò–û –®–ê–ù–°–û–ù': 1200,
            '–†–ï–¢–†–û FM': 1500,
            '–Æ–ú–û–† FM': 1100
        }
        
        for radio in user_data.get('selected_radios', []):
            listeners = station_listeners.get(radio, 0)
            stations_text += f"‚Ä¢ {radio}: {format_number(listeners)}/–¥–µ–Ω—å\n"
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–ª–æ—Ç–∞–º
        slots_text = ""
        for slot_index in user_data.get('selected_time_slots', []):
            if 0 <= slot_index < len(TIME_SLOTS_DATA):
                slot = TIME_SLOTS_DATA[slot_index]
                premium = "‚úÖ" if slot['premium'] else "‚ùå"
                slots_text += f"‚Ä¢ {slot['time']} - {slot['label']} (–ü—Ä–µ–º–∏—É–º: {premium})\n"
        
        notification_text = f"""
üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{campaign_number}

üë§ –ö–õ–ò–ï–ù–¢:
–ò–º—è: {user_data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
Email: {user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
–ö–æ–º–ø–∞–Ω–∏—è: {user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üìä –†–ê–î–ò–û–°–¢–ê–ù–¶–ò–ò:
{stations_text}
üìÖ –ü–ï–†–ò–û–î: {user_data.get('campaign_period_days', 30)} –¥–Ω–µ–π
üïí –°–õ–û–¢–´ ({len(user_data.get('selected_time_slots', []))} –≤—ã–±—Ä–∞–Ω–æ):
{slots_text}
üéôÔ∏è –†–£–ë–†–ò–ö–ê: {get_branded_section_name(user_data.get('branded_section'))}
‚è±Ô∏è –†–û–õ–ò–ö: {PRODUCTION_OPTIONS.get(user_data.get('production_option', 'ready'), {}).get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')}
üìè –•–†–û–ù–û–ú–ï–¢–†–ê–ñ: {user_data.get('duration', 20)} —Å–µ–∫

üí∞ –°–¢–û–ò–ú–û–°–¢–¨:
–ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ
–°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ
–ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ

üéØ –û–•–í–ê–¢:
‚Ä¢ –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {spots_per_day}
‚Ä¢ –í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤: {spots_per_day * user_data.get('campaign_period_days', 30)}
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: ~{format_number(daily_listeners)} —á–µ–ª.
‚Ä¢ –ó–∞ –ø–µ—Ä–∏–æ–¥: ~{format_number(total_reach)} —á–µ–ª.
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [
                InlineKeyboardButton("üìä –°–§–û–†–ú–ò–†–û–í–ê–¢–¨ EXCEL", callback_data=f"generate_excel_{campaign_number}"),
            ],
            [
                InlineKeyboardButton(f"üìû {user_data.get('phone', '–¢–µ–ª–µ—Ñ–æ–Ω')}", callback_data=f"call_{user_data.get('phone', '')}"),
                InlineKeyboardButton(f"‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"email_{user_data.get('email', '')}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            chat_id=ADMIN_TELEGRAM_ID,
            text=notification_text,
            reply_markup=reply_markup
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        return False

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –°–û–ó–î–ê–¢–¨ –ö–ê–ú–ü–ê–ù–ò–Æ", callback_data="create_campaign")],
        [InlineKeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–•–í–ê–¢–ê", callback_data="statistics")],
        [InlineKeyboardButton("üìã –ú–û–ò –ó–ê–ö–ê–ó–´", callback_data="my_orders")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ù–ê–°", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üéôÔ∏è –†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò\n"
        "üìç –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫ ‚Ä¢ –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫\n"
        "üìç –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è +35 –∫–º –≤–æ–∫—Ä—É–≥ –≥–æ—Ä–æ–¥–æ–≤\n\n"
        "üìä –û—Ö–≤–∞—Ç: 9,200+ –≤ –¥–µ–Ω—å\n"
        "üë• –û—Ö–≤–∞—Ç: 68,000+ –≤ –º–µ—Å—è—Ü\n\n"
        "üéØ 52% –¥–æ–ª—è –º–µ—Å—Ç–Ω–æ–≥–æ —Ä–∞–¥–∏–æ—Ä—ã–Ω–∫–∞\n"
        "üí∞ 2‚ÇΩ/—Å–µ–∫ –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞"
    )
    
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    return MAIN_MENU

# –®–∞–≥ 1: –í—ã–±–æ—Ä —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π
async def radio_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_radios = context.user_data.get('selected_radios', [])
    total_listeners = sum({
        'LOVE RADIO': 1600,
        '–ê–í–¢–û–†–ê–î–ò–û': 1400,
        '–†–ê–î–ò–û –î–ê–ß–ê': 1800,
        '–†–ê–î–ò–û –®–ê–ù–°–û–ù': 1200,
        '–†–ï–¢–†–û FM': 1500,
        '–Æ–ú–û–† FM': 1100
    }.get(radio, 0) for radio in selected_radios)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏
    keyboard = []
    radio_stations = [
        ("LOVE RADIO", "radio_love", 1600),
        ("–ê–í–¢–û–†–ê–î–ò–û", "radio_auto", 1400),
        ("–†–ê–î–ò–û –î–ê–ß–ê", "radio_dacha", 1800), 
        ("–†–ê–î–ò–û –®–ê–ù–°–û–ù", "radio_chanson", 1200),
        ("–†–ï–¢–†–û FM", "radio_retro", 1500),
        ("–Æ–ú–û–† FM", "radio_humor", 1100)
    ]
    
    for name, callback, listeners in radio_stations:
        emoji = "‚úÖ" if name in selected_radios else "‚ö™"
        button_text = f"{emoji} {name} ({format_number(listeners)} —á/–¥–µ–Ω—å)"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback)])
        keyboard.append([InlineKeyboardButton("üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{callback}")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_main")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_campaign_period")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"–í—ã–±–æ—Ä —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π\n\n"
        f"{'‚úÖ' if 'LOVE RADIO' in selected_radios else '‚ö™'} LOVE RADIO\n"
        f"üë• 1,600 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë© –ú–æ–ª–æ–¥—ë–∂—å 18-35 –ª–µ—Ç\n\n"
        f"{'‚úÖ' if '–ê–í–¢–û–†–ê–î–ò–û' in selected_radios else '‚ö™'} –ê–í–¢–û–†–ê–î–ò–û\n"
        f"üë• 1,400 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë® –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç—ã 25-50 –ª–µ—Ç\n\n"
        f"{'‚úÖ' if '–†–ê–î–ò–û –î–ê–ß–ê' in selected_radios else '‚ö™'} –†–ê–î–ò–û –î–ê–ß–ê\n"
        f"üë• 1,800 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë®üë© –°–µ–º—å—è 35-65 –ª–µ—Ç\n\n"
        f"{'‚úÖ' if '–†–ê–î–ò–û –®–ê–ù–°–û–ù' in selected_radios else '‚ö™'} –†–ê–î–ò–û –®–ê–ù–°–û–ù\n"
        f"üë• 1,200 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë® –ú—É–∂—á–∏–Ω—ã 30-60 –ª–µ—Ç\n\n"
        f"{'‚úÖ' if '–†–ï–¢–†–û FM' in selected_radios else '‚ö™'} –†–ï–¢–†–û FM\n"
        f"üë• 1,500 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë¥üëµ –¶–µ–Ω–∏—Ç–µ–ª–∏ —Ö–∏—Ç–æ–≤ 30-55 –ª–µ—Ç\n\n"
        f"{'‚úÖ' if '–Æ–ú–û–† FM' in selected_radios else '‚ö™'} –Æ–ú–û–† FM\n"
        f"üë• 1,100 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\nüë¶üëß –°–ª—É—à–∞—Ç–µ–ª–∏ 25-45 –ª–µ—Ç\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_radios)} —Å—Ç–∞–Ω—Ü–∏–∏ ‚Ä¢ {format_number(total_listeners)} —Å–ª—É—à–∞—Ç–µ–ª–µ–π\n"
        f"[ –î–ê–õ–ï–ï ]"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return RADIO_SELECTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π
async def handle_radio_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_main":
        return await start(update, context)
    
    elif query.data.startswith("details_"):
        station_data = {
            'details_radio_love': "LOVE RADIO - 1,600 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\n‚Ä¢ –ú–æ–ª–æ–¥—ë–∂—å 18-35 –ª–µ—Ç (65%)\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ, —Å–ª–µ–¥—è—Ç –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏\n‚Ä¢ –ú—É–∑—ã–∫–∞: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∏—Ç—ã\n‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã",
            'details_radio_auto': "–ê–í–¢–û–†–ê–î–ò–û - 1,400 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\n‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç—ã 25-50 –ª–µ—Ç (70%)\n‚Ä¢ –î–æ—Ä–æ–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –ø—Ä–æ–±–∫–∏\n‚Ä¢ –ú—É–∑—ã–∫–∞: —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏ –∑–∞—Ä—É–±–µ–∂–Ω—ã–µ —Ö–∏—Ç—ã\n‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –¥–æ—Ä–æ–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç",
            'details_radio_dacha': "–†–ê–î–ò–û –î–ê–ß–ê - 1,800 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\n‚Ä¢ –°–µ–º—å—è 35-65 –ª–µ—Ç (60% –∂–µ–Ω—â–∏–Ω—ã)\n‚Ä¢ –°–µ–º–µ–π–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏, –¥–∞—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n‚Ä¢ –ú—É–∑—ã–∫–∞: —Ä–æ—Å—Å–∏–π—Å–∫–∞—è —ç—Å—Ç—Ä–∞–¥–∞, —Ä–µ—Ç—Ä–æ\n‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: —É—Ç—Ä–µ–Ω–Ω–∏–µ —à–æ—É, –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã",
            'details_radio_chanson': "–†–ê–î–ò–û –®–ê–ù–°–û–ù - 1,200 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\n‚Ä¢ –ú—É–∂—á–∏–Ω—ã 30-60 –ª–µ—Ç (75%)\n‚Ä¢ –î—Ä–∞–π–≤ –∏ –¥—É—à–µ–≤–Ω–æ—Å—Ç—å\n‚Ä¢ –ú—É–∑—ã–∫–∞: —à–∞–Ω—Å–æ–Ω, –∞–≤—Ç–æ—Ä—Å–∫–∞—è –ø–µ—Å–Ω—è\n‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Å–µ–Ω, –≥–æ—Å—Ç–µ–≤—ã–µ —ç—Ñ–∏—Ä—ã",
            'details_radio_retro': "–†–ï–¢–†–û FM - 1,500 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\n‚Ä¢ –¶–µ–Ω–∏—Ç–µ–ª–∏ —Ö–∏—Ç–æ–≤ 30-55 –ª–µ—Ç\n‚Ä¢ –ù–æ—Å—Ç–∞–ª—å–≥–∏—è –ø–æ 80-90-–º\n‚Ä¢ –ú—É–∑—ã–∫–∞: —Ö–∏—Ç—ã 80-90-—Ö –≥–æ–¥–æ–≤\n‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏",
            'details_radio_humor': "–Æ–ú–û–† FM - 1,100 —Å–ª—É—à–∞—Ç–µ–ª–µ–π/–¥–µ–Ω—å\n‚Ä¢ –°–ª—É—à–∞—Ç–µ–ª–∏ 25-45 –ª–µ—Ç\n‚Ä¢ –õ—ë–≥–∫–∏–π —é–º–æ—Ä –∏ –ø–æ–∑–∏—Ç–∏–≤\n‚Ä¢ –ú—É–∑—ã–∫–∞: —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —à–æ—É, –∫–æ–º–µ–¥–∏–∏\n‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
        }
        
        station_info = station_data.get(query.data, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–Ω—Ü–∏–∏")
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_radio")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(station_info, reply_markup=reply_markup)
        return RADIO_SELECTION
    
    radio_data = {
        'radio_love': 'LOVE RADIO',
        'radio_auto': '–ê–í–¢–û–†–ê–î–ò–û', 
        'radio_dacha': '–†–ê–î–ò–û –î–ê–ß–ê',
        'radio_chanson': '–†–ê–î–ò–û –®–ê–ù–°–û–ù',
        'radio_retro': '–†–ï–¢–†–û FM',
        'radio_humor': '–Æ–ú–û–† FM'
    }
    
    if query.data in radio_data:
        radio_name = radio_data[query.data]
        selected_radios = context.user_data.get('selected_radios', [])
        
        if radio_name in selected_radios:
            selected_radios.remove(radio_name)
        else:
            selected_radios.append(radio_name)
        
        context.user_data['selected_radios'] = selected_radios
        return await radio_selection(update, context)
    
    elif query.data == "to_campaign_period":
        if not context.user_data.get('selected_radios'):
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é!", show_alert=True)
            return RADIO_SELECTION
        return await campaign_period(update, context)
    
    elif query.data == "back_to_radio":
        return await radio_selection(update, context)
    
    return RADIO_SELECTION

# –®–∞–≥ 2: –ü–µ—Ä–∏–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏
async def campaign_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_period = context.user_data.get('campaign_period')
    selected_radios = context.user_data.get('selected_radios', [])
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏—è—Ö
    stations_info = "üìª –í–´–ë–†–ê–ù–´ –°–¢–ê–ù–¶–ò–ò:\n"
    station_listeners = {
        'LOVE RADIO': 1600,
        '–ê–í–¢–û–†–ê–î–ò–û': 1400,
        '–†–ê–î–ò–û –î–ê–ß–ê': 1800,
        '–†–ê–î–ò–û –®–ê–ù–°–û–ù': 1200,
        '–†–ï–¢–†–û FM': 1500,
        '–Æ–ú–û–† FM': 1100
    }
    
    for radio in selected_radios:
        listeners = station_listeners.get(radio, 0)
        stations_info += f"‚Ä¢ {radio} ({format_number(listeners)} —á/–¥–µ–Ω—å)\n"
    
    keyboard = []
    for key, option in PERIOD_OPTIONS.items():
        is_selected = "‚úÖ" if selected_period == key else "‚ö™"
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        base_cost = 750 * option['days'] * len(selected_radios)
        discounted_cost = base_cost * 0.5
        keyboard.append([
            InlineKeyboardButton(
                f"{is_selected} {option['name']} - {format_number(int(discounted_cost))}‚ÇΩ", 
                callback_data=f"period_{key}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_radio")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_time_slots")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"–ü–µ—Ä–∏–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏\n\n"
        f"{stations_info}\n"
        f"üìÖ –í–´–ë–ï–†–ò–¢–ï –ü–ï–†–ò–û–î –ö–ê–ú–ü–ê–ù–ò–ò:\n\n"
        f"üéØ –°—Ç–∞—Ä—Ç –∫–∞–º–ø–∞–Ω–∏–∏: –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        f"‚è±Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 15 –¥–Ω–µ–π\n\n"
        f"–¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π 50%"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return CAMPAIGN_PERIOD

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
async def handle_campaign_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_radio":
        return await radio_selection(update, context)
    
    elif query.data.startswith("period_"):
        period_key = query.data.replace("period_", "")
        if period_key in PERIOD_OPTIONS:
            context.user_data['campaign_period'] = period_key
            context.user_data['campaign_period_days'] = PERIOD_OPTIONS[period_key]['days']
            return await campaign_period(update, context)
    
    elif query.data == "to_time_slots":
        if not context.user_data.get('campaign_period'):
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏!", show_alert=True)
            return CAMPAIGN_PERIOD
        return await time_slots(update, context)
    
    return CAMPAIGN_PERIOD

# –®–∞–≥ 3: –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
async def time_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_slots = context.user_data.get('selected_time_slots', [])
    selected_radios = context.user_data.get('selected_radios', [])
    period_days = context.user_data.get('campaign_period_days', 30)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    keyboard.append([InlineKeyboardButton("‚úÖ –í–´–ë–†–ê–¢–¨ –í–°–ï –°–õ–û–¢–´", callback_data="select_all_slots")])
    
    # –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ—Ç—ã
    keyboard.append([InlineKeyboardButton("üåÖ –£–¢–†–ï–ù–ù–ò–ï –°–õ–û–¢–´ (+10%)", callback_data="header_morning")])
    for i in range(4):
        slot = TIME_SLOTS_DATA[i]
        emoji = "‚úÖ" if i in selected_slots else "‚ö™"
        button_text = f"{emoji} {slot['time']} ‚Ä¢ {slot['label']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"time_{i}")])
    
    # –î–Ω–µ–≤–Ω—ã–µ —Å–ª–æ—Ç—ã
    keyboard.append([InlineKeyboardButton("‚òÄÔ∏è –î–ù–ï–í–ù–´–ï –°–õ–û–¢–´", callback_data="header_day")])
    for i in range(4, 10):
        slot = TIME_SLOTS_DATA[i]
        emoji = "‚úÖ" if i in selected_slots else "‚ö™"
        button_text = f"{emoji} {slot['time']} ‚Ä¢ {slot['label']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"time_{i}")])
    
    # –í–µ—á–µ—Ä–Ω–∏–µ —Å–ª–æ—Ç—ã
    keyboard.append([InlineKeyboardButton("üåá –í–ï–ß–ï–†–ù–ò–ï –°–õ–û–¢–´ (+10%)", callback_data="header_evening")])
    for i in range(10, 15):
        slot = TIME_SLOTS_DATA[i]
        emoji = "‚úÖ" if i in selected_slots else "‚ö™"
        button_text = f"{emoji} {slot['time']} ‚Ä¢ {slot['label']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"time_{i}")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_period")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_branded_sections")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    total_slots = len(selected_slots)
    total_outputs_per_day = total_slots * len(selected_radios)
    total_outputs_period = total_outputs_per_day * period_days
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    stations_text = "üìª –í–´–ë–†–ê–ù–´ –°–¢–ê–ù–¶–ò–ò:\n" + "\n".join([f"‚Ä¢ {radio}" for radio in selected_radios])
    
    text = (
        f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã\n\n"
        f"{stations_text}\n"
        f"üìÖ –ü–ï–†–ò–û–î –ö–ê–ú–ü–ê–ù–ò–ò: {period_days} –¥–Ω–µ–π\n\n"
        f"üïí –í–´–ë–ï–†–ò–¢–ï –í–†–ï–ú–Ø –í–´–•–û–î–ê –†–û–õ–ò–ö–û–í\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞:\n"
        f"‚Ä¢ –í—ã–±—Ä–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: {total_slots}\n"
        f"‚Ä¢ –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –≤—Å–µ—Ö —Ä–∞–¥–∏–æ: {total_outputs_per_day}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {format_number(total_outputs_period)}\n\n"
        f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã\n"
        f"[ –î–ê–õ–ï–ï ]"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return TIME_SLOTS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
async def handle_time_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_period":
        return await campaign_period(update, context)
    
    elif query.data == "select_all_slots":
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ 15 —Å–ª–æ—Ç–æ–≤
        context.user_data['selected_time_slots'] = list(range(15))
        return await time_slots(update, context)
    
    elif query.data.startswith("time_"):
        slot_index = int(query.data.split("_")[1])
        selected_slots = context.user_data.get('selected_time_slots', [])
        
        if slot_index in selected_slots:
            selected_slots.remove(slot_index)
        else:
            selected_slots.append(slot_index)
        
        context.user_data['selected_time_slots'] = selected_slots
        return await time_slots(update, context)
    
    elif query.data == "to_branded_sections":
        if not context.user_data.get('selected_time_slots'):
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç!", show_alert=True)
            return TIME_SLOTS
        return await branded_sections(update, context)
    
    return TIME_SLOTS

# –®–∞–≥ 4: –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏
async def branded_sections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_branded = context.user_data.get('branded_section')
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ê–í–¢–û–†–£–ë–†–ò–ö–ò" if selected_branded == 'auto' else "‚ö™ –ê–í–¢–û–†–£–ë–†–ò–ö–ò", callback_data="branded_auto")],
        [InlineKeyboardButton("‚úÖ –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨" if selected_branded == 'realty' else "‚ö™ –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨", callback_data="branded_realty")],
        [InlineKeyboardButton("‚úÖ –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï" if selected_branded == 'medical' else "‚ö™ –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï", callback_data="branded_medical")],
        [InlineKeyboardButton("‚úÖ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø" if selected_branded == 'custom' else "‚ö™ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø", callback_data="branded_custom")],
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä", callback_data="show_example")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_time")],
        [InlineKeyboardButton("‚è© –ü–†–û–ü–£–°–¢–ò–¢–¨", callback_data="skip_branded")],
        [InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_campaign_creator")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏\n\n"
        "üéôÔ∏è –í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –†–£–ë–†–ò–ö–ò:\n\n"
        f"{'‚úÖ' if selected_branded == 'auto' else '‚ö™'} –ê–í–¢–û–†–£–ë–†–ò–ö–ò\n"
        "–ì–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤\n"
        "\"30 —Å–µ–∫—É–Ω–¥ –æ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö\"\n"
        "\"30 —Å–µ–∫—É–Ω–¥ –æ–± –ê–≤—Ç–æ–í–ê–ó–µ\"\n"
        "+20% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏\n\n"
        f"{'‚úÖ' if selected_branded == 'realty' else '‚ö™'} –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨\n"
        "–†—É–±—Ä–∏–∫–∏ –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n"
        "\"–°–æ–≤–µ—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\"\n"
        "\"–ü–æ–ª–µ–∑–Ω–æ –∑–Ω–∞—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã\"\n"
        "+15% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏\n\n"
        f"{'‚úÖ' if selected_branded == 'medical' else '‚ö™'} –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –†–£–ë–†–ò–ö–ò\n"
        "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –∫–ª–∏–Ω–∏–∫\n"
        "\"–ó–¥–æ—Ä–æ–≤–æ–µ —Å–µ—Ä–¥–µ\"\n"
        "\"–°–æ–≤–µ—Ç –≤—Ä–∞—á–∞\"\n"
        "+25% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏\n\n"
        f"{'‚úÖ' if selected_branded == 'custom' else '‚ö™'} –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø –†–£–ë–†–ò–ö–ê\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥ –≤–∞—à –±–∏–∑–Ω–µ—Å\n"
        "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å—Ü–µ–Ω–∞—Ä–∏–π\n"
        "+30% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return BRANDED_SECTIONS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä—É–±—Ä–∏–∫
async def handle_branded_sections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_time":
        return await time_slots(update, context)
    
    elif query.data == "show_example":
        example_text = (
            "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —É—Å–ª—É–≥ –¢—é–º–µ–Ω—Å–∫–æ–≥–æ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—É—á–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –Ω–∞ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è—Ö –¢—é–º–µ–Ω–∏.\n\n"
            "–ó–∞–¥–∞—á–∞: –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —É—Å–ª—É–≥ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞, –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏—Ç–µ–ª–µ–π —Ä–µ–≥–∏–æ–Ω–∞ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.\n\n"
            "–§–æ—Ä–º–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:\n‚Ä¢ –†–µ–∫–ª–∞–º–Ω—ã–µ —Ä–æ–ª–∏–∫–∏ (15‚Äì30 —Å–µ–∫.)\n‚Ä¢ –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏ ‚Äî ¬´–ó–¥–æ—Ä–æ–≤–æ–µ —Å–µ—Ä–¥—Ü–µ¬ª, ¬´–°–æ–≤–µ—Ç –≤—Ä–∞—á–∞¬ª\n\n"
            "–ü—Ä–∏–º–µ—Ä —Ä—É–±—Ä–∏–∫–∏ (30 —Å–µ–∫.):\n¬´‚ù§Ô∏è –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å —Å–µ—Ä—å—ë–∑–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è? –í –¢—é–º–µ–Ω—Å–∫–æ–º –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –Ω–∞—É—á–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –ó–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö –±–ª–∏–∑–∫–∏—Ö ‚Äî –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö —Ä—É–∫–∞—Ö!¬ª\n\n"
            "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —à–∏—Ä–æ–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n‚Ä¢ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –∫ —Ä–∞–¥–∏–æ\n‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—Ä–µ–Ω–¥–∞ –≤ –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–∏–¥–∂–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞"
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î –ö –í–´–ë–û–†–£ –†–£–ë–†–ò–ö", callback_data="back_to_branded")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(example_text, reply_markup=reply_markup)
        return BRANDED_SECTIONS
    
    elif query.data == "back_to_branded":
        return await branded_sections(update, context)
    
    branded_data = {
        'branded_auto': 'auto',
        'branded_realty': 'realty',
        'branded_medical': 'medical',
        'branded_custom': 'custom'
    }
    
    if query.data in branded_data:
        context.user_data['branded_section'] = branded_data[query.data]
        return await branded_sections(update, context)
    
    elif query.data == "skip_branded":
        context.user_data['branded_section'] = None
        return await campaign_creator(update, context)
    
    elif query.data == "to_campaign_creator":
        return await campaign_creator(update, context)
    
    return BRANDED_SECTIONS

# –®–∞–≥ 5: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
async def campaign_creator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ—Ö–≤–∞—Ç
    base_price, discount, final_price, total_reach, daily_listeners, spots_per_day = calculate_campaign_price_and_reach(context.user_data)
    context.user_data['base_price'] = base_price
    context.user_data['discount'] = discount
    context.user_data['final_price'] = final_price
    
    provide_own = context.user_data.get('provide_own_audio', False)
    campaign_text = context.user_data.get('campaign_text', '')
    char_count = len(campaign_text) if campaign_text else 0
    duration = context.user_data.get('duration', 20)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ "–ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫"
    keyboard = []
    
    if provide_own:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–∫–∞–∑–∞–Ω–∏—è —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂–∞
        keyboard.append([InlineKeyboardButton("‚è±Ô∏è –£–∫–∞–∑–∞—Ç—å —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂", callback_data="enter_duration")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫" if provide_own else "‚ö™ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫", callback_data="provide_own_audio")])
    else:
        # –ï—Å–ª–∏ –ù–ï –≤—ã–±—Ä–∞–Ω "–ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        keyboard.append([InlineKeyboardButton("üìù –í–í–ï–°–¢–ò –¢–ï–ö–°–¢ –†–û–õ–ò–ö–ê", callback_data="enter_text")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫" if provide_own else "‚ö™ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫", callback_data="provide_own_audio")])
        keyboard.append([InlineKeyboardButton("‚è±Ô∏è –£–∫–∞–∑–∞—Ç—å —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂", callback_data="enter_duration")])
    
    keyboard.append([InlineKeyboardButton("‚è© –ü–†–û–ü–£–°–¢–ò–¢–¨", callback_data="skip_text")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_branded")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_production_option")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞\n\n"
        "üìù –í–ê–® –¢–ï–ö–°–¢ –î–õ–Ø –†–û–õ–ò–ö–ê (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):\n\n"
        f"{campaign_text if campaign_text else '[–í–∞—à —Ç–µ–∫—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å]'}\n\n"
        f"‚óã {char_count} –∑–Ω–∞–∫–æ–≤ –∏–∑ 500\n\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏–∫–∞: {duration} —Å–µ–∫—É–Ω–¥\n"
        f"üìä –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {spots_per_day}\n\n"
        f"üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n"
        f"   –ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ\n"
        f"   –°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ\n"
        f"   –ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ\n\n"
        f"üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ö–≤–∞—Ç –∫–∞–º–ø–∞–Ω–∏–∏:\n"
        f"   ~{format_number(total_reach)} —á–µ–ª–æ–≤–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
        f"{'‚úÖ' if provide_own else '‚ö™'} –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return CAMPAIGN_CREATOR

# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Ä–æ–ª–∏–∫–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
async def enter_campaign_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_creator")],
        [InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_text")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–¥–∏–æ—Ä–æ–ª–∏–∫–∞ (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "\"–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –¢—é–º–µ–Ω–∏! –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏. –í—ã–≥–æ–¥–Ω—ã–π —Ç—Ä–µ–π–¥-–∏–Ω –∏ –∫—Ä–µ–¥–∏—Ç 0%. "
        "–¢–µ—Å—Ç-–¥—Ä–∞–π–≤ –≤ –¥–µ–Ω—å –æ–±—Ä–∞—â–µ–Ω–∏—è!\"\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        reply_markup=reply_markup
    )
    
    return "WAITING_TEXT"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–æ–ª–∏–∫–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
async def process_campaign_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        if len(text) > 500:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç 500 –∑–Ω–∞–∫–æ–≤. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞:")
            return "WAITING_TEXT"
        
        context.user_data['campaign_text'] = text
        context.user_data['provide_own_audio'] = False
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞
        base_price, discount, final_price, total_reach, daily_listeners, spots_per_day = calculate_campaign_price_and_reach(context.user_data)
        
        char_count = len(text)
        duration = context.user_data.get('duration', 20)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        keyboard = []
        provide_own = context.user_data.get('provide_own_audio', False)
        
        if provide_own:
            keyboard.append([InlineKeyboardButton("‚è±Ô∏è –£–∫–∞–∑–∞—Ç—å —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂", callback_data="enter_duration")])
            keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫" if provide_own else "‚ö™ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫", callback_data="provide_own_audio")])
        else:
            keyboard.append([InlineKeyboardButton("üìù –í–í–ï–°–¢–ò –¢–ï–ö–°–¢ –†–û–õ–ò–ö–ê", callback_data="enter_text")])
            keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫" if provide_own else "‚ö™ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫", callback_data="provide_own_audio")])
            keyboard.append([InlineKeyboardButton("‚è±Ô∏è –£–∫–∞–∑–∞—Ç—å —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂", callback_data="enter_duration")])
        
        keyboard.append([InlineKeyboardButton("‚è© –ü–†–û–ü–£–°–¢–ò–¢–¨", callback_data="skip_text")])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_branded")])
        keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_production_option")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text_display = (
            f"–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞\n\n"
            f"üìù –í–ê–® –¢–ï–ö–°–¢ –î–õ–Ø –†–û–õ–ò–ö–ê (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):\n\n"
            f"{text}\n\n"
            f"‚óã {char_count} –∑–Ω–∞–∫–æ–≤ –∏–∑ 500\n\n"
            f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏–∫–∞: {duration} —Å–µ–∫—É–Ω–¥\n"
            f"üìä –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {spots_per_day}\n\n"
            f"üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n"
            f"   –ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ\n"
            f"   –°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ\n"
            f"   –ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ\n\n"
            f"üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ö–≤–∞—Ç –∫–∞–º–ø–∞–Ω–∏–∏:\n"
            f"   ~{format_number(total_reach)} —á–µ–ª–æ–≤–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
            f"{'‚úÖ' if provide_own else '‚ö™'} –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫"
        )
        
        await update.message.reply_text(text_display, reply_markup=reply_markup)
        return CAMPAIGN_CREATOR
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_campaign_text: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start")
        return ConversationHandler.END

# –í–≤–æ–¥ —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂–∞
async def enter_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_creator")],
        [InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="cancel_duration")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (10-30):\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n"
        "‚Ä¢ 15 —Å–µ–∫—É–Ω–¥ - –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ 20 —Å–µ–∫—É–Ω–¥ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–æ–ª–∏–∫\n"
        "‚Ä¢ 30 —Å–µ–∫—É–Ω–¥ - –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 30:",
        reply_markup=reply_markup
    )
    
    return "WAITING_DURATION"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç)
async def process_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        duration_text = update.message.text.strip()
        duration = int(duration_text)
        
        if duration < 10 or duration > 30:
            await update.message.reply_text("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 30 —Å–µ–∫—É–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return "WAITING_DURATION"
        
        context.user_data['duration'] = duration
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞
        base_price, discount, final_price, total_reach, daily_listeners, spots_per_day = calculate_campaign_price_and_reach(context.user_data)
        
        campaign_text = context.user_data.get('campaign_text', '')
        char_count = len(campaign_text) if campaign_text else 0
        provide_own = context.user_data.get('provide_own_audio', False)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        keyboard = []
        
        if provide_own:
            keyboard.append([InlineKeyboardButton("‚è±Ô∏è –£–∫–∞–∑–∞—Ç—å —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂", callback_data="enter_duration")])
            keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫" if provide_own else "‚ö™ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫", callback_data="provide_own_audio")])
        else:
            keyboard.append([InlineKeyboardButton("üìù –í–í–ï–°–¢–ò –¢–ï–ö–°–¢ –†–û–õ–ò–ö–ê", callback_data="enter_text")])
            keyboard.append([InlineKeyboardButton("‚úÖ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫" if provide_own else "‚ö™ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫", callback_data="provide_own_audio")])
            keyboard.append([InlineKeyboardButton("‚è±Ô∏è –£–∫–∞–∑–∞—Ç—å —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂", callback_data="enter_duration")])
        
        keyboard.append([InlineKeyboardButton("‚è© –ü–†–û–ü–£–°–¢–ò–¢–¨", callback_data="skip_text")])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_branded")])
        keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_production_option")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text_display = (
            f"–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞\n\n"
            f"üìù –í–ê–® –¢–ï–ö–°–¢ –î–õ–Ø –†–û–õ–ò–ö–ê (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):\n\n"
            f"{campaign_text if campaign_text else '[–í–∞—à —Ç–µ–∫—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å]'}\n\n"
            f"‚óã {char_count} –∑–Ω–∞–∫–æ–≤ –∏–∑ 500\n\n"
            f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏–∫–∞: {duration} —Å–µ–∫—É–Ω–¥\n"
            f"üìä –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {spots_per_day}\n\n"
            f"üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n"
            f"   –ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ\n"
            f"   –°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ\n"
            f"   –ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ\n\n"
            f"üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ö–≤–∞—Ç –∫–∞–º–ø–∞–Ω–∏–∏:\n"
            f"   ~{format_number(total_reach)} —á–µ–ª–æ–≤–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
            f"{'‚úÖ' if provide_own else '‚ö™'} –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫"
        )
        
        await update.message.reply_text(text_display, reply_markup=reply_markup)
        return CAMPAIGN_CREATOR
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 30:")
        return "WAITING_DURATION"

# –®–∞–≥ 6: –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ä–æ–ª–∏–∫–∞
async def production_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª "–ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
    if context.user_data.get('provide_own_audio'):
        context.user_data['production_option'] = 'ready'
        context.user_data['production_cost'] = 0
        return await contact_info(update, context)
    
    selected_production = context.user_data.get('production_option')
    
    keyboard = []
    for key, option in PRODUCTION_OPTIONS.items():
        is_selected = "‚úÖ" if selected_production == key else "‚ö™"
        keyboard.append([
            InlineKeyboardButton(
                f"{is_selected} {option['name']} - –æ—Ç {format_number(option['price'])}‚ÇΩ", 
                callback_data=f"production_{key}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_creator")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–ê–õ–ï–ï", callback_data="to_contact_info")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ä–æ–ª–∏–∫–∞\n\n"
        "üéôÔ∏è –í–´–ë–ï–†–ò–¢–ï –í–ê–†–ò–ê–ù–¢ –†–û–õ–ò–ö–ê:\n\n"
        "‚ö™ –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –†–û–õ–ò–ö - –æ—Ç 2,000‚ÇΩ\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞\n‚Ä¢ –ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ\n‚Ä¢ 2 –ø—Ä–∞–≤–∫–∏\n‚Ä¢ –°—Ä–æ–∫: 2-3 –¥–Ω—è\n\n"
        "‚ö™ –ü–†–ï–ú–ò–£–ú –†–û–õ–ò–ö - –æ—Ç 4,000‚ÇΩ\n"
        "‚Ä¢ –û–∑–≤—É—á–∫–∞ 2-–º—è –≥–æ–ª–æ—Å–∞–º–∏\n‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –º—É–∑—ã–∫–∞\n‚Ä¢ 5 –ø—Ä–∞–≤–æ–∫\n‚Ä¢ –°—Ä–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 1 –¥–µ–Ω—å\n\n"
        "üí∞ –í–ª–∏—è–Ω–∏–µ –Ω–∞ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return PRODUCTION_OPTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
async def handle_production_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_creator":
        return await campaign_creator(update, context)
    
    elif query.data.startswith("production_"):
        production_key = query.data.replace("production_", "")
        if production_key in PRODUCTION_OPTIONS:
            context.user_data['production_option'] = production_key
            context.user_data['production_cost'] = PRODUCTION_OPTIONS[production_key]['price']
            return await production_option(update, context)
    
    elif query.data == "to_contact_info":
        if not context.user_data.get('production_option'):
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ä–æ–ª–∏–∫–∞!", show_alert=True)
            return PRODUCTION_OPTION
        return await contact_info(update, context)
    
    return PRODUCTION_OPTION

# –®–∞–≥ 7: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
async def contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    base_price, discount, final_price, total_reach, daily_listeners, spots_per_day = calculate_campaign_price_and_reach(context.user_data)
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_production")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏:\n"
        f"   –ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ\n"
        f"   –°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ\n"
        f"   –ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ\n\n"
        f"üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ö–≤–∞—Ç: ~{format_number(total_reach)} —á–µ–ª–æ–≤–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üìù –í–í–ï–î–ò–¢–ï –í–ê–®–ï –ò–ú–Ø\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"(–Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)
    return CONTACT_INFO

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def process_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        
        if 'contact_name' not in context.user_data:
            context.user_data['contact_name'] = text
            await update.message.reply_text(
                "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:\n\n"
                "–§–æ—Ä–º–∞—Ç: +79XXXXXXXXX\n"
                "–ü—Ä–∏–º–µ—Ä: +79123456789"
            )
            return CONTACT_INFO
        
        elif 'phone' not in context.user_data:
            if not validate_phone(text):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +79XXXXXXXXX")
                return CONTACT_INFO
            context.user_data['phone'] = text
            await update.message.reply_text("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
            return CONTACT_INFO
        
        elif 'email' not in context.user_data:
            context.user_data['email'] = text
            await update.message.reply_text("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
            return CONTACT_INFO
        
        elif 'company' not in context.user_data:
            context.user_data['company'] = text
            return await show_confirmation(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_contact_info: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start"
        )
        return ConversationHandler.END

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (–Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞)
async def show_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    base_price, discount, final_price, total_reach, daily_listeners, spots_per_day = calculate_campaign_price_and_reach(context.user_data)
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è–º
    stations_text = ""
    station_listeners = {
        'LOVE RADIO': 1600,
        '–ê–í–¢–û–†–ê–î–ò–û': 1400,
        '–†–ê–î–ò–û –î–ê–ß–ê': 1800,
        '–†–ê–î–ò–û –®–ê–ù–°–û–ù': 1200,
        '–†–ï–¢–†–û FM': 1500,
        '–Æ–ú–û–† FM': 1100
    }
    
    for radio in context.user_data.get('selected_radios', []):
        listeners = station_listeners.get(radio, 0)
        stations_text += f"‚Ä¢ {radio}: {format_number(listeners)}/–¥–µ–Ω—å\n"
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–ª–æ—Ç–∞–º
    slots_text = ""
    for slot_index in context.user_data.get('selected_time_slots', []):
        if 0 <= slot_index < len(TIME_SLOTS_DATA):
            slot = TIME_SLOTS_DATA[slot_index]
            premium = "‚úÖ" if slot['premium'] else "‚ùå"
            slots_text += f"‚Ä¢ {slot['time']} - {slot['label']} (–ü—Ä–µ–º–∏—É–º: {premium})\n"
    
    confirmation_text = f"""
üìã –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò

üë§ –í–ê–®–ò –î–ê–ù–ù–´–ï:
–ò–º—è: {context.user_data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
Email: {context.user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
–ö–æ–º–ø–∞–Ω–∏—è: {context.user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üìä –ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ú–ü–ê–ù–ò–ò:

üìª –†–ê–î–ò–û–°–¢–ê–ù–¶–ò–ò:
{stations_text}
üìÖ –ü–ï–†–ò–û–î: {context.user_data.get('campaign_period_days', 30)} –¥–Ω–µ–π
üïí –í–´–ë–†–ê–ù–û –°–õ–û–¢–û–í: {len(context.user_data.get('selected_time_slots', []))}
{slots_text}
üéôÔ∏è –†–£–ë–†–ò–ö–ê: {get_branded_section_name(context.user_data.get('branded_section'))}
‚è±Ô∏è –†–û–õ–ò–ö: {PRODUCTION_OPTIONS.get(context.user_data.get('production_option', 'ready'), {}).get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')}
üìè –•–†–û–ù–û–ú–ï–¢–†–ê–ñ: {context.user_data.get('duration', 20)} —Å–µ–∫

üí∞ –°–¢–û–ò–ú–û–°–¢–¨:
–ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ
–°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ
–ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ

üéØ –û–•–í–ê–¢:
‚Ä¢ –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {spots_per_day}
‚Ä¢ –í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤: {spots_per_day * context.user_data.get('campaign_period_days', 30)}
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: ~{format_number(daily_listeners)} —á–µ–ª.
‚Ä¢ –ó–∞ –ø–µ—Ä–∏–æ–¥: ~{format_number(total_reach)} —á–µ–ª.
"""
    
    keyboard = [
        [InlineKeyboardButton("üì§ –û–¢–ü–†–ê–í–ò–¢–¨ –ó–ê–Ø–í–ö–£", callback_data="submit_campaign")],
        [InlineKeyboardButton("‚óÄÔ∏è –í–ï–†–ù–£–¢–¨–°–Ø –ö –í–´–ë–û–†–£ –†–ê–î–ò–û", callback_data="back_to_radio_from_confirmation")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(confirmation_text, reply_markup=reply_markup)
    return CONFIRMATION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_radio_from_confirmation":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        return await radio_selection(update, context)
    
    elif query.data == "submit_campaign":
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ—Ö–≤–∞—Ç
            base_price, discount, final_price, total_reach, daily_listeners, spots_per_day = calculate_campaign_price_and_reach(context.user_data)
            context.user_data['base_price'] = base_price
            context.user_data['discount'] = discount
            context.user_data['final_price'] = final_price
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
            campaign_number = f"R-{datetime.now().strftime('%H%M%S')}"
            conn = sqlite3.connect('campaigns.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO campaigns 
                (user_id, campaign_number, radio_stations, campaign_period, time_slots, branded_section, campaign_text, production_option, contact_name, company, phone, email, base_price, discount, final_price)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                query.from_user.id,
                campaign_number,
                ','.join(context.user_data.get('selected_radios', [])),
                context.user_data.get('campaign_period', ''),
                ','.join(map(str, context.user_data.get('selected_time_slots', []))),
                context.user_data.get('branded_section', ''),
                context.user_data.get('campaign_text', ''),
                context.user_data.get('production_option', ''),
                context.user_data.get('contact_name', ''),
                context.user_data.get('company', ''),
                context.user_data.get('phone', ''),
                context.user_data.get('email', ''),
                base_price,
                discount,
                final_price
            ))
            
            conn.commit()
            conn.close()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await send_admin_notification(context, context.user_data, campaign_number)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            success_text = f"""
‚úÖ –ó–ê–Ø–í–ö–ê –ü–†–ò–ù–Ø–¢–ê!

–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üòä
–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

üìã ‚Ññ –∑–∞—è–≤–∫–∏: {campaign_number}
üìÖ –°—Ç–∞—Ä—Ç: –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π
üí∞ –°—É–º–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π 50%: {format_number(final_price)}‚ÇΩ
üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ö–≤–∞—Ç: ~{format_number(total_reach)} —á–µ–ª–æ–≤–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥

–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
            
            keyboard = [
                [InlineKeyboardButton("üìä –°–§–û–†–ú–ò–†–û–í–ê–¢–¨ EXCEL –ú–ï–î–ò–ê–ü–õ–ê–ù", callback_data="generate_excel")],
                [InlineKeyboardButton("üìã –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢", callback_data="personal_cabinet")],
                [InlineKeyboardButton("üöÄ –ù–û–í–´–ô –ó–ê–ö–ê–ó", callback_data="new_order")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(success_text, reply_markup=reply_markup)
            return FINAL_ACTIONS
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start\n"
                "–ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: t.me/AlexeyKhlistunov"
            )
            return ConversationHandler.END
    
    return CONFIRMATION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def handle_final_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data == "generate_excel":
            campaign_number = f"R-{datetime.now().strftime('%H%M%S')}"
            try:
                # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel
                success = await send_excel_file(update, context, campaign_number)
                if not success:
                    await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ Excel: {e}")
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return FINAL_ACTIONS
        
        elif query.data == "personal_cabinet":
            return await personal_cabinet(update, context)
        
        elif query.data == "new_order":
            context.user_data.clear()
            await query.message.reply_text("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é!")
            return await radio_selection(update, context)
        
        return FINAL_ACTIONS
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_final_actions: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        return ConversationHandler.END

# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
async def personal_cabinet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    conn = sqlite3.connect('campaigns.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT campaign_number, status, final_price, created_at FROM campaigns WHERE user_id = ? ORDER BY created_at DESC LIMIT 5', (user_id,))
    orders = cursor.fetchall()
    conn.close()
    
    if orders:
        orders_text = "üìã –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ö–ê–ó–´:\n\n"
        for order in orders:
            orders_text += f"üìã {order[0]} | {order[1]} | {format_number(order[2])}‚ÇΩ | {order[3][:10]}\n"
    else:
        orders_text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–ê–ó–ê–î", callback_data="back_to_final")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìã –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢\n\n"
        f"{orders_text}\n\n"
        f"–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤",
        reply_markup=reply_markup
    )
    return FINAL_ACTIONS

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ö–≤–∞—Ç–∞
async def statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–•–í–ê–¢–ê\n\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ö–≤–∞—Ç: 9,200+\n"
        "‚Ä¢ –ú–µ—Å—è—á–Ω—ã–π –æ—Ö–≤–∞—Ç: 68,000+\n"
        "‚Ä¢ –†–∞–¥–∏—É—Å –≤–µ—â–∞–Ω–∏—è: 35 –∫–º –≤–æ–∫—Ä—É–≥ –≥–æ—Ä–æ–¥–æ–≤\n"
        "‚Ä¢ –î–æ–ª—è —Ä—ã–Ω–∫–∞: 52%\n"
        "‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: 2‚ÇΩ/—Å–µ–∫\n\n"
        "–ü–æ —Å—Ç–∞–Ω—Ü–∏—è–º (–≤ –¥–µ–Ω—å):\n"
        "‚Ä¢ LOVE RADIO: 1,600\n"
        "‚Ä¢ –ê–í–¢–û–†–ê–î–ò–û: 1,400\n"  
        "‚Ä¢ –†–ê–î–ò–û –î–ê–ß–ê: 1,800\n"
        "‚Ä¢ –†–ê–î–ò–û –®–ê–ù–°–û–ù: 1,200\n"
        "‚Ä¢ –†–ï–¢–†–û FM: 1,500\n"
        "‚Ä¢ –Æ–ú–û–† FM: 1,100\n\n"
        "üéØ –û—Ö–≤–∞—Ç—ã–≤–∞–µ–º:\n"
        "üìç –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫\n"
        "üìç –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫\n"  
        "üìç –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è +35 –∫–º –≤–æ–∫—Ä—É–≥ –≥–æ—Ä–æ–¥–æ–≤\n\n"
        "üìà –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π:\n"
        "‚Ä¢ RADIOPORTAL.RU - –†–∞–¥–∏–æ –≤ –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö\n"
        "‚Ä¢ Mediascope - –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä–∞–¥–∏–æ—Ä—ã–Ω–æ–∫\n"  
        "‚Ä¢ –í–¶–ò–û–ú - –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ä–∞–¥–∏–æ –≤ —Ä–µ–≥–∏–æ–Ω–∞\n\n"
        "üîó radioportal.ru/radio-audience-research\n"
        "üîó mediascope.net/services/media/radio/\n"
        "üîó wciom.ru/analytical-reviews/radio-audience\n\n"
        "üéß –í –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö —Å–ª—É—à–∞—é—Ç 2.5 —á–∞—Å–∞/–¥–µ–Ω—å\n"
        "üöó 65% –∞—É–¥–∏—Ç–æ—Ä–∏–∏ - –∞–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç—ã\n"
        "üèòÔ∏è +35% –æ—Ö–≤–∞—Ç –∑–∞ —Å—á–µ—Ç —Å–µ–ª—å—Å–∫–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏",
        reply_markup=reply_markup
    )
    return MAIN_MENU

# –û –Ω–∞—Å
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üéôÔ∏è –†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò\n"
        "üìç –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫ ‚Ä¢ –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫\n\n"
        "‚ÑπÔ∏è –û –ù–ê–°\n\n"
        "–í–µ–¥—É—â–∏–π —Ä–∞–¥–∏–æ–≤–µ—â–∞—Ç–µ–ª—å –≤ —Ä–µ–≥–∏–æ–Ω–µ\n"
        "–û—Ö–≤–∞—Ç—ã–≤–∞–µ–º 52% —Ä–∞–¥–∏–æ—Ä—ã–Ω–∫–∞\n\n"
        "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å\n"
        "–•–ª—ã—Å—Ç—É–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á\n"
        "–û–ì–†–ù–ò–ü 315723200067362\n\n"
        "üìß a.khlistunov@gmail.com\n"
        "üì± Telegram: t.me/AlexeyKhlistunov",
        reply_markup=reply_markup
    )
    return MAIN_MENU

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é - –¥–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if query.data == "create_campaign":
        context.user_data.clear()
        return await radio_selection(update, context)
    
    elif query.data == "statistics":
        return await statistics(update, context)
    
    elif query.data == "my_orders":
        return await personal_cabinet(update, context)
    
    elif query.data == "about":
        return await about(update, context)
    
    # –û–ë–†–ê–ë–û–¢–ö–ê –ê–î–ú–ò–ù–°–ö–ò–• –ö–ù–û–ü–û–ö
    elif query.data.startswith("generate_excel_"):
        campaign_number = query.data.replace("generate_excel_", "")
        try:
            excel_buffer = create_excel_file(context.user_data, campaign_number)
            if excel_buffer:
                await query.message.reply_document(
                    document=excel_buffer,
                    filename=f"mediaplan_{campaign_number}.xlsx",
                    caption=f"üìä Excel –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ #{campaign_number}"
                )
            else:
                await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel")
        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel: {e}")
    
    elif query.data.startswith("get_excel_"):
        campaign_number = query.data.replace("get_excel_", "")
        try:
            excel_buffer = create_excel_file(context.user_data, campaign_number)
            if excel_buffer:
                await query.message.reply_document(
                    document=excel_buffer,
                    filename=f"mediaplan_{campaign_number}.xlsx",
                    caption=f"üìä Excel –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ #{campaign_number}"
                )
            else:
                await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel")
        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel: {e}")
    
    elif query.data.startswith("call_"):
        phone = query.data.replace("call_", "")
        await query.answer(f"üìû –ù–∞–±–µ—Ä–∏—Ç–µ: {phone}")
    
    elif query.data.startswith("email_"):
        email = query.data.replace("email_", "")
        await query.answer(f"‚úâÔ∏è Email: {email}")
    
    # –ù–ê–í–ò–ì–ê–¶–ò–Ø
    elif query.data == "back_to_main":
        return await start(update, context)
    
    elif query.data == "back_to_radio":
        return await radio_selection(update, context)
    
    elif query.data == "back_to_radio_from_confirmation":
        return await radio_selection(update, context)
    
    elif query.data == "back_to_period":
        return await campaign_period(update, context)
    
    elif query.data == "back_to_time":
        return await time_slots(update, context)
    
    elif query.data == "back_to_branded":
        return await branded_sections(update, context)
    
    elif query.data == "back_to_creator":
        return await campaign_creator(update, context)
    
    elif query.data == "back_to_production":
        return await production_option(update, context)
    
    elif query.data == "back_to_company":
        await query.message.reply_text("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
        return CONTACT_INFO
    
    elif query.data == "back_to_final":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º –ø–æ—Å–ª–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üìä –°–§–û–†–ú–ò–†–û–í–ê–¢–¨ EXCEL –ú–ï–î–ò–ê–ü–õ–ê–ù", callback_data="generate_excel")],
            [InlineKeyboardButton("üìã –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢", callback_data="personal_cabinet")],
            [InlineKeyboardButton("üöÄ –ù–û–í–´–ô –ó–ê–ö–ê–ó", callback_data="new_order")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return FINAL_ACTIONS
    
    elif query.data == "skip_text":
        context.user_data['campaign_text'] = ''
        return await production_option(update, context)
    
    elif query.data == "cancel_text":
        return await campaign_creator(update, context)
    
    elif query.data == "cancel_duration":
        return await campaign_creator(update, context)
    
    elif query.data == "provide_own_audio":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å "–ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫"
        current_state = context.user_data.get('provide_own_audio', False)
        context.user_data['provide_own_audio'] = not current_state
        return await campaign_creator(update, context)
    
    elif query.data == "to_production_option":
        return await production_option(update, context)
    
    elif query.data == "enter_duration":
        return await enter_duration(update, context)
    
    elif query.data == "enter_text":
        return await enter_campaign_text(update, context)
    
    elif query.data == "submit_campaign":
        return await handle_confirmation(update, context)
    
    return MAIN_MENU

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    if init_db():
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(handle_main_menu, pattern='^.*$')
            ],
            RADIO_SELECTION: [
                CallbackQueryHandler(handle_radio_selection, pattern='^.*$')
            ],
            CAMPAIGN_PERIOD: [
                CallbackQueryHandler(handle_campaign_period, pattern='^.*$')
            ],
            TIME_SLOTS: [
                CallbackQueryHandler(handle_time_slots, pattern='^.*$')
            ],
            BRANDED_SECTIONS: [
                CallbackQueryHandler(handle_branded_sections, pattern='^.*$')
            ],
            CAMPAIGN_CREATOR: [
                CallbackQueryHandler(handle_main_menu, pattern='^(back_to_|skip_text|cancel_text|to_production_option|provide_own_audio|enter_text|enter_duration)'),
                CallbackQueryHandler(enter_campaign_text, pattern='^enter_text$'),
                CallbackQueryHandler(enter_duration, pattern='^enter_duration$')
            ],
            "WAITING_TEXT": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_campaign_text),
                CallbackQueryHandler(handle_main_menu, pattern='^back_to_creator$'),
                CallbackQueryHandler(handle_main_menu, pattern='^cancel_text$')
            ],
            "WAITING_DURATION": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_duration),
                CallbackQueryHandler(handle_main_menu, pattern='^back_to_creator$'),
                CallbackQueryHandler(handle_main_menu, pattern='^cancel_duration$')
            ],
            PRODUCTION_OPTION: [
                CallbackQueryHandler(handle_production_option, pattern='^.*$')
            ],
            CONTACT_INFO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_contact_info),
                CallbackQueryHandler(handle_main_menu, pattern='^back_to_production$')
            ],
            CONFIRMATION: [
                CallbackQueryHandler(handle_confirmation, pattern='^.*$')
            ],
            FINAL_ACTIONS: [
                CallbackQueryHandler(handle_final_actions, pattern='^.*$')
            ]
        },
        fallbacks=[CommandHandler('start', start)],
        allow_reentry=True
    )
    
    application.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(
        handle_main_menu, 
        pattern='^(generate_excel_|get_excel_|call_|email_)'
    ))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    if 'RENDER' in os.environ:
        application.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get('PORT', 8443)),
            url_path=TOKEN,
            webhook_url=f"https://{os.environ.get('RENDER_SERVICE_NAME', 'telegram-radio-bot')}.onrender.com/{TOKEN}"
        )
    else:
        application.run_polling()

if __name__ == '__main__':
    main()

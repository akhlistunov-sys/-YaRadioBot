import os
import logging
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
MAIN_MENU, RADIO_SELECTION, CAMPAIGN_PERIOD, TIME_SLOTS, BRANDED_SECTIONS, CAMPAIGN_CREATOR, PRODUCTION_OPTION, CONTACT_INFO = range(8)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8281804030:AAEFEYgqigL3bdH4DL0zl1tW71fwwo_8cyU"

# –í–∞—à Telegram ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_TELEGRAM_ID = "@AlexeyKhlistunov"

# –¶–µ–Ω—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
BASE_PRICE_PER_SECOND = 4
MIN_PRODUCTION_COST = 2000
MIN_BUDGET = 7000

TIME_SLOTS_DATA = [
    {"time": "06:00-07:00", "label": "–ü–æ–¥—ä–µ–º, —Å–±–æ—Ä—ã", "premium": True},
    {"time": "07:00-08:00", "label": "–£—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏", "premium": True},
    {"time": "08:00-09:00", "label": "–ü–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ üöÄ", "premium": True},
    {"time": "09:00-10:00", "label": "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã", "premium": True},
    {"time": "10:00-11:00", "label": "–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å", "premium": False},
    {"time": "11:00-12:00", "label": "–ü—Ä–µ–¥–æ–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è", "premium": False},
    {"time": "12:00-13:00", "label": "–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤", "premium": False},
    {"time": "13:00-14:00", "label": "–ü–æ—Å–ª–µ –æ–±–µ–¥–∞", "premium": False},
    {"time": "14:00-15:00", "label": "–í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–Ω—è", "premium": False},
    {"time": "15:00-16:00", "label": "–†–∞–±–æ—á–∏–π —Ñ–∏–Ω–∏—à", "premium": False},
    {"time": "16:00-17:00", "label": "–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", "premium": True},
    {"time": "17:00-18:00", "label": "–í–µ—á–µ—Ä–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏", "premium": True},
    {"time": "18:00-19:00", "label": "–ü–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ üöÄ", "premium": True},
    {"time": "19:00-20:00", "label": "–î–æ–º–∞—à–Ω–∏–π –≤–µ—á–µ—Ä", "premium": True},
    {"time": "20:00-21:00", "label": "–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç–¥—ã—Ö", "premium": True}
]

BRANDED_SECTION_PRICES = {
    'auto': 1.2,      # +20%
    'realty': 1.15,   # +15%
    'medical': 1.25,  # +25%
    'custom': 1.3     # +30%
}

PRODUCTION_OPTIONS = {
    'standard': {'price': 2000, 'name': '–°–¢–ê–ù–î–ê–†–¢–ù–´–ô –†–û–õ–ò–ö', 'desc': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞, –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, 2 –ø—Ä–∞–≤–∫–∏, —Å—Ä–æ–∫: 2-3 –¥–Ω—è'},
    'premium': {'price': 4000, 'name': '–ü–†–ï–ú–ò–£–ú –†–û–õ–ò–ö', 'desc': '–û–∑–≤—É—á–∫–∞ 2-–º—è –≥–æ–ª–æ—Å–∞–º–∏, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –º—É–∑—ã–∫–∞, 5 –ø—Ä–∞–≤–æ–∫, —Å—Ä–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 1 –¥–µ–Ω—å'},
    'ready': {'price': 0, 'name': '–ì–û–¢–û–í–´–ô –†–û–õ–ò–ö', 'desc': '–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π —Ä–æ–ª–∏–∫, –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª–æ–º'}
}

PERIOD_OPTIONS = {
    '15_days': {'days': 15, 'name': '15 –î–ù–ï–ô (–º–∏–Ω–∏–º—É–º)'},
    '30_days': {'days': 30, 'name': '30 –î–ù–ï–ô (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º)'},
    '60_days': {'days': 60, 'name': '60 –î–ù–ï–ô'}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('campaigns.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS campaigns (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            campaign_number TEXT,
            radio_stations TEXT,
            campaign_period TEXT,
            time_slots TEXT,
            branded_section TEXT,
            campaign_text TEXT,
            production_option TEXT,
            contact_name TEXT,
            company TEXT,
            phone TEXT,
            email TEXT,
            base_price INTEGER,
            discount INTEGER,
            final_price INTEGER,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()

# –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏
def calculate_campaign_price(context):
    user_data = context.user_data
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    base_duration = 30  # —Å–µ–∫—É–Ω–¥
    spots_per_day = 5
    
    # –ü–µ—Ä–∏–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏
    period_days = user_data.get('campaign_period_days', 30)
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ñ–∏—Ä–∞
    base_air_cost = base_duration * BASE_PRICE_PER_SECOND * spots_per_day * period_days
    
    # –ù–∞–¥–±–∞–≤–∫–∏ –∑–∞ –ø—Ä–µ–º–∏—É–º-–≤—Ä–µ–º—è
    selected_time_slots = user_data.get('selected_time_slots', [])
    time_multiplier = 1.0
    
    for slot_index in selected_time_slots:
        if 0 <= slot_index < len(TIME_SLOTS_DATA):
            slot = TIME_SLOTS_DATA[slot_index]
            if slot['premium']:
                if slot_index <= 3:  # –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ—Ç—ã
                    time_multiplier = max(time_multiplier, 1.25)
                else:  # –í–µ—á–µ—Ä–Ω–∏–µ —Å–ª–æ—Ç—ã
                    time_multiplier = max(time_multiplier, 1.2)
    
    # –ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ —Ä—É–±—Ä–∏–∫—É
    branded_multiplier = 1.0
    branded_section = user_data.get('branded_section')
    if branded_section in BRANDED_SECTION_PRICES:
        branded_multiplier = BRANDED_SECTION_PRICES[branded_section]
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    production_cost = user_data.get('production_cost', 0)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—ç—Ñ–∏—Ä + –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)
    air_cost = int(base_air_cost * time_multiplier * branded_multiplier)
    base_price = air_cost + production_cost
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É 50%
    discount = int(base_price * 0.5)
    discounted_price = base_price - discount
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç
    final_price = max(discounted_price, MIN_BUDGET)
    
    return base_price, discount, final_price

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞
def create_pdf_file(user_data, campaign_number):
    base_price, discount, final_price = calculate_campaign_price({'user_data': user_data})
    
    # –°–æ–∑–¥–∞–µ–º PDF –≤ –ø–∞–º—è—Ç–∏
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    
    # –°—Ç–∏–ª–∏ –¥–ª—è PDF
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        textColor=colors.red,
        spaceAfter=30,
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=12,
        textColor=colors.darkred,
        spaceAfter=12,
    )
    
    normal_style = styles["Normal"]
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF
    story = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    story.append(Paragraph(f"–ú–ï–î–ò–ê–ü–õ–ê–ù –ö–ê–ú–ü–ê–ù–ò–ò #{campaign_number}", title_style))
    story.append(Paragraph("–†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò", heading_style))
    story.append(Spacer(1, 20))
    
    # –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    story.append(Paragraph("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!", normal_style))
    story.append(Spacer(1, 20))
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–ø–∞–Ω–∏–∏
    story.append(Paragraph("üìä –ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ú–ü–ê–ù–ò–ò:", heading_style))
    story.append(Paragraph(f"‚Ä¢ –†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏: {', '.join(user_data.get('selected_radios', []))}", normal_style))
    story.append(Paragraph(f"‚Ä¢ –ü–µ—Ä–∏–æ–¥: {user_data.get('campaign_period_days', 30)} –¥–Ω–µ–π", normal_style))
    story.append(Paragraph(f"‚Ä¢ –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {len(user_data.get('selected_time_slots', [])) * 5}", normal_style))
    story.append(Paragraph(f"‚Ä¢ –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä—É–±—Ä–∏–∫–∞: {get_branded_section_name(user_data.get('branded_section'))}", normal_style))
    story.append(Paragraph(f"‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: {PRODUCTION_OPTIONS[user_data.get('production_option', 'ready')]['name']}", normal_style))
    story.append(Spacer(1, 20))
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    story.append(Paragraph("üí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:", heading_style))
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    financial_data = [
        ['–ü–æ–∑–∏—Ü–∏—è', '–°—É–º–º–∞ (‚ÇΩ)'],
        ['–≠—Ñ–∏—Ä–Ω–æ–µ –≤—Ä–µ–º—è', f"{base_price - user_data.get('production_cost', 0)}"],
        ['–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ä–æ–ª–∏–∫–∞', f"{user_data.get('production_cost', 0)}"],
        ['', ''],
        ['–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', f"{base_price}"],
        ['–°–∫–∏–¥–∫–∞ 50%', f"-{discount}"],
        ['', ''],
        ['–ò–¢–û–ì–û', f"{final_price}"]
    ]
    
    financial_table = Table(financial_data, colWidths=[3*inch, 1.5*inch])
    financial_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
    ]))
    
    story.append(financial_table)
    story.append(Spacer(1, 20))
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    story.append(Paragraph("üë§ –í–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´:", heading_style))
    story.append(Paragraph(f"‚Ä¢ –ò–º—è: {user_data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}", normal_style))
    story.append(Paragraph(f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}", normal_style))
    story.append(Paragraph(f"‚Ä¢ Email: {user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}", normal_style))
    story.append(Paragraph(f"‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: {user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}", normal_style))
    story.append(Spacer(1, 20))
    
    # –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏
    story.append(Paragraph("üìû –ù–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´:", heading_style))
    story.append(Paragraph("‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä: –ù–∞–¥–µ–∂–¥–∞", normal_style))
    story.append(Paragraph("‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (34535) 5-01-51", normal_style))
    story.append(Paragraph("‚Ä¢ Email: a.khlistunov@gmail.com", normal_style))
    story.append(Spacer(1, 20))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    story.append(Paragraph("üéØ –°–¢–ê–†–¢ –ö–ê–ú–ü–ê–ù–ò–ò:", heading_style))
    story.append(Paragraph("–í —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", normal_style))
    story.append(Spacer(1, 20))
    
    # –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
    story.append(Paragraph(f"üìÖ –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}", normal_style))
    
    # –°–æ–±–∏—Ä–∞–µ–º PDF
    doc.build(story)
    
    # –ü–æ–ª—É—á–∞–µ–º PDF –¥–∞–Ω–Ω—ã–µ
    pdf_data = buffer.getvalue()
    buffer.close()
    
    return pdf_data

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
def generate_pdf_content(user_data, campaign_number):
    base_price, discount, final_price = calculate_campaign_price({'user_data': user_data})
    
    pdf_content = f"""
üìÑ –ú–ï–î–ò–ê–ü–õ–ê–ù –ö–ê–ú–ü–ê–ù–ò–ò #{campaign_number}
üî¥ –†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò

‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!
–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üòä

üìä –ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ú–ü–ê–ù–ò–ò:
‚Ä¢ –†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏: {', '.join(user_data.get('selected_radios', []))}
‚Ä¢ –ü–µ—Ä–∏–æ–¥: {user_data.get('campaign_period_days', 30)} –¥–Ω–µ–π
‚Ä¢ –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å: {len(user_data.get('selected_time_slots', [])) * 5}
‚Ä¢ –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä—É–±—Ä–∏–∫–∞: {get_branded_section_name(user_data.get('branded_section'))}
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: {PRODUCTION_OPTIONS[user_data.get('production_option', 'ready')]['name']}

üí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
‚Ä¢ –≠—Ñ–∏—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {base_price - user_data.get('production_cost', 0)}‚ÇΩ
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ä–æ–ª–∏–∫–∞: {user_data.get('production_cost', 0)}‚ÇΩ
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {base_price}‚ÇΩ
‚Ä¢ –°–∫–∏–¥–∫–∞ 50%: -{discount}‚ÇΩ
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price}‚ÇΩ

üë§ –í–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´:
‚Ä¢ –ò–º—è: {user_data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ Email: {user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: {user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üìû –ù–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´:
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä: –ù–∞–¥–µ–∂–¥–∞
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (34535) 5-01-51
‚Ä¢ Email: a.khlistunov@gmail.com

üéØ –°–¢–ê–†–¢ –ö–ê–ú–ü–ê–ù–ò–ò:
–í —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

üìÖ –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
    """
    
    return pdf_content

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞
async def send_pdf_file(update: Update, context: ContextTypes.DEFAULT_TYPE, campaign_number: str):
    try:
        # –°–æ–∑–¥–∞–µ–º PDF —Ñ–∞–π–ª
        pdf_data = create_pdf_file(context.user_data, campaign_number)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
        await update.message.reply_document(
            document=io.BytesIO(pdf_data),
            filename=f"mediaplan_{campaign_number}.pdf",
            caption=f"üìÑ –í–∞—à –º–µ–¥–∏–∞–ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}"
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        pdf_content = generate_pdf_content(context.user_data, campaign_number)
        await update.message.reply_text(f"üìÑ –í–ê–® PDF –ú–ï–î–ò–ê–ü–õ–ê–ù\n\n{pdf_content}")
        return False

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
async def send_admin_notification(context, user_data, campaign_number):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    
    base_price, discount, final_price = calculate_campaign_price(context)
    
    notification_text = f"""
üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{campaign_number}

üë§ –ö–õ–ò–ï–ù–¢:
–ò–º—è: {user_data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
Email: {user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
–ö–æ–º–ø–∞–Ω–∏—è: {user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üí∞ –°–¢–û–ò–ú–û–°–¢–¨:
–ë–∞–∑–æ–≤–∞—è: {base_price}‚ÇΩ
–°–∫–∏–¥–∫–∞ 50%: -{discount}‚ÇΩ
–ò—Ç–æ–≥–æ–≤–∞—è: {final_price}‚ÇΩ

üéØ –ü–ê–†–ê–ú–ï–¢–†–´:
‚Ä¢ –†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏: {', '.join(user_data.get('selected_radios', []))}
‚Ä¢ –ü–µ—Ä–∏–æ–¥: {user_data.get('campaign_period_days', 30)} –¥–Ω–µ–π
‚Ä¢ –°–ª–æ—Ç—ã: {len(user_data.get('selected_time_slots', []))} —Å–ª–æ—Ç–æ–≤
‚Ä¢ –†—É–±—Ä–∏–∫–∞: {get_branded_section_name(user_data.get('branded_section'))}
‚Ä¢ –†–æ–ª–∏–∫: {PRODUCTION_OPTIONS[user_data.get('production_option', 'ready')]['name']}
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [
            InlineKeyboardButton("üìÑ –°–§–û–†–ú–ò–†–û–í–ê–¢–¨ PDF", 
                               callback_data=f"generate_pdf_{campaign_number}"),
        ],
        [
            InlineKeyboardButton(f"üìû {user_data.get('phone', '–¢–µ–ª–µ—Ñ–æ–Ω')}", 
                               callback_data=f"call_{user_data.get('phone', '')}"),
            InlineKeyboardButton(f"‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", 
                               callback_data=f"email_{user_data.get('email', '')}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await context.bot.send_message(
        chat_id=ADMIN_TELEGRAM_ID,
        text=notification_text,
        reply_markup=reply_markup
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
async def generate_client_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    campaign_number = f"R-{datetime.now().strftime('%H%M%S')}"
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π PDF
        if isinstance(update, Update) and update.message:
            success = await send_pdf_file(update, context, campaign_number)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ callback query, —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
            pdf_content = generate_pdf_content(context.user_data, campaign_number)
            await query.message.reply_text(f"üìÑ –í–ê–® PDF –ú–ï–î–ò–ê–ü–õ–ê–ù\n\n{pdf_content}")
            success = False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        pdf_content = generate_pdf_content(context.user_data, campaign_number)
        await query.message.reply_text(f"üìÑ –í–ê–® PDF –ú–ï–î–ò–ê–ü–õ–ê–ù\n\n{pdf_content}")
        success = False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await send_admin_pdf_notification(context, campaign_number, "")

async def send_admin_pdf_notification(context, campaign_number, pdf_content):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ PDF —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É"""
    
    admin_text = f"""
üìÑ –ù–û–í–´–ô PDF –ú–ï–î–ò–ê–ü–õ–ê–ù #{campaign_number}

üë§ –ö–õ–ò–ï–ù–¢:
{context.user_data.get('contact_name')} ‚Ä¢ {context.user_data.get('phone')}
{context.user_data.get('email')} ‚Ä¢ {context.user_data.get('company')}

üí∞ –°–¢–û–ò–ú–û–°–¢–¨: {context.user_data.get('final_price', 0)}‚ÇΩ
üéØ –°–¢–ê–ù–¶–ò–ò: {', '.join(context.user_data.get('selected_radios', []))}
"""
    
    keyboard = [
        [
            InlineKeyboardButton("üìû –ü–û–ó–í–û–ù–ò–¢–¨", 
                               callback_data=f"call_{context.user_data.get('phone', '')}"),
            InlineKeyboardButton("‚úâÔ∏è –ù–ê–ü–ò–°–ê–¢–¨", 
                               callback_data=f"email_{context.user_data.get('email', '')}")
        ],
        [
            InlineKeyboardButton("üìÑ –ü–û–õ–£–ß–ò–¢–¨ PDF –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê", 
                               callback_data=f"get_pdf_{campaign_number}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=ADMIN_TELEGRAM_ID,
        text=admin_text,
        reply_markup=reply_markup
    )

def get_branded_section_name(section):
    names = {
        'auto': '–ê–≤—Ç–æ—Ä—É–±—Ä–∏–∫–∏ (+20%)',
        'realty': '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (+15%)',
        'medical': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä—É–±—Ä–∏–∫–∏ (+25%)',
        'custom': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä—É–±—Ä–∏–∫–∞ (+30%)'
    }
    return names.get(section, '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –°–û–ó–î–ê–¢–¨ –ö–ê–ú–ü–ê–ù–ò–Æ", callback_data="create_campaign")],
        [InlineKeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–•–í–ê–¢–ê", callback_data="statistics")],
        [InlineKeyboardButton("üìã –ú–û–ò –ó–ê–ö–ê–ó–´", callback_data="my_orders")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ù–ê–°", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üî¥ –†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò\n"
        "üìç –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫ ‚Ä¢ –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫\n\n"
        "üìä 9,200+ –≤ –¥–µ–Ω—å\nüë• 68,000+ –≤ –º–µ—Å—è—Ü\n\n"
        "üéØ 52% –¥–æ–ª—è —Ä—ã–Ω–∫–∞\nüí∞ 4‚ÇΩ/—Å–µ–∫ –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞"
    )
    
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    return MAIN_MENU

# [–û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô - radio_selection, handle_radio_selection, campaign_period, –∏ —Ç.–¥.]
# ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å PDF
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if query.data == "create_campaign":
        context.user_data.clear()
        return await radio_selection(update, context)
    
    elif query.data == "statistics":
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–•–í–ê–¢–ê\n\n"
            "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ö–≤–∞—Ç: 9,200+\n"
            "‚Ä¢ –ú–µ—Å—è—á–Ω—ã–π –æ—Ö–≤–∞—Ç: 68,000+\n"
            "‚Ä¢ –†–∞–¥–∏—É—Å –≤–µ—â–∞–Ω–∏—è: 40 –∫–º –æ—Ç –≥–æ—Ä–æ–¥–æ–≤\n"
            "‚Ä¢ –î–æ–ª—è —Ä—ã–Ω–∫–∞: 52%\n"
            "‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: 4‚ÇΩ/—Å–µ–∫\n\n"
            "–ü–æ —Å—Ç–∞–Ω—Ü–∏—è–º (–≤ –¥–µ–Ω—å):\n"
            "‚Ä¢ LOVE RADIO: 1,600\n"
            "‚Ä¢ –ê–í–¢–û–†–ê–î–ò–û: 1,400\n"  
            "‚Ä¢ –†–ê–î–ò–û –î–ê–ß–ê: 1,800\n"
            "‚Ä¢ –†–ê–î–ò–û –®–ê–ù–°–û–ù: 1,200\n"
            "‚Ä¢ –†–ï–¢–†–û FM: 1,500\n"
            "‚Ä¢ –Æ–ú–û–† FM: 1,100\n\n"
            "üéØ –û—Ö–≤–∞—Ç—ã–≤–∞–µ–º:\n"
            "üìç –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫\n"
            "üìç –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫\n"  
            "üìç +40 –∫–º –≤–æ–∫—Ä—É–≥ + –¥–µ—Ä–µ–≤–Ω–∏\n\n"
            "üìà –ò—Å—Ç–æ—á–Ω–∏–∫: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ RADIOPORTAL.RU\n"
            "üîó https://radioportal.ru/radio-auditory-research\n\n"
            "üéß –í –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö —Å–ª—É—à–∞—é—Ç 2.5 —á–∞—Å–∞/–¥–µ–Ω—å\n"
            "üöó 65% –∞—É–¥–∏—Ç–æ—Ä–∏–∏ - –∞–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç—ã\n"
            "üèòÔ∏è +35% –æ—Ö–≤–∞—Ç –∑–∞ —Å—á–µ—Ç —Å–µ–ª—å—Å–∫–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏",
            reply_markup=reply_markup
        )
        return MAIN_MENU
    
    elif query.data == "my_orders":
        return await personal_cabinet(update, context)
    
    elif query.data == "about":
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ÑπÔ∏è –û –ù–ê–°\n\n"
            "üî¥ –†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò\n"
            "üìç –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫ ‚Ä¢ –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫\n\n"
            "–í–µ–¥—É—â–∏–π —Ä–∞–¥–∏–æ–≤–µ—â–∞—Ç–µ–ª—å –≤ —Ä–µ–≥–∏–æ–Ω–µ\n"
            "–û—Ö–≤–∞—Ç—ã–≤–∞–µ–º 52% —Ä–∞–¥–∏–æ—Ä—ã–Ω–∫–∞\n\n"
            "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å\n"
            "–•–ª—ã—Å—Ç—É–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á\n"
            "–û–ì–†–ù–ò–ü 315723200067362\n\n"
            "üìû +7 (34535) 5-01-51\n"
            "üìß a.khlistunov@gmail.com\n"
            "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: –ù–∞–¥–µ–∂–¥–∞",
            reply_markup=reply_markup
        )
        return MAIN_MENU
    
    # –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö PDF –ò –¢–ï–õ–ï–ì–†–ê–ú - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï
    elif query.data == "generate_pdf":
        campaign_number = f"R-{datetime.now().strftime('%H%M%S')}"
        try:
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π PDF
            pdf_data = create_pdf_file(context.user_data, campaign_number)
            await query.message.reply_document(
                document=io.BytesIO(pdf_data),
                filename=f"mediaplan_{campaign_number}.pdf",
                caption=f"üìÑ –í–∞—à –º–µ–¥–∏–∞–ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}"
            )
        except Exception as e:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            logger.error(f"–û—à–∏–±–∫–∞ PDF: {e}")
            pdf_content = generate_pdf_content(context.user_data, campaign_number)
            await query.message.reply_text(f"üìÑ –í–ê–® PDF –ú–ï–î–ò–ê–ü–õ–ê–ù\n\n{pdf_content}")
        return ConversationHandler.END
    
    elif query.data.startswith("send_to_telegram_"):
        campaign_number = query.data.replace("send_to_telegram_", "")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π PDF
            pdf_data = create_pdf_file(context.user_data, campaign_number)
            await query.message.reply_document(
                document=io.BytesIO(pdf_data),
                filename=f"mediaplan_{campaign_number}.pdf",
                caption=f"üìÑ –í–∞—à –º–µ–¥–∏–∞–ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}"
            )
        except Exception as e:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            logger.error(f"–û—à–∏–±–∫–∞ PDF: {e}")
            pdf_content = generate_pdf_content(context.user_data, campaign_number)
            await query.message.reply_text(f"üìã –í–ê–®–ê –ó–ê–Ø–í–ö–ê #{campaign_number}\n\n{pdf_content}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await send_admin_notification(context, context.user_data, campaign_number)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
        await query.message.reply_text(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É!\n"
            "üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞"
        )
        return ConversationHandler.END
    
    elif query.data == "new_order":
        context.user_data.clear()
        return await radio_selection(update, context)
    
    elif query.data == "personal_cabinet":
        return await personal_cabinet(update, context)
    
    # –û–ë–†–ê–ë–û–¢–ö–ê –ê–î–ú–ò–ù–°–ö–ò–• –ö–ù–û–ü–û–ö
    elif query.data.startswith("generate_pdf_"):
        campaign_number = query.data.replace("generate_pdf_", "")
        try:
            pdf_data = create_pdf_file(context.user_data, campaign_number)
            await query.message.reply_document(
                document=io.BytesIO(pdf_data),
                filename=f"mediaplan_{campaign_number}.pdf",
                caption=f"üìÑ PDF –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ #{campaign_number}"
            )
        except Exception as e:
            pdf_content = generate_pdf_content(context.user_data, campaign_number)
            await query.message.reply_text(f"üìÑ PDF –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê #{campaign_number}\n\n{pdf_content}")
    
    elif query.data.startswith("get_pdf_"):
        campaign_number = query.data.replace("get_pdf_", "")
        try:
            pdf_data = create_pdf_file(context.user_data, campaign_number)
            await query.message.reply_document(
                document=io.BytesIO(pdf_data),
                filename=f"mediaplan_{campaign_number}.pdf",
                caption=f"üìÑ PDF –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ #{campaign_number}"
            )
        except Exception as e:
            pdf_content = generate_pdf_content(context.user_data, campaign_number)
            await query.message.reply_text(f"üìÑ PDF –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê #{campaign_number}\n\n{pdf_content}")
    
    elif query.data.startswith("call_"):
        phone = query.data.replace("call_", "")
        await query.answer(f"üìû –ù–∞–±–µ—Ä–∏—Ç–µ: {phone}")
    
    elif query.data.startswith("email_"):
        email = query.data.replace("email_", "")
        await query.answer(f"‚úâÔ∏è Email: {email}")
    
    # [–û–°–¢–ê–õ–¨–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø –û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô]
    # ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)

    return MAIN_MENU

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(handle_main_menu, pattern='^.*$')
            ],
            RADIO_SELECTION: [
                CallbackQueryHandler(handle_radio_selection, pattern='^.*$')
            ],
            CAMPAIGN_PERIOD: [
                CallbackQueryHandler(handle_campaign_period, pattern='^.*$')
            ],
            TIME_SLOTS: [
                CallbackQueryHandler(handle_time_slots, pattern='^.*$')
            ],
            BRANDED_SECTIONS: [
                CallbackQueryHandler(handle_branded_sections, pattern='^.*$')
            ],
            CAMPAIGN_CREATOR: [
                CallbackQueryHandler(handle_main_menu, pattern='^(back_to_|skip_text|cancel_text|to_production_option|provide_own_audio|enter_text)'),
                CallbackQueryHandler(enter_campaign_text, pattern='^enter_text$')
            ],
            "WAITING_TEXT": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_campaign_text),
                CallbackQueryHandler(handle_main_menu, pattern='^back_to_creator$'),
                CallbackQueryHandler(handle_main_menu, pattern='^cancel_text$')
            ],
            PRODUCTION_OPTION: [
                CallbackQueryHandler(handle_production_option, pattern='^.*$')
            ],
            CONTACT_INFO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_contact_info),
                CallbackQueryHandler(handle_main_menu, pattern='^back_to_production$')
            ]
        },
        fallbacks=[CommandHandler('start', start)],
        allow_reentry=True
    )
    
    application.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    application.add_handler(CallbackQueryHandler(
        handle_main_menu, 
        pattern='^(generate_pdf|send_to_telegram_|personal_cabinet|new_order|back_to_main|generate_pdf_|get_pdf_|call_|email_)'
    ))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    if 'RENDER' in os.environ:
        application.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get('PORT', 8443)),
            url_path=TOKEN,
            webhook_url=f"https://{os.environ.get('RENDER_SERVICE_NAME', 'telegram-radio-bot')}.onrender.com/{TOKEN}"
        )
    else:
        application.run_polling()

if __name__ == '__main__':
    main()

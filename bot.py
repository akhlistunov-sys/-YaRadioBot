import os
import logging
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import io
import re

# –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø EXCEL
import openpyxl
from openpyxl.styles import Font, Border, Side, Alignment, PatternFill
from openpyxl.utils import get_column_letter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
MAIN_MENU, RADIO_SELECTION, CAMPAIGN_PERIOD, TIME_SLOTS, BRANDED_SECTIONS, CAMPAIGN_CREATOR, PRODUCTION_OPTION, CONTACT_INFO, FINAL_ACTIONS = range(9)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8281804030:AAEFEYgqigL3bdH4DL0zl1tW71fwwo_8cyU"

# –í–∞—à Telegram ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_TELEGRAM_ID = 174046571  # –¢–≤–æ–π —á–∏—Å–ª–æ–≤–æ–π ID

# –¶–µ–Ω—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
BASE_PRICE_PER_SECOND = 4
MIN_PRODUCTION_COST = 2000
MIN_BUDGET = 7000

# –ù–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –í–ò–ó–£–ê–õ–ê
E_CHECK = "‚úÖ"
E_UNCHECK = "‚ö™"
E_RADIO = "üìª"
E_PERIOD = "üìÖ"
E_TIME = "üïí"
E_COST = "üí∞"
E_REACH = "üéØ"
E_NEXT = "‚û°Ô∏è"
E_BACK = "‚¨ÖÔ∏è"
E_SKIP = "‚è©"
E_TTS = "üéß"
E_XLSX = "üíæ"
E_PDF = "üìÑ"
E_SEND = "üì§"
E_CANCEL = "‚ùå"

TIME_SLOTS_DATA = [
    {"time": "06:00-07:00", "label": "–ü–æ–¥—ä–µ–º, —Å–±–æ—Ä—ã", "premium": True},
    {"time": "07:00-08:00", "label": "–£—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏", "premium": True},
    {"time": "08:00-09:00", "label": "–ü–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ üöÄ", "premium": True},
    {"time": "09:00-10:00", "label": "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã", "premium": True},
    {"time": "10:00-11:00", "label": "–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å", "premium": False},
    {"time": "11:00-12:00", "label": "–ü—Ä–µ–¥–æ–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è", "premium": False},
    {"time": "12:00-13:00", "label": "–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤", "premium": False},
    {"time": "13:00-14:00", "label": "–ü–æ—Å–ª–µ –æ–±–µ–¥–∞", "premium": False},
    {"time": "14:00-15:00", "label": "–í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–Ω—è", "premium": False},
    {"time": "15:00-16:00", "label": "–†–∞–±–æ—á–∏–π —Ñ–∏–Ω–∏—à", "premium": False},
    {"time": "16:00-17:00", "label": "–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", "premium": True},
    {"time": "17:00-18:00", "label": "–í–µ—á–µ—Ä–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏", "premium": True},
    {"time": "18:00-19:00", "label": "–ü–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ üöÄ", "premium": True},
    {"time": "19:00-20:00", "label": "–î–æ–º–∞—à–Ω–∏–π –≤–µ—á–µ—Ä", "premium": True},
    {"time": "20:00-21:00", "label": "–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç–¥—ã—Ö", "premium": True}
]

BRANDED_SECTION_PRICES = {
    'auto': 1.2,      # +20%
    'realty': 1.15,   # +15%
    'medical': 1.25,  # +25%
    'custom': 1.3     # +30%
}

PRODUCTION_OPTIONS = {
    'standard': {'price': 2000, 'name': '–°–¢–ê–ù–î–ê–†–¢–ù–´–ô –†–û–õ–ò–ö', 'desc': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞, –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, 2 –ø—Ä–∞–≤–∫–∏, —Å—Ä–æ–∫: 2-3 –¥–Ω—è'},
    'premium': {'price': 4000, 'name': '–ü–†–ï–ú–ò–£–ú –†–û–õ–ò–ö', 'desc': '–û–∑–≤—É—á–∫–∞ 2-–º—è –≥–æ–ª–æ—Å–∞–º–∏, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –º—É–∑—ã–∫–∞, 5 –ø—Ä–∞–≤–æ–∫, —Å—Ä–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 1 –¥–µ–Ω—å'},
    'ready': {'price': 0, 'name': '–ì–û–¢–û–í–´–ô –†–û–õ–ò–ö', 'desc': '–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π —Ä–æ–ª–∏–∫, –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª–æ–º'}
}

PERIOD_OPTIONS = {
    '15_days': {'days': 15, 'name': '15 –î–ù–ï–ô (–º–∏–Ω–∏–º—É–º)'},
    '30_days': {'days': 30, 'name': '30 –î–ù–ï–ô (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º)'},
    '60_days': {'days': 60, 'name': '60 –î–ù–ï–ô'}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('campaigns.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS campaigns (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                campaign_number TEXT,
                radio_stations TEXT,
                campaign_period TEXT,
                time_slots TEXT,
                branded_section TEXT,
                campaign_text TEXT,
                production_option TEXT,
                contact_name TEXT,
                company TEXT,
                phone TEXT,
                email TEXT,
                base_price INTEGER,
                discount INTEGER,
                final_price INTEGER,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def validate_phone(phone: str) -> bool:
    pattern = r'^(\+7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
    return bool(re.match(pattern, phone))

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
def format_number(num):
    return f"{num:,}".replace(',', ' ')

# –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –æ—Ö–≤–∞—Ç–∞ (–û–ë–ù–û–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã—Ö–æ–¥–∞—Ö)
def calculate_campaign_price_and_reach(user_data):
    try:
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        base_duration = 30  # —Å–µ–∫—É–Ω–¥
        spots_per_slot = 5
        
        # –ü–µ—Ä–∏–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏
        period_days = user_data.get('campaign_period_days', 30)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π
        num_stations = len(user_data.get('selected_radios', []))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤
        num_slots = len(user_data.get('selected_time_slots', []))
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ñ–∏—Ä–∞
        spots_per_day_per_station = num_slots * spots_per_slot
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ (30 —Å–µ–∫ * 4—Ä/—Å–µ–∫)
        price_per_spot = base_duration * BASE_PRICE_PER_SECOND 
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ñ–∏—Ä–∞ (–±–µ–∑ –Ω–∞—Ü–µ–Ω–æ–∫)
        base_air_cost = price_per_spot * spots_per_day_per_station * period_days * num_stations
        
        # –ù–∞–¥–±–∞–≤–∫–∏ –∑–∞ –ø—Ä–µ–º–∏—É–º-–≤—Ä–µ–º—è (10% –∑–∞ —É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ)
        selected_time_slots = user_data.get('selected_time_slots', [])
        time_multiplier = 1.0
        
        for slot_index in selected_time_slots:
            if 0 <= slot_index < len(TIME_SLOTS_DATA):
                slot = TIME_SLOTS_DATA[slot_index]
                if slot['premium']:
                    # –ù–∞—Ü–µ–Ω–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–º–∏—É–º-—Å–ª–æ—Ç
                    time_multiplier = max(time_multiplier, 1.1)  # 10% –Ω–∞—Ü–µ–Ω–∫–∞
        
        # –ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ —Ä—É–±—Ä–∏–∫—É
        branded_multiplier = 1.0
        branded_section = user_data.get('branded_section')
        if branded_section in BRANDED_SECTION_PRICES:
            branded_multiplier = BRANDED_SECTION_PRICES[branded_section]
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        production_cost = user_data.get('production_cost', 0)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—ç—Ñ–∏—Ä + –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)
        air_cost = int(base_air_cost * time_multiplier * branded_multiplier)
        base_price = air_cost + production_cost
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É 50%
        discount = int(base_price * 0.5)
        discounted_price = base_price - discount
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç
        final_price = max(discounted_price, MIN_BUDGET)
        
        # –†–∞—Å—á–µ—Ç –æ—Ö–≤–∞—Ç–∞
        daily_listeners = sum({
            'LOVE RADIO': 1600,
            '–ê–í–¢–û–†–ê–î–ò–û': 1400,
            '–†–ê–î–ò–û –î–ê–ß–ê': 1800,
            '–†–ê–î–ò–û –®–ê–ù–°–û–ù': 1200,
            '–†–ï–¢–†–û FM': 1500,
            '–Æ–ú–û–† FM': 1100
        }.get(radio, 0) for radio in user_data.get('selected_radios', []))
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 30% —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)
        unique_daily_reach = int(daily_listeners * 0.7)
        total_reach = unique_daily_reach * period_days

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã—Ö–æ–¥–∞—Ö –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ (–ö–†–ò–¢–ò–ß–ù–û)
        user_data['spots_per_day_per_station'] = spots_per_slot 
        user_data['total_outputs_day'] = spots_per_day_per_station * num_stations
        user_data['total_outputs_period'] = user_data['total_outputs_day'] * period_days
        
        return base_price, discount, final_price, total_reach, daily_listeners
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        return 0, 0, 0, 0, 0

def get_branded_section_name(section):
    names = {
        'auto': '–ê–≤—Ç–æ—Ä—É–±—Ä–∏–∫–∏ (+20%)',
        'realty': '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (+15%)',
        'medical': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä—É–±—Ä–∏–∫–∏ (+25%)',
        'custom': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä—É–±—Ä–∏–∫–∞ (+30%)'
    }
    return names.get(section, '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞ (–û–ë–ù–û–í–õ–ï–ù–û: –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è)
def create_pdf_file(user_data, campaign_number):
    try:
        base_price, discount, final_price, total_reach, daily_listeners = calculate_campaign_price_and_reach(user_data)
        
        # –°–æ–∑–¥–∞–µ–º PDF –≤ –ø–∞–º—è—Ç–∏
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=72)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è PDF
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=16,
            textColor=colors.darkred,
            spaceAfter=30,
            alignment=1  # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=12,
            textColor=colors.darkred,
            spaceAfter=12,
        )
        
        normal_style = styles["Normal"]
        
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF
        story = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        story.append(Paragraph(f"–ú–ï–î–ò–ê–ü–õ–ê–ù –ö–ê–ú–ü–ê–ù–ò–ò #{campaign_number}", title_style))
        story.append(Paragraph("–†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò", heading_style))
        story.append(Spacer(1, 20))
        
        # –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        story.append(Paragraph("<b>‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b> –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!", normal_style))
        story.append(Spacer(1, 10))
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–ø–∞–Ω–∏–∏
        story.append(Paragraph("<b>üìä –ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ú–ü–ê–ù–ò–ò:</b>", heading_style))
        story.append(Paragraph(f"‚Ä¢ <b>–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏:</b> {', '.join(user_data.get('selected_radios', []))}", normal_style))
        story.append(Paragraph(f"‚Ä¢ <b>–ü–µ—Ä–∏–æ–¥:</b> {user_data.get('campaign_period_days', 30)} –¥–Ω–µ–π", normal_style))
        story.append(Paragraph(f"‚Ä¢ <b>–í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å:</b> {user_data.get('total_outputs_day', 0)}", normal_style))
        story.append(Paragraph(f"‚Ä¢ <b>–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä—É–±—Ä–∏–∫–∞:</b> {get_branded_section_name(user_data.get('branded_section'))}", normal_style))
        story.append(Paragraph(f"‚Ä¢ <b>–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:</b> {PRODUCTION_OPTIONS.get(user_data.get('production_option', 'ready'), {}).get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')}", normal_style))
        story.append(Spacer(1, 20))
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ù–û–í–´–ô –ë–õ–û–ö)
        story.append(Paragraph("<b>üïí –ü–û–î–†–û–ë–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï:</b>", heading_style))
        
        spots_per_day_per_station = user_data.get('spots_per_day_per_station', 5)
        period_days = user_data.get('campaign_period_days', 30)
        
        # –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_data = [
            ['–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è', '–°–ª–æ—Ç', '–í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å', '–í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤']
        ]
        
        selected_radios = user_data.get('selected_radios', [])
        selected_slots_indices = user_data.get('selected_time_slots', [])
        
        for radio in selected_radios:
            for slot_index in selected_slots_indices:
                if 0 <= slot_index < len(TIME_SLOTS_DATA):
                    slot = TIME_SLOTS_DATA[slot_index]
                    schedule_data.append([
                        radio, 
                        slot['time'], 
                        str(spots_per_day_per_station), 
                        format_number(spots_per_day_per_station * period_days)
                    ])

        schedule_table = Table(schedule_data, colWidths=[2*inch, 1.5*inch, 1*inch, 1*inch])
        schedule_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.Color(0.8, 0.8, 0.8)),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('ALIGN', (2, 0), (-1, -1), 'RIGHT'),
        ]))
        
        story.append(schedule_table)
        story.append(Spacer(1, 20))
        
        # –û—Ö–≤–∞—Ç –∫–∞–º–ø–∞–Ω–∏–∏
        story.append(Paragraph("<b>üéØ –†–ê–°–ß–ï–¢–ù–´–ô –û–•–í–ê–¢:</b>", heading_style))
        story.append(Paragraph(f"‚Ä¢ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ö–≤–∞—Ç:</b> ~{format_number(daily_listeners)} —á–µ–ª–æ–≤–µ–∫", normal_style))
        story.append(Paragraph(f"‚Ä¢ <b>–û–±—â–∏–π –æ—Ö–≤–∞—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥:</b> ~{format_number(total_reach)} —á–µ–ª–æ–≤–µ–∫", normal_style))
        story.append(Spacer(1, 20))
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        story.append(Paragraph("<b>üí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>", heading_style))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        production_cost = user_data.get('production_cost', 0)
        financial_data = [
            ['–ü–æ–∑–∏—Ü–∏—è', '–°—É–º–º–∞ (‚ÇΩ)'],
            ['–≠—Ñ–∏—Ä–Ω–æ–µ –≤—Ä–µ–º—è', format_number(base_price - production_cost)],
            ['–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ä–æ–ª–∏–∫–∞', format_number(production_cost)],
            ['', ''],
            ['–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', format_number(base_price)],
            ['–°–∫–∏–¥–∫–∞ 50%', f"-{format_number(discount)}"],
            ['', ''],
            ['–ò–¢–û–ì–û', format_number(final_price)]
        ]
        
        financial_table = Table(financial_data, colWidths=[3*inch, 1.5*inch])
        financial_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.Color(0.8, 0.8, 0.8)),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTNAME', (0, 7), (-1, 7), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
            ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
        ]))
        
        story.append(financial_table)
        story.append(Spacer(1, 20))
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        story.append(Paragraph("<b>üë§ –í–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´:</b>", heading_style))
        story.append(Paragraph(f"‚Ä¢ <b>–ò–º—è:</b> {user_data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}", normal_style))
        story.append(Paragraph(f"‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}", normal_style))
        story.append(Paragraph(f"‚Ä¢ <b>Email:</b> {user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}", normal_style))
        story.append(Paragraph(f"‚Ä¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}", normal_style))
        story.append(Spacer(1, 20))
        
        # –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        story.append(Paragraph("<b>üìû –ù–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´:</b>", heading_style))
        story.append(Paragraph("‚Ä¢ Email: a.khlistunov@gmail.com", normal_style))
        story.append(Paragraph("‚Ä¢ Telegram: t.me/AlexeyKhlistunov", normal_style))
        story.append(Spacer(1, 20))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        story.append(Paragraph("<b>üéØ –°–¢–ê–†–¢ –ö–ê–ú–ü–ê–ù–ò–ò:</b>", heading_style))
        story.append(Paragraph("–í —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", normal_style))
        story.append(Spacer(1, 20))
        
        # –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        story.append(Paragraph(f"üìÖ –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}", normal_style))
        
        # –°–æ–±–∏—Ä–∞–µ–º PDF
        doc.build(story)
        
        # –ü–æ–ª—É—á–∞–µ–º PDF –¥–∞–Ω–Ω—ã–µ
        pdf_data = buffer.getvalue()
        buffer.close()
        
        logger.info(f"PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}")
        return pdf_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
        return None

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞ (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø)
def create_excel_file(user_data, campaign_number):
    try:
        base_price, discount, final_price, total_reach, daily_listeners = calculate_campaign_price_and_reach(user_data)
        
        buffer = io.BytesIO()
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = f"–ú–µ–¥–∏–∞–ø–ª–∞–Ω #{campaign_number}"
        
        # –°—Ç–∏–ª–∏
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="800000", end_color="800000", fill_type="solid") # Dark Red
        border_style = Border(left=Side(style='thin'), 
                              right=Side(style='thin'), 
                              top=Side(style='thin'), 
                              bottom=Side(style='thin'))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws['A1'] = f"–ú–ï–î–ò–ê–ü–õ–ê–ù –ö–ê–ú–ü–ê–ù–ò–ò #{campaign_number}"
        ws['A1'].font = Font(bold=True, size=16, color="800000")
        ws.merge_cells('A1:E1')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–ø–∞–Ω–∏–∏
        ws.append([])
        ws.append(["–ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ú–ü–ê–ù–ò–ò"])
        ws['A3'].font = Font(bold=True)
        
        row_num = 4
        ws.cell(row=row_num, column=1, value="–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏:").font = Font(bold=True)
        ws.cell(row=row_num, column=2, value=', '.join(user_data.get('selected_radios', [])))
        row_num += 1
        ws.cell(row=row_num, column=1, value="–ü–µ—Ä–∏–æ–¥ (–¥–Ω–µ–π):").font = Font(bold=True)
        ws.cell(row=row_num, column=2, value=user_data.get('campaign_period_days', 30))
        row_num += 1
        ws.cell(row=row_num, column=1, value="–°–ª–æ—Ç–æ–≤ (–≤—ã—Ö–æ–¥—ã/–¥–µ–Ω—å/—Å—Ç–∞–Ω—Ü–∏—è):").font = Font(bold=True)
        ws.cell(row=row_num, column=2, value=len(user_data.get('selected_time_slots', [])) * user_data.get('spots_per_day_per_station', 5))
        row_num += 1
        ws.cell(row=row_num, column=1, value="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤:").font = Font(bold=True)
        ws.cell(row=row_num, column=2, value=user_data.get('total_outputs_period', 0))
        row_num += 1
        
        # –§–∏–Ω–∞–Ω—Å—ã
        row_num += 1
        ws.cell(row=row_num, column=1, value="–§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø").font = Font(bold=True)
        row_num += 1
        
        ws.cell(row=row_num, column=1, value="–ü–æ–∑–∏—Ü–∏—è").fill = header_fill
        ws.cell(row=row_num, column=1, value="–ü–æ–∑–∏—Ü–∏—è").font = header_font
        ws.cell(row=row_num, column=2, value="–°—É–º–º–∞ (‚ÇΩ)").fill = header_fill
        ws.cell(row=row_num, column=2, value="–°—É–º–º–∞ (‚ÇΩ)").font = header_font
        row_num += 1
        
        ws.cell(row=row_num, column=1, value="–≠—Ñ–∏—Ä–Ω–æ–µ –≤—Ä–µ–º—è")
        ws.cell(row=row_num, column=2, value=base_price - user_data.get('production_cost', 0)).number_format = '#,##0 ‚ÇΩ'
        row_num += 1
        ws.cell(row=row_num, column=1, value="–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ä–æ–ª–∏–∫–∞")
        ws.cell(row=row_num, column=2, value=user_data.get('production_cost', 0)).number_format = '#,##0 ‚ÇΩ'
        row_num += 1
        ws.cell(row=row_num, column=1, value="–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å").font = Font(bold=True)
        ws.cell(row=row_num, column=2, value=base_price).number_format = '#,##0 ‚ÇΩ'
        row_num += 1
        ws.cell(row=row_num, column=1, value="–°–∫–∏–¥–∫–∞ 50%").font = Font(bold=True)
        ws.cell(row=row_num, column=2, value=-discount).number_format = '#,##0 ‚ÇΩ'
        row_num += 1
        ws.cell(row=row_num, column=1, value="–ò–¢–û–ì–û").font = Font(bold=True, size=11, color="800000")
        ws.cell(row=row_num, column=2, value=final_price).number_format = '#,##0 ‚ÇΩ'
        row_num += 1
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–ª–æ—Ç–∞–º (–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ)
        row_num += 1
        ws.cell(row=row_num, column=1, value="–î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–ü–ò–°–ê–ù–ò–Ø").font = Font(bold=True)
        row_num += 1
        
        slot_headers = ["–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è", "–°–ª–æ—Ç", "–û–ø–∏—Å–∞–Ω–∏–µ", "–í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å", "–í—ã—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"]
        for col_num, value in enumerate(slot_headers, 1):
            cell = ws.cell(row=row_num, column=col_num, value=value)
            cell.font = header_font
            cell.fill = header_fill
        row_num += 1

        # –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        spots_per_slot = user_data.get('spots_per_day_per_station', 5)
        period_days = user_data.get('campaign_period_days', 30)
        
        selected_radios = user_data.get('selected_radios', [])
        selected_slots_indices = user_data.get('selected_time_slots', [])
        
        for radio in selected_radios:
            for slot_index in selected_slots_indices:
                if 0 <= slot_index < len(TIME_SLOTS_DATA):
                    slot = TIME_SLOTS_DATA[slot_index]
                    ws.cell(row=row_num, column=1, value=radio)
                    ws.cell(row=row_num, column=2, value=slot['time'])
                    ws.cell(row=row_num, column=3, value=slot['label'])
                    ws.cell(row=row_num, column=4, value=spots_per_slot)
                    ws.cell(row=row_num, column=5, value=spots_per_slot * period_days).number_format = '#,##0'
                    row_num += 1

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏ –∞–≤—Ç–æ—à–∏—Ä–∏–Ω—É
        for r in ws.iter_rows(min_row=row_num - len(selected_radios)*len(selected_slots_indices) - 1, max_row=row_num - 1):
            for cell in r:
                cell.border = border_style
        
        for col in ws.columns:
            max_length = 0
            column = col[0].column # Get the column number
            for cell in col:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2)
            ws.column_dimensions[get_column_letter(column)].width = adjusted_width
            
        wb.save(buffer)
        excel_data = buffer.getvalue()
        buffer.close()
        
        logger.info(f"Excel —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}")
        return excel_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel: {e}")
        return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ Excel (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø)
async def send_excel_file(update: Update, context: ContextTypes.DEFAULT_TYPE, campaign_number: str):
    try:
        excel_data = create_excel_file(context.user_data, campaign_number)
        
        if not excel_data:
            return False
            
        file_io = io.BytesIO(excel_data)
        file_io.name = f"mediaplan_{campaign_number}.xlsx"
        
        if hasattr(update, 'message') and update.message:
            await update.message.reply_document(
                document=file_io,
                filename=f"mediaplan_{campaign_number}.xlsx",
                caption=f"üíæ –í–∞—à –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–¥–∏–∞–ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number} –≤ Excel"
            )
        else:
            await update.callback_query.message.reply_document(
                document=file_io,
                filename=f"mediaplan_{campaign_number}.xlsx",
                caption=f"üíæ –í–∞—à –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–¥–∏–∞–ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number} –≤ Excel"
            )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel: {e}")
        return False

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def send_pdf_file(update: Update, context: ContextTypes.DEFAULT_TYPE, campaign_number: str):
    try:
        # –°–æ–∑–¥–∞–µ–º PDF —Ñ–∞–π–ª
        pdf_data = create_pdf_file(context.user_data, campaign_number)
        
        if not pdf_data:
            return False
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
        if hasattr(update, 'message') and update.message:
            await update.message.reply_document(
                document=io.BytesIO(pdf_data),
                filename=f"mediaplan_{campaign_number}.pdf",
                caption=f"üìÑ –í–∞—à –º–µ–¥–∏–∞–ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}"
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ callback query
            await update.callback_query.message.reply_document(
                document=io.BytesIO(pdf_data),
                filename=f"mediaplan_{campaign_number}.pdf",
                caption=f"üìÑ –í–∞—à –º–µ–¥–∏–∞–ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}"
            )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
        return False

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É (–û–ë–ù–û–í–õ–ï–ù–û: —Ñ–æ—Ä–º–∞—Ç –∏ user_id)
async def send_admin_notification(context, user_data, campaign_number):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        base_price, discount, final_price, total_reach, daily_listeners = calculate_campaign_price_and_reach(user_data)
        
        notification_text = f"""
üîî **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê** `{campaign_number}`
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
**üë§ –ö–õ–ò–ï–ù–¢:**
–ò–º—è: {user_data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–¢–µ–ª–µ—Ñ–æ–Ω: `{user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}`
Email: `{user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}`
–ö–æ–º–ø–∞–Ω–∏—è: {user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
Telegram ID: `{context._user_id}`

**üí∞ –°–¢–û–ò–ú–û–°–¢–¨:**
–ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ
–°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ
**–ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ**

**üéØ –ü–ê–†–ê–ú–ï–¢–†–´:**
‚Ä¢ –†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏: {', '.join(user_data.get('selected_radios', []))}
‚Ä¢ –ü–µ—Ä–∏–æ–¥: {user_data.get('campaign_period_days', 30)} –¥–Ω–µ–π
‚Ä¢ –í—ã—Ö–æ–¥–æ–≤/–¥–µ–Ω—å: {user_data.get('total_outputs_day', 0)}
‚Ä¢ –†—É–±—Ä–∏–∫–∞: {get_branded_section_name(user_data.get('branded_section'))}
‚Ä¢ –†–æ–ª–∏–∫: {PRODUCTION_OPTIONS.get(user_data.get('production_option', 'ready'), {}).get('name', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')}

**üìä –û–•–í–ê–¢:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: ~{format_number(daily_listeners)} —á–µ–ª.
‚Ä¢ –ó–∞ –ø–µ—Ä–∏–æ–¥: ~{format_number(total_reach)} —á–µ–ª.
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [
                InlineKeyboardButton(f"{E_PDF} PDF –û–¢–ß–ï–¢", callback_data=f"generate_pdf_admin_{campaign_number}"),
                InlineKeyboardButton(f"{E_XLSX} EXCEL –û–¢–ß–ï–¢", callback_data=f"generate_excel_admin_{campaign_number}"),
            ],
            [
                InlineKeyboardButton(f"üìû {user_data.get('phone', '–¢–µ–ª–µ—Ñ–æ–Ω')}", callback_data=f"call_{user_data.get('phone', '')}"),
                InlineKeyboardButton(f"‚úâÔ∏è Email", callback_data=f"email_{user_data.get('email', '')}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            chat_id=ADMIN_TELEGRAM_ID,
            text=notification_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ #{campaign_number}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        return False

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–û–ë–ù–û–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(f"üöÄ –°–û–ó–î–ê–¢–¨ –ö–ê–ú–ü–ê–ù–ò–Æ", callback_data="create_campaign")],
        [InlineKeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–•–í–ê–¢–ê", callback_data="statistics")],
        [InlineKeyboardButton("üìã –ú–û–ò –ó–ê–ö–ê–ó–´", callback_data="my_orders")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ù–ê–°", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"üéôÔ∏è **–†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò**\n"
        f"üìç *–Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫ ‚Ä¢ –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫*\n"
        "üìç –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è +35 –∫–º –≤–æ–∫—Ä—É–≥ –≥–æ—Ä–æ–¥–æ–≤\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{E_REACH} –û—Ö–≤–∞—Ç: **9,200+** –≤ –¥–µ–Ω—å\n"
        f"üë• –û—Ö–≤–∞—Ç: **68,000+** –≤ –º–µ—Å—è—Ü\n"
        f"üéØ **52%** –¥–æ–ª—è –º–µ—Å—Ç–Ω–æ–≥–æ —Ä–∞–¥–∏–æ—Ä—ã–Ω–∫–∞\n"
        f"{E_COST} **4‚ÇΩ/—Å–µ–∫** –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞"
    )
    
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    return MAIN_MENU

# –®–∞–≥ 1: –í—ã–±–æ—Ä —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π (–û–ë–ù–û–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç –∏ –∫–Ω–æ–ø–∫–∏)
async def radio_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_radios = context.user_data.get('selected_radios', [])
    total_listeners = sum({
        'LOVE RADIO': 1600,
        '–ê–í–¢–û–†–ê–î–ò–û': 1400,
        '–†–ê–î–ò–û –î–ê–ß–ê': 1800,
        '–†–ê–î–ò–û –®–ê–ù–°–û–ù': 1200,
        '–†–ï–¢–†–û FM': 1500,
        '–Æ–ú–û–† FM': 1100
    }.get(radio, 0) for radio in selected_radios)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏
    keyboard = []
    radio_stations = [
        ("LOVE RADIO", "radio_love", 1600, 'üë© –ú–æ–ª–æ–¥—ë–∂—å 18-35 –ª–µ—Ç'),
        ("–ê–í–¢–û–†–ê–î–ò–û", "radio_auto", 1400, 'üë® –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç—ã 25-50 –ª–µ—Ç'),
        ("–†–ê–î–ò–û –î–ê–ß–ê", "radio_dacha", 1800, 'üë®üë© –°–µ–º—å—è 35-65 –ª–µ—Ç'), 
        ("–†–ê–î–ò–û –®–ê–ù–°–û–ù", "radio_chanson", 1200, 'üë® –ú—É–∂—á–∏–Ω—ã 30-60 –ª–µ—Ç'),
        ("–†–ï–¢–†–û FM", "radio_retro", 1500, 'üë¥üëµ –¶–µ–Ω–∏—Ç–µ–ª–∏ —Ö–∏—Ç–æ–≤ 30-55 –ª–µ—Ç'),
        ("–Æ–ú–û–† FM", "radio_humor", 1100, 'üë¶üëß –°–ª—É—à–∞—Ç–µ–ª–∏ 25-45 –ª–µ—Ç')
    ]
    
    for name, callback, listeners, _ in radio_stations:
        emoji = E_CHECK if name in selected_radios else E_UNCHECK
        button_text = f"{emoji} {name} ({format_number(listeners)} —á/–¥–µ–Ω—å)"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback)])
    
    keyboard.append([InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_main")])
    keyboard.append([InlineKeyboardButton(f"{E_NEXT} –î–ê–õ–ï–ï", callback_data="to_campaign_period")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"**–®–ê–ì 1/7: –í–´–ë–û–† –†–ê–î–ò–û–°–¢–ê–ù–¶–ò–ô {E_RADIO}**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{E_CHECK if 'LOVE RADIO' in selected_radios else E_UNCHECK} **LOVE RADIO** | *1,600* | –ú–æ–ª–æ–¥—ë–∂—å 18-35\n"
        f"{E_CHECK if '–ê–í–¢–û–†–ê–î–ò–û' in selected_radios else E_UNCHECK} **–ê–í–¢–û–†–ê–î–ò–û** | *1,400* | –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç—ã 25-50\n"
        f"{E_CHECK if '–†–ê–î–ò–û –î–ê–ß–ê' in selected_radios else E_UNCHECK} **–†–ê–î–ò–û –î–ê–ß–ê** | *1,800* | –°–µ–º—å—è 35-65\n"
        f"{E_CHECK if '–†–ê–î–ò–û –®–ê–ù–°–û–ù' in selected_radios else E_UNCHECK} **–†–ê–î–ò–û –®–ê–ù–°–û–ù** | *1,200* | –ú—É–∂—á–∏–Ω—ã 30-60\n"
        f"{E_CHECK if '–†–ï–¢–†–û FM' in selected_radios else E_UNCHECK} **–†–ï–¢–†–û FM** | *1,500* | –¶–µ–Ω–∏—Ç–µ–ª–∏ —Ö–∏—Ç–æ–≤ 30-55\n"
        f"{E_CHECK if '–Æ–ú–û–† FM' in selected_radios else E_UNCHECK} **–Æ–ú–û–† FM** | *1,100* | –°–ª—É—à–∞—Ç–µ–ª–∏ 25-45\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"**–í–´–ë–†–ê–ù–û:** {len(selected_radios)} —Å—Ç–∞–Ω—Ü–∏–∏ | {E_REACH} {format_number(total_listeners)} —Å–ª—É—à–∞—Ç–µ–ª–µ–π\n"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return RADIO_SELECTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π (—É–±—Ä–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ details –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è UX)
async def handle_radio_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_main":
        return await start(update, context)
    
    radio_data = {
        'radio_love': 'LOVE RADIO',
        'radio_auto': '–ê–í–¢–û–†–ê–î–ò–û', 
        'radio_dacha': '–†–ê–î–ò–û –î–ê–ß–ê',
        'radio_chanson': '–†–ê–î–ò–û –®–ê–ù–°–û–ù',
        'radio_retro': '–†–ï–¢–†–û FM',
        'radio_humor': '–Æ–ú–û–† FM'
    }
    
    if query.data in radio_data:
        radio_name = radio_data[query.data]
        selected_radios = context.user_data.get('selected_radios', [])
        
        if radio_name in selected_radios:
            selected_radios.remove(radio_name)
        else:
            selected_radios.append(radio_name)
        
        context.user_data['selected_radios'] = selected_radios
        return await radio_selection(update, context)
    
    elif query.data == "to_campaign_period":
        if not context.user_data.get('selected_radios'):
            await query.answer(f"{E_CANCEL} –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é!", show_alert=True)
            return RADIO_SELECTION
        return await campaign_period(update, context)
    
    return RADIO_SELECTION

# –®–∞–≥ 2: –ü–µ—Ä–∏–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏ (–û–ë–ù–û–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç)
async def campaign_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_period = context.user_data.get('campaign_period')
    selected_radios = context.user_data.get('selected_radios', [])
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏—è—Ö
    stations_info = "üìª **–í–´–ë–†–ê–ù–´ –°–¢–ê–ù–¶–ò–ò:**\n"
    station_listeners = {
        'LOVE RADIO': 1600, '–ê–í–¢–û–†–ê–î–ò–û': 1400, '–†–ê–î–ò–û –î–ê–ß–ê': 1800,
        '–†–ê–î–ò–û –®–ê–ù–°–û–ù': 1200, '–†–ï–¢–†–û FM': 1500, '–Æ–ú–û–† FM': 1100
    }
    
    for radio in selected_radios:
        listeners = station_listeners.get(radio, 0)
        stations_info += f"‚Ä¢ *{radio}* ({format_number(listeners)} —á/–¥–µ–Ω—å)\n"
    
    keyboard = []
    for key, option in PERIOD_OPTIONS.items():
        is_selected = E_CHECK if selected_period == key else E_UNCHECK
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
        base_cost = 750 * option['days'] * len(selected_radios)
        discounted_cost = base_cost * 0.5
        keyboard.append([
            InlineKeyboardButton(
                f"{is_selected} {option['name']} - {format_number(int(discounted_cost))}‚ÇΩ", 
                callback_data=f"period_{key}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_radio")])
    keyboard.append([InlineKeyboardButton(f"{E_NEXT} –î–ê–õ–ï–ï", callback_data="to_time_slots")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"**–®–ê–ì 2/7: –ü–ï–†–ò–û–î –ö–ê–ú–ü–ê–ù–ò–ò {E_PERIOD}**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{stations_info}\n"
        f"üìÖ **–í–´–ë–ï–†–ò–¢–ï –ü–ï–†–ò–û–î –ö–ê–ú–ü–ê–ù–ò–ò**:\n\n"
        f"üéØ –°—Ç–∞—Ä—Ç –∫–∞–º–ø–∞–Ω–∏–∏: –≤ —Ç–µ—á–µ–Ω–∏–µ *3 –¥–Ω–µ–π* –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        f"‚è±Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: **15 –¥–Ω–µ–π**\n\n"
        f"–¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π 50%"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return CAMPAIGN_PERIOD

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def handle_campaign_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_radio":
        return await radio_selection(update, context)
    
    elif query.data.startswith("period_"):
        period_key = query.data.replace("period_", "")
        if period_key in PERIOD_OPTIONS:
            context.user_data['campaign_period'] = period_key
            context.user_data['campaign_period_days'] = PERIOD_OPTIONS[period_key]['days']
            return await campaign_period(update, context)
    
    elif query.data == "to_time_slots":
        if not context.user_data.get('campaign_period'):
            await query.answer(f"{E_CANCEL} –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏!", show_alert=True)
            return CAMPAIGN_PERIOD
        return await time_slots(update, context)
    
    return CAMPAIGN_PERIOD

# –®–∞–≥ 3: –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã (–û–ë–ù–û–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç)
async def time_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_slots = context.user_data.get('selected_time_slots', [])
    selected_radios = context.user_data.get('selected_radios', [])
    period_days = context.user_data.get('campaign_period_days', 30)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    keyboard.append([InlineKeyboardButton(f"{E_CHECK} –í–´–ë–†–ê–¢–¨ –í–°–ï –°–õ–û–¢–´", callback_data="select_all_slots")])
    
    # –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ—Ç—ã
    keyboard.append([InlineKeyboardButton("üåÖ –£–¢–†–ï–ù–ù–ò–ï –°–õ–û–¢–´ (–ü–†–ï–ú–ò–£–ú)", callback_data="header_morning")])
    for i in range(4):
        slot = TIME_SLOTS_DATA[i]
        emoji = E_CHECK if i in selected_slots else E_UNCHECK
        button_text = f"{emoji} {slot['time']} ‚Ä¢ {slot['label']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"time_{i}")])
    
    # –î–Ω–µ–≤–Ω—ã–µ —Å–ª–æ—Ç—ã
    keyboard.append([InlineKeyboardButton("‚òÄÔ∏è –î–ù–ï–í–ù–´–ï –°–õ–û–¢–´", callback_data="header_day")])
    for i in range(4, 10):
        slot = TIME_SLOTS_DATA[i]
        emoji = E_CHECK if i in selected_slots else E_UNCHECK
        button_text = f"{emoji} {slot['time']} ‚Ä¢ {slot['label']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"time_{i}")])
    
    # –í–µ—á–µ—Ä–Ω–∏–µ —Å–ª–æ—Ç—ã
    keyboard.append([InlineKeyboardButton("üåá –í–ï–ß–ï–†–ù–ò–ï –°–õ–û–¢–´ (–ü–†–ï–ú–ò–£–ú)", callback_data="header_evening")])
    for i in range(10, 15):
        slot = TIME_SLOTS_DATA[i]
        emoji = E_CHECK if i in selected_slots else E_UNCHECK
        button_text = f"{emoji} {slot['time']} ‚Ä¢ {slot['label']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"time_{i}")])
    
    keyboard.append([InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_period")])
    keyboard.append([InlineKeyboardButton(f"{E_NEXT} –î–ê–õ–ï–ï", callback_data="to_branded_sections")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    total_slots = len(selected_slots)
    total_outputs_per_day = total_slots * 5 * len(selected_radios)
    total_outputs_period = total_outputs_per_day * period_days
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    stations_text = "üìª **–°–¢–ê–ù–¶–ò–ò:** " + ", ".join([f"*{radio}*" for radio in selected_radios])
    
    text = (
        f"**–®–ê–ì 3/7: –í–†–ï–ú–ï–ù–ù–´–ï –°–õ–û–¢–´ {E_TIME}**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{stations_text}\n"
        f"{E_PERIOD} **–ü–ï–†–ò–û–î:** {period_days} –¥–Ω–µ–π\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üïí **–í–´–ë–ï–†–ò–¢–ï –í–†–ï–ú–Ø –í–´–•–û–î–ê –†–û–õ–ò–ö–û–í**\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞:**\n"
        f"‚Ä¢ –í—ã–±—Ä–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: **{total_slots}**\n"
        f"‚Ä¢ –í—ã—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –≤—Å–µ—Ö —Ä–∞–¥–∏–æ: **{total_outputs_per_day}**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: **{format_number(total_outputs_period)}**\n\n"
        f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return TIME_SLOTS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def handle_time_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_period":
        return await campaign_period(update, context)
    
    elif query.data == "select_all_slots":
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ 15 —Å–ª–æ—Ç–æ–≤
        context.user_data['selected_time_slots'] = list(range(15))
        return await time_slots(update, context)
    
    elif query.data.startswith("time_"):
        slot_index = int(query.data.split("_")[1])
        selected_slots = context.user_data.get('selected_time_slots', [])
        
        if slot_index in selected_slots:
            selected_slots.remove(slot_index)
        else:
            selected_slots.append(slot_index)
        
        context.user_data['selected_time_slots'] = selected_slots
        return await time_slots(update, context)
    
    elif query.data == "to_branded_sections":
        if not context.user_data.get('selected_time_slots'):
            await query.answer(f"{E_CANCEL} –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç!", show_alert=True)
            return TIME_SLOTS
        return await branded_sections(update, context)
    
    return TIME_SLOTS

# –®–∞–≥ 4: –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏ (–û–ë–ù–û–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç)
async def branded_sections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_branded = context.user_data.get('branded_section')
    
    keyboard = [
        [InlineKeyboardButton(f"{E_CHECK} –ê–í–¢–û–†–£–ë–†–ò–ö–ò" if selected_branded == 'auto' else f"{E_UNCHECK} –ê–í–¢–û–†–£–ë–†–ò–ö–ò", callback_data="branded_auto")],
        [InlineKeyboardButton(f"{E_CHECK} –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨" if selected_branded == 'realty' else f"{E_UNCHECK} –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨", callback_data="branded_realty")],
        [InlineKeyboardButton(f"{E_CHECK} –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï" if selected_branded == 'medical' else f"{E_UNCHECK} –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï", callback_data="branded_medical")],
        [InlineKeyboardButton(f"{E_CHECK} –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø" if selected_branded == 'custom' else f"{E_UNCHECK} –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø", callback_data="branded_custom")],
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä", callback_data="show_example")],
        [InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_time")],
        [InlineKeyboardButton(f"{E_SKIP} –ü–†–û–ü–£–°–¢–ò–¢–¨", callback_data="skip_branded")],
        [InlineKeyboardButton(f"{E_NEXT} –î–ê–õ–ï–ï", callback_data="to_campaign_creator")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"**–®–ê–ì 4/7: –ë–†–ï–ù–î–ò–†–û–í–ê–ù–ù–´–ï –†–£–ë–†–ò–ö–ò**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üéôÔ∏è **–í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –†–£–ë–†–ò–ö–ò**:\n\n"
        f"*{E_CHECK if selected_branded == 'auto' else E_UNCHECK} –ê–í–¢–û–†–£–ë–†–ò–ö–ò* (+20%)\n"
        "–ì–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤\n"
        f"*{E_CHECK if selected_branded == 'realty' else E_UNCHECK} –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨* (+15%)\n"
        "–†—É–±—Ä–∏–∫–∏ –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n"
        f"*{E_CHECK if selected_branded == 'medical' else E_UNCHECK} –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –†–£–ë–†–ò–ö–ò* (+25%)\n"
        "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –∫–ª–∏–Ω–∏–∫\n"
        f"*{E_CHECK if selected_branded == 'custom' else E_UNCHECK} –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø –†–£–ë–†–ò–ö–ê* (+30%)\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥ –≤–∞—à –±–∏–∑–Ω–µ—Å\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "–ù–∞–¥–±–∞–≤–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —ç—Ñ–∏—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return BRANDED_SECTIONS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä—É–±—Ä–∏–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def handle_branded_sections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_time":
        return await time_slots(update, context)
    
    elif query.data == "show_example":
        example_text = (
            "**–ü–†–ò–ú–ï–† –ë–†–ï–ù–î–ò–†–û–í–ê–ù–ù–û–ô –†–£–ë–†–ò–ö–ò**\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —É—Å–ª—É–≥ –¢—é–º–µ–Ω—Å–∫–æ–≥–æ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—É—á–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –Ω–∞ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è—Ö –¢—é–º–µ–Ω–∏.\n\n"
            "–§–æ—Ä–º–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:\n"
            "‚Ä¢ –†–µ–∫–ª–∞–º–Ω—ã–µ —Ä–æ–ª–∏–∫–∏ (15‚Äì30 —Å–µ–∫.)\n"
            "‚Ä¢ –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏ ‚Äî ¬´–ó–¥–æ—Ä–æ–≤–æ–µ —Å–µ—Ä–¥—Ü–µ¬ª, ¬´–°–æ–≤–µ—Ç –≤—Ä–∞—á–∞¬ª\n\n"
            "–ü—Ä–∏–º–µ—Ä —Ä—É–±—Ä–∏–∫–∏ (30 —Å–µ–∫.):\n"
            "¬´‚ù§Ô∏è –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å —Å–µ—Ä—å—ë–∑–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è? –í –¢—é–º–µ–Ω—Å–∫–æ–º –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –Ω–∞—É—á–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –ó–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö –±–ª–∏–∑–∫–∏—Ö ‚Äî –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö —Ä—É–∫–∞—Ö!¬ª"
        )
        
        keyboard = [[InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î –ö –í–´–ë–û–†–£ –†–£–ë–†–ò–ö", callback_data="back_to_branded")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(example_text, reply_markup=reply_markup, parse_mode='Markdown')
        return BRANDED_SECTIONS
    
    elif query.data == "back_to_branded":
        return await branded_sections(update, context)
    
    branded_data = {
        'branded_auto': 'auto',
        'branded_realty': 'realty',
        'branded_medical': 'medical',
        'branded_custom': 'custom'
    }
    
    if query.data in branded_data:
        context.user_data['branded_section'] = branded_data[query.data]
        return await branded_sections(update, context)
    
    elif query.data == "skip_branded":
        context.user_data['branded_section'] = None
        return await campaign_creator(update, context)
    
    elif query.data == "to_campaign_creator":
        # –ï—Å–ª–∏ —Ä—É–±—Ä–∏–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, —Å—Ç–∞–≤–∏–º None
        if 'branded_section' not in context.user_data:
             context.user_data['branded_section'] = None
        return await campaign_creator(update, context)
    
    return BRANDED_SECTIONS

# –®–∞–≥ 5: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–ª–∏–∫–∞ (–û–ë–ù–û–í–õ–ï–ù–û: TTS –∫–Ω–æ–ø–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç)
async def campaign_creator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ—Ö–≤–∞—Ç (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω)
    base_price, discount, final_price, total_reach, daily_listeners = calculate_campaign_price_and_reach(context.user_data)
    context.user_data['base_price'] = base_price
    context.user_data['discount'] = discount
    context.user_data['final_price'] = final_price
    
    provide_own = context.user_data.get('provide_own_audio', False)
    campaign_text = context.user_data.get('campaign_text', '')
    char_count = len(campaign_text) if campaign_text else 0
    
    tts_button = [InlineKeyboardButton(f"{E_TTS} –ü—Ä–æ—Å–ª—É—à–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data="request_tts")] if campaign_text else []

    keyboard = [
        [InlineKeyboardButton("üìù –í–í–ï–°–¢–ò –¢–ï–ö–°–¢ –†–û–õ–ò–ö–ê", callback_data="enter_text")],
        tts_button,
        [InlineKeyboardButton(f"{E_CHECK} –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫" if provide_own else f"{E_UNCHECK} –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫", callback_data="provide_own_audio")],
        [InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_branded")],
        [InlineKeyboardButton(f"{E_SKIP} –ü–†–û–ü–£–°–¢–ò–¢–¨ –¢–ï–ö–°–¢", callback_data="skip_text")],
        [InlineKeyboardButton(f"{E_NEXT} –î–ê–õ–ï–ï", callback_data="to_production_option")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"**–®–ê–ì 5/7: –ö–û–ù–°–¢–†–£–ö–¢–û–† –†–û–õ–ò–ö–ê**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üìù **–í–ê–® –¢–ï–ö–°–¢** (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):\n\n"
        f"`{campaign_text if campaign_text else '[–í–∞—à —Ç–µ–∫—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å]'}`\n\n"
        f"‚óã **{char_count}** –∑–Ω–∞–∫–æ–≤ –∏–∑ 500\n"
        f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: **{max(15, char_count // 7) if char_count > 0 else 0}** —Å–µ–∫—É–Ω–¥\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üí∞ **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å**:\n"
        f"   –ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ\n"
        f"   –°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ\n"
        f"   **–ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ**\n\n"
        f"üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ö–≤–∞—Ç –∫–∞–º–ø–∞–Ω–∏–∏: **~{format_number(total_reach)}** —á–µ–ª–æ–≤–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
        f"{E_CHECK if provide_own else E_UNCHECK} *–ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫* (–µ—Å–ª–∏ –æ—Ç–º–µ—á–µ–Ω–æ, —à–∞–≥ 6 –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω)"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return CAMPAIGN_CREATOR

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ TTS (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø-–ó–ê–ì–õ–£–®–ö–ê)
async def handle_tts_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer(f"{E_TTS} –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ... (–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª Text-to-Speech –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è API –¥–ª—è –æ–∑–≤—É—á–∫–∏)", show_alert=True)
    return CAMPAIGN_CREATOR

# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Ä–æ–ª–∏–∫–∞ (–û–ë–ù–û–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç)
async def enter_campaign_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_creator")],
        [InlineKeyboardButton(f"{E_CANCEL} –û–¢–ú–ï–ù–ê –í–í–û–î–ê", callback_data="cancel_text")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìù **–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–¥–∏–æ—Ä–æ–ª–∏–∫–∞** (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "`–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –¢—é–º–µ–Ω–∏! –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏. –í—ã–≥–æ–¥–Ω—ã–π —Ç—Ä–µ–π–¥-–∏–Ω –∏ –∫—Ä–µ–¥–∏—Ç 0%. –¢–µ—Å—Ç-–¥—Ä–∞–π–≤ –≤ –¥–µ–Ω—å –æ–±—Ä–∞—â–µ–Ω–∏—è!`\n\n"
        "**–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return "WAITING_TEXT"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–æ–ª–∏–∫–∞ (–û–ë–ù–û–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç)
async def process_campaign_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if len(text) > 500:
        await update.message.reply_text(f"{E_CANCEL} –¢–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç 500 –∑–Ω–∞–∫–æ–≤. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return "WAITING_TEXT"
    
    context.user_data['campaign_text'] = text
    context.user_data['provide_own_audio'] = False
    
    base_price, discount, final_price, total_reach, daily_listeners = calculate_campaign_price_and_reach(context.user_data)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π TTS, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
    tts_button = [InlineKeyboardButton(f"{E_TTS} –ü—Ä–æ—Å–ª—É—à–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data="request_tts")] if text else []
    
    keyboard = [
        tts_button,
        [InlineKeyboardButton(f"{E_NEXT} –î–ê–õ–ï–ï", callback_data="to_production_option")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    char_count = len(text)
    text_display = (
        f"**–®–ê–ì 5/7: –ö–û–ù–°–¢–†–£–ö–¢–û–† –†–û–õ–ò–ö–ê**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üìù **–í–ê–® –¢–ï–ö–°–¢** (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):\n\n"
        f"`{text}`\n\n"
        f"‚óã **{char_count}** –∑–Ω–∞–∫–æ–≤ –∏–∑ 500\n"
        f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: **{max(15, char_count // 7)}** —Å–µ–∫—É–Ω–¥\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üí∞ **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å**:\n"
        f"   –ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ\n"
        f"   –°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ\n"
        f"   **–ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ**\n\n"
        f"üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ö–≤–∞—Ç –∫–∞–º–ø–∞–Ω–∏–∏: **~{format_number(total_reach)}** —á–µ–ª–æ–≤–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
        f"{E_UNCHECK} *–ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫*"
    )
    
    await update.message.reply_text(text_display, reply_markup=reply_markup, parse_mode='Markdown')
    return CAMPAIGN_CREATOR

# –®–∞–≥ 6: –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ä–æ–ª–∏–∫–∞ (–û–ë–ù–û–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç)
async def production_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª "–ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
    if context.user_data.get('provide_own_audio'):
        context.user_data['production_option'] = 'ready'
        context.user_data['production_cost'] = 0
        return await contact_info(update, context)
    
    selected_production = context.user_data.get('production_option')
    
    keyboard = []
    for key, option in PRODUCTION_OPTIONS.items():
        is_selected = E_CHECK if selected_production == key else E_UNCHECK
        keyboard.append([
            InlineKeyboardButton(
                f"{is_selected} {option['name']} - –æ—Ç {format_number(option['price'])}‚ÇΩ", 
                callback_data=f"production_{key}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_creator")])
    keyboard.append([InlineKeyboardButton(f"{E_NEXT} –î–ê–õ–ï–ï", callback_data="to_contact_info")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"**–®–ê–ì 6/7: –ü–†–û–ò–ó–í–û–î–°–¢–í–û –†–û–õ–ò–ö–ê**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üéôÔ∏è **–í–´–ë–ï–†–ò–¢–ï –í–ê–†–ò–ê–ù–¢ –†–û–õ–ò–ö–ê**:\n\n"
        f"*{E_UNCHECK} –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –†–û–õ–ò–ö* - –æ—Ç **2,000‚ÇΩ**\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞, 2 –ø—Ä–∞–≤–∫–∏, 2-3 –¥–Ω—è\n"
        f"*{E_UNCHECK} –ü–†–ï–ú–ò–£–ú –†–û–õ–ò–ö* - –æ—Ç **4,000‚ÇΩ**\n"
        "‚Ä¢ –û–∑–≤—É—á–∫–∞ 2-–º—è –≥–æ–ª–æ—Å–∞–º–∏, —Å—Ä–æ—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 1 –¥–µ–Ω—å\n"
        f"*{E_UNCHECK} –ì–û–¢–û–í–´–ô –†–û–õ–ò–ö* - **0‚ÇΩ**\n"
        "‚Ä¢ –ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫\n\n"
        f"{E_COST} –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ *–ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è* –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—É–º–º–µ."
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return PRODUCTION_OPTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def handle_production_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_creator":
        return await campaign_creator(update, context)
    
    elif query.data.startswith("production_"):
        production_key = query.data.replace("production_", "")
        if production_key in PRODUCTION_OPTIONS:
            context.user_data['production_option'] = production_key
            context.user_data['production_cost'] = PRODUCTION_OPTIONS[production_key]['price']
            return await production_option(update, context)
    
    elif query.data == "to_contact_info":
        if not context.user_data.get('production_option'):
            await query.answer(f"{E_CANCEL} –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ä–æ–ª–∏–∫–∞!", show_alert=True)
            return PRODUCTION_OPTION
        return await contact_info(update, context)
    
    return PRODUCTION_OPTION

# –®–∞–≥ 7: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–û–ë–ù–û–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç)
async def contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    base_price, discount, final_price, total_reach, daily_listeners = calculate_campaign_price_and_reach(context.user_data)
    
    keyboard = [[InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_production")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"**–®–ê–ì 7/7: –ö–û–ù–¢–ê–ö–¢–ù–´–ï –î–ê–ù–ù–´–ï**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{E_COST} **–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏**:\n"
        f"   –ë–∞–∑–æ–≤–∞—è: {format_number(base_price)}‚ÇΩ\n"
        f"   –°–∫–∏–¥–∫–∞ 50%: -{format_number(discount)}‚ÇΩ\n"
        f"   **–ò—Ç–æ–≥–æ–≤–∞—è: {format_number(final_price)}‚ÇΩ**\n\n"
        f"{E_REACH} **–ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ö–≤–∞—Ç**: ~{format_number(total_reach)} —á–µ–ª–æ–≤–µ–∫\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üìù **–í–í–ï–î–ò–¢–ï –í–ê–®–ï –ò–ú–Ø**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"(–Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return CONTACT_INFO

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–ë–ù–û–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –∏ –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
async def process_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        
        # 1. –ò–º—è
        if 'contact_name' not in context.user_data:
            context.user_data['contact_name'] = text
            await update.message.reply_text(
                "üìû **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω**:\n\n"
                "–§–æ—Ä–º–∞—Ç: `+79XXXXXXXXX`\n"
                "–ü—Ä–∏–º–µ—Ä: `+79123456789`",
                parse_mode='Markdown'
            )
            return CONTACT_INFO
        
        # 2. –¢–µ–ª–µ—Ñ–æ–Ω
        elif 'phone' not in context.user_data:
            if not validate_phone(text):
                await update.message.reply_text(f"{E_CANCEL} **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞**. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `+79XXXXXXXXX`", parse_mode='Markdown')
                return CONTACT_INFO
            context.user_data['phone'] = text
            await update.message.reply_text("üìß **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email**:", parse_mode='Markdown')
            return CONTACT_INFO
        
        # 3. Email
        elif 'email' not in context.user_data:
            context.user_data['email'] = text
            await update.message.reply_text("üè¢ **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏**:", parse_mode='Markdown')
            return CONTACT_INFO
        
        # 4. –ö–æ–º–ø–∞–Ω–∏—è
        elif 'company' not in context.user_data:
            context.user_data['company'] = text
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ—Ö–≤–∞—Ç
            base_price, discount, final_price, total_reach, daily_listeners = calculate_campaign_price_and_reach(context.user_data)
            context.user_data['base_price'] = base_price
            context.user_data['discount'] = discount
            context.user_data['final_price'] = final_price
            
            # --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–û–ú–ï–†–ê –ó–ê–Ø–í–ö–ò (–ö–†–ò–¢–ò–ß–ù–û) ---
            campaign_number = f"R-{datetime.now().strftime('%d%m%y')}-{datetime.now().strftime('%H%M%S')}"
            context.user_data['campaign_number'] = campaign_number # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            context.user_data['user_id'] = update.message.from_user.id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
            conn = sqlite3.connect('campaigns.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO campaigns 
                (user_id, campaign_number, radio_stations, campaign_period, time_slots, branded_section, campaign_text, production_option, contact_name, company, phone, email, base_price, discount, final_price)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                context.user_data['user_id'],
                campaign_number,
                ','.join(context.user_data.get('selected_radios', [])),
                context.user_data.get('campaign_period', ''),
                ','.join(map(str, context.user_data.get('selected_time_slots', []))),
                context.user_data.get('branded_section', ''),
                context.user_data.get('campaign_text', ''),
                context.user_data.get('production_option', ''),
                context.user_data.get('contact_name', ''),
                context.user_data.get('company', ''),
                context.user_data.get('phone', ''),
                context.user_data.get('email', ''),
                base_price,
                discount,
                final_price
            ))
            
            conn.commit()
            conn.close()
            
            # --- –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–£ (–ö–†–ò–¢–ò–ß–ù–û) ---
            await send_admin_notification(context, context.user_data, campaign_number)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [
                    InlineKeyboardButton(f"{E_PDF} –°–§–û–†–ú–ò–†–û–í–ê–¢–¨ PDF", callback_data="generate_pdf"),
                    InlineKeyboardButton(f"{E_XLSX} –°–§–û–†–ú–ò–†–û–í–ê–¢–¨ EXCEL", callback_data="generate_excel")
                ],
                [
                    InlineKeyboardButton(f"{E_SEND} –û–¢–ü–†–ê–í–ò–¢–¨ –°–ï–ë–ï –í –¢–ï–õ–ï–ì–†–ê–ú–ú", callback_data=f"send_to_telegram_{campaign_number}")
                ],
                [InlineKeyboardButton("üìã –ú–û–ò –ó–ê–ö–ê–ó–´", callback_data="personal_cabinet")],
                [InlineKeyboardButton("üöÄ –ù–û–í–´–ô –ó–ê–ö–ê–ó", callback_data="new_order")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"{E_CHECK} **–ó–ê–Ø–í–ö–ê –ü–†–ò–ù–Ø–¢–ê!**\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üòä –ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É.\n"
                "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä *—É–∂–µ* –ø–æ–ª—É—á–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É.\n\n"
                f"üìã **‚Ññ –∑–∞—è–≤–∫–∏**: `{campaign_number}`\n"
                f"üìÖ **–°—Ç–∞—Ä—Ç**: –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π\n"
                f"{E_COST} **–°—É–º–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π 50%**: {format_number(final_price)}‚ÇΩ\n"
                f"{E_REACH} **–ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ö–≤–∞—Ç**: ~{format_number(total_reach)} —á–µ–ª–æ–≤–µ–∫\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return FINAL_ACTIONS
            
    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ process_contact_info: {e}")
        await update.message.reply_text(
            f"{E_CANCEL} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start\n"
            "–ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: t.me/AlexeyKhlistunov"
        )
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –¥–æ–±–∞–≤–ª–µ–Ω Excel)
async def handle_final_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
        campaign_number = context.user_data.get('campaign_number', 'R-000000') # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        
        if query.data == "generate_pdf":
            success = await send_pdf_file(update, context, campaign_number)
            if not success:
                await query.message.reply_text(f"{E_CANCEL} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF –¥–ª—è #{campaign_number}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return FINAL_ACTIONS
        
        elif query.data == "generate_excel":
            success = await send_excel_file(update, context, campaign_number)
            if not success:
                await query.message.reply_text(f"{E_CANCEL} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel –¥–ª—è #{campaign_number}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return FINAL_ACTIONS
        
        elif query.data.startswith("send_to_telegram_"):
            campaign_number_from_callback = query.data.replace("send_to_telegram_", "")
            
            pdf_success = await send_pdf_file(update, context, campaign_number_from_callback)
            excel_success = await send_excel_file(update, context, campaign_number_from_callback)

            if pdf_success or excel_success:
                await query.message.reply_text(
                    f"{E_CHECK} –û—Ç—á–µ—Ç—ã –≤ PDF –∏ Excel –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n"
                    "–ú–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –ø–æ–ª—É—á–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É."
                )
            else:
                 await query.message.reply_text(f"{E_CANCEL} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤. –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            
            return FINAL_ACTIONS
        
        elif query.data == "personal_cabinet":
            return await personal_cabinet(update, context)
        
        elif query.data == "new_order":
            context.user_data.clear()
            await query.message.reply_text("üöÄ **–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é!**", parse_mode='Markdown')
            return await radio_selection(update, context)
        
        return FINAL_ACTIONS
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_final_actions: {e}")
        await query.message.reply_text(f"{E_CANCEL} –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        return ConversationHandler.END

# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def personal_cabinet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    conn = sqlite3.connect('campaigns.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT campaign_number, status, final_price, created_at FROM campaigns WHERE user_id = ? ORDER BY created_at DESC LIMIT 5', (user_id,))
    orders = cursor.fetchall()
    conn.close()
    
    if orders:
        orders_text = "**üìã –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ö–ê–ó–´:**\n\n"
        for order in orders:
            orders_text += f"`{order[0]}` | *{order[1]}* | **{format_number(order[2])}‚ÇΩ** | {order[3][:10]}\n"
    else:
        orders_text = "üìã **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤**"
    
    keyboard = [[InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_final")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"**üìã –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{orders_text}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return FINAL_ACTIONS

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ö–≤–∞—Ç–∞ (–û–ë–ù–û–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç)
async def statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [[InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "**üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–•–í–ê–¢–ê**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ö–≤–∞—Ç: **9,200+**\n"
        f"‚Ä¢ –ú–µ—Å—è—á–Ω—ã–π –æ—Ö–≤–∞—Ç: **68,000+**\n"
        f"‚Ä¢ –î–æ–ª—è —Ä—ã–Ω–∫–∞: **52%**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "**–ü–æ —Å—Ç–∞–Ω—Ü–∏—è–º (–≤ –¥–µ–Ω—å):**\n"
        "‚Ä¢ LOVE RADIO: 1,600\n"
        "‚Ä¢ –ê–í–¢–û–†–ê–î–ò–û: 1,400\n"  
        "‚Ä¢ –†–ê–î–ò–û –î–ê–ß–ê: 1,800\n"
        "‚Ä¢ –†–ê–î–ò–û –®–ê–ù–°–û–ù: 1,200\n"
        "‚Ä¢ –†–ï–¢–†–û FM: 1,500\n"
        "‚Ä¢ –Æ–ú–û–† FM: 1,100\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "**üéØ –û—Ö–≤–∞—Ç—ã–≤–∞–µ–º:**\n"
        "üìç –Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫, –ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫ –∏ +35 –∫–º –≤–æ–∫—Ä—É–≥ –≥–æ—Ä–æ–¥–æ–≤\n\n"
        "üéß –í –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö —Å–ª—É—à–∞—é—Ç *2.5 —á–∞—Å–∞/–¥–µ–Ω—å*"
        ,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return MAIN_MENU

# –û –Ω–∞—Å (–û–ë–ù–û–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç)
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [[InlineKeyboardButton(f"{E_BACK} –ù–ê–ó–ê–î", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üéôÔ∏è **–†–ê–î–ò–û –¢–Æ–ú–ï–ù–°–ö–û–ô –û–ë–õ–ê–°–¢–ò**\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "**‚ÑπÔ∏è –û –ù–ê–°**\n\n"
        "–í–µ–¥—É—â–∏–π —Ä–∞–¥–∏–æ–≤–µ—â–∞—Ç–µ–ª—å –≤ —Ä–µ–≥–∏–æ–Ω–µ. –û—Ö–≤–∞—Ç—ã–≤–∞–µ–º 52% —Ä–∞–¥–∏–æ—Ä—ã–Ω–∫–∞.\n\n"
        "**–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å\n"
        "–•–ª—ã—Å—Ç—É–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á\n"
        "–û–ì–†–ù–ò–ü 315723200067362\n\n"
        "üìß a.khlistunov@gmail.com\n"
        "üì± Telegram: t.me/AlexeyKhlistunov",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return MAIN_MENU

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω Excel –¥–ª—è –∞–¥–º–∏–Ω–∞)
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if query.data == "create_campaign":
        context.user_data.clear()
        return await radio_selection(update, context)
    
    elif query.data == "statistics":
        return await statistics(update, context)
    
    elif query.data == "my_orders":
        return await personal_cabinet(update, context)
    
    elif query.data == "about":
        return await about(update, context)
    
    # –û–ë–†–ê–ë–û–¢–ö–ê –ê–î–ú–ò–ù–°–ö–ò–• –ö–ù–û–ü–û–ö
    
    # PDF –¥–ª—è –∞–¥–º–∏–Ω–∞ (–û–ë–ù–û–í–õ–ï–ù–û: –ø–∞—Ç—Ç–µ—Ä–Ω)
    elif query.data.startswith("generate_pdf_admin_"):
        campaign_number = query.data.replace("generate_pdf_admin_", "")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª —Å—Ä–∞–∑—É)
            pdf_data = create_pdf_file(context.user_data, campaign_number) 
            if pdf_data:
                await query.message.reply_document(
                    document=io.BytesIO(pdf_data),
                    filename=f"mediaplan_{campaign_number}.pdf",
                    caption=f"üìÑ PDF –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ #{campaign_number}"
                )
            else:
                await query.message.reply_text(f"{E_CANCEL} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF")
        except Exception as e:
            await query.message.reply_text(f"{E_CANCEL} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
            
    # EXCEL –¥–ª—è –∞–¥–º–∏–Ω–∞ (–ù–û–í–´–ô –ë–õ–û–ö)
    elif query.data.startswith("generate_excel_admin_"): 
        campaign_number = query.data.replace("generate_excel_admin_", "")
        try:
            excel_data = create_excel_file(context.user_data, campaign_number)
            if excel_data:
                file_io = io.BytesIO(excel_data)
                file_io.name = f"mediaplan_{campaign_number}.xlsx"
                await query.message.reply_document(
                    document=file_io,
                    filename=f"mediaplan_{campaign_number}.xlsx",
                    caption=f"üíæ EXCEL –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ #{campaign_number}"
                )
            else:
                await query.message.reply_text(f"{E_CANCEL} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ EXCEL")
        except Exception as e:
            await query.message.reply_text(f"{E_CANCEL} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ EXCEL: {e}")
            
    # –ö–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    elif query.data.startswith("call_"):
        phone = query.data.replace("call_", "")
        await query.answer(f"üìû –ù–∞–±–µ—Ä–∏—Ç–µ: {phone}")
    
    elif query.data.startswith("email_"):
        email = query.data.replace("email_", "")
        await query.answer(f"‚úâÔ∏è Email: {email}")
    
    # –ù–ê–í–ò–ì–ê–¶–ò–Ø (–¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã)
    elif query.data == "back_to_main":
        return await start(update, context)
    
    elif query.data == "back_to_radio":
        return await radio_selection(update, context)
    
    elif query.data == "back_to_period":
        return await campaign_period(update, context)
    
    elif query.data == "back_to_time":
        return await time_slots(update, context)
    
    elif query.data == "back_to_branded":
        return await branded_sections(update, context)
    
    elif query.data == "back_to_creator":
        return await campaign_creator(update, context)
    
    elif query.data == "back_to_production":
        return await production_option(update, context)
    
    elif query.data == "back_to_final":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º –ø–æ—Å–ª–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
        campaign_number = context.user_data.get('campaign_number', 'R-000000')
        keyboard = [
            [
                InlineKeyboardButton(f"{E_PDF} –°–§–û–†–ú–ò–†–û–í–ê–¢–¨ PDF", callback_data="generate_pdf"),
                InlineKeyboardButton(f"{E_XLSX} –°–§–û–†–ú–ò–†–û–í–ê–¢–¨ EXCEL", callback_data="generate_excel")
            ],
            [
                InlineKeyboardButton(f"{E_SEND} –û–¢–ü–†–ê–í–ò–¢–¨ –°–ï–ë–ï –í –¢–ï–õ–ï–ì–†–ê–ú–ú", callback_data=f"send_to_telegram_{campaign_number}")
            ],
            [InlineKeyboardButton("üìã –ú–û–ò –ó–ê–ö–ê–ó–´", callback_data="personal_cabinet")],
            [InlineKeyboardButton("üöÄ –ù–û–í–´–ô –ó–ê–ö–ê–ó", callback_data="new_order")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return FINAL_ACTIONS
    
    elif query.data == "skip_text":
        context.user_data['campaign_text'] = ''
        return await production_option(update, context)
    
    elif query.data == "cancel_text":
        return await campaign_creator(update, context)
    
    elif query.data == "provide_own_audio":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å "–ü—Ä–∏—à–ª—é —Å–≤–æ–π —Ä–æ–ª–∏–∫"
        current_state = context.user_data.get('provide_own_audio', False)
        context.user_data['provide_own_audio'] = not current_state
        return await campaign_creator(update, context)
    
    elif query.data == "to_production_option":
        return await production_option(update, context)
    
    elif query.data == "request_tts": # –ù–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä TTS
        return await handle_tts_request(update, context)
    
    return MAIN_MENU

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    if init_db():
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ (–û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è TTS)
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(handle_main_menu, pattern='^.*$')
            ],
            RADIO_SELECTION: [
                CallbackQueryHandler(handle_radio_selection, pattern='^.*$')
            ],
            CAMPAIGN_PERIOD: [
                CallbackQueryHandler(handle_campaign_period, pattern='^.*$')
            ],
            TIME_SLOTS: [
                CallbackQueryHandler(handle_time_slots, pattern='^.*$')
            ],
            BRANDED_SECTIONS: [
                CallbackQueryHandler(handle_branded_sections, pattern='^.*$')
            ],
            CAMPAIGN_CREATOR: [
                CallbackQueryHandler(handle_tts_request, pattern='^request_tts$'), # –ù–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä TTS
                CallbackQueryHandler(handle_main_menu, pattern='^(back_to_|skip_text|cancel_text|to_production_option|provide_own_audio|enter_text)')
            ],
            "WAITING_TEXT": [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_campaign_text),
                CallbackQueryHandler(handle_main_menu, pattern='^back_to_creator$'),
                CallbackQueryHandler(handle_main_menu, pattern='^cancel_text$')
            ],
            PRODUCTION_OPTION: [
                CallbackQueryHandler(handle_production_option, pattern='^.*$')
            ],
            CONTACT_INFO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_contact_info),
                CallbackQueryHandler(handle_main_menu, pattern='^back_to_production$')
            ],
            FINAL_ACTIONS: [
                CallbackQueryHandler(handle_final_actions, pattern='^.*$')
            ]
        },
        fallbacks=[CommandHandler('start', start)],
        allow_reentry=True
    )
    
    application.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ (–û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω Excel)
    application.add_handler(CallbackQueryHandler(
        handle_main_menu, 
        pattern='^(generate_pdf_admin_|generate_excel_admin_|call_|email_)'
    ))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    if 'RENDER' in os.environ:
        application.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get('PORT', 8443)),
            url_path=TOKEN,
            webhook_url=f"https://{os.environ.get('RENDER_SERVICE_NAME', 'telegram-radio-bot')}.onrender.com/{TOKEN}"
        )
    else:
        application.run_polling()

if __name__ == '__main__':
    main()
